/// NOTE: THIS FILE IS AUTO-GENERATED BY dev/generate-multi-command-encoder.sh

import NIOCore

extension ValkeyCommandEncoder {

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable>(_ t0: T0) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable>(_ t0: T0, _ t1: T1) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable, T21: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20, _ t21: T21) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries + t21.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
        t21.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable, T21: RESPRenderable, T22: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20, _ t21: T21, _ t22: T22) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries + t21.respEntries + t22.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
        t21.encode(into: &self)
        t22.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable, T21: RESPRenderable, T22: RESPRenderable, T23: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20, _ t21: T21, _ t22: T22, _ t23: T23) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries + t21.respEntries + t22.respEntries + t23.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
        t21.encode(into: &self)
        t22.encode(into: &self)
        t23.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable, T21: RESPRenderable, T22: RESPRenderable, T23: RESPRenderable, T24: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20, _ t21: T21, _ t22: T22, _ t23: T23, _ t24: T24) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries + t21.respEntries + t22.respEntries + t23.respEntries + t24.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
        t21.encode(into: &self)
        t22.encode(into: &self)
        t23.encode(into: &self)
        t24.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable, T21: RESPRenderable, T22: RESPRenderable, T23: RESPRenderable, T24: RESPRenderable, T25: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20, _ t21: T21, _ t22: T22, _ t23: T23, _ t24: T24, _ t25: T25) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries + t21.respEntries + t22.respEntries + t23.respEntries + t24.respEntries + t25.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
        t21.encode(into: &self)
        t22.encode(into: &self)
        t23.encode(into: &self)
        t24.encode(into: &self)
        t25.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable, T21: RESPRenderable, T22: RESPRenderable, T23: RESPRenderable, T24: RESPRenderable, T25: RESPRenderable, T26: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20, _ t21: T21, _ t22: T22, _ t23: T23, _ t24: T24, _ t25: T25, _ t26: T26) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries + t21.respEntries + t22.respEntries + t23.respEntries + t24.respEntries + t25.respEntries + t26.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
        t21.encode(into: &self)
        t22.encode(into: &self)
        t23.encode(into: &self)
        t24.encode(into: &self)
        t25.encode(into: &self)
        t26.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable, T21: RESPRenderable, T22: RESPRenderable, T23: RESPRenderable, T24: RESPRenderable, T25: RESPRenderable, T26: RESPRenderable, T27: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20, _ t21: T21, _ t22: T22, _ t23: T23, _ t24: T24, _ t25: T25, _ t26: T26, _ t27: T27) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries + t21.respEntries + t22.respEntries + t23.respEntries + t24.respEntries + t25.respEntries + t26.respEntries + t27.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
        t21.encode(into: &self)
        t22.encode(into: &self)
        t23.encode(into: &self)
        t24.encode(into: &self)
        t25.encode(into: &self)
        t26.encode(into: &self)
        t27.encode(into: &self)
    }

    @inlinable
    public mutating func encodeArray<T0: RESPRenderable, T1: RESPRenderable, T2: RESPRenderable, T3: RESPRenderable, T4: RESPRenderable, T5: RESPRenderable, T6: RESPRenderable, T7: RESPRenderable, T8: RESPRenderable, T9: RESPRenderable, T10: RESPRenderable, T11: RESPRenderable, T12: RESPRenderable, T13: RESPRenderable, T14: RESPRenderable, T15: RESPRenderable, T16: RESPRenderable, T17: RESPRenderable, T18: RESPRenderable, T19: RESPRenderable, T20: RESPRenderable, T21: RESPRenderable, T22: RESPRenderable, T23: RESPRenderable, T24: RESPRenderable, T25: RESPRenderable, T26: RESPRenderable, T27: RESPRenderable, T28: RESPRenderable>(_ t0: T0, _ t1: T1, _ t2: T2, _ t3: T3, _ t4: T4, _ t5: T5, _ t6: T6, _ t7: T7, _ t8: T8, _ t9: T9, _ t10: T10, _ t11: T11, _ t12: T12, _ t13: T13, _ t14: T14, _ t15: T15, _ t16: T16, _ t17: T17, _ t18: T18, _ t19: T19, _ t20: T20, _ t21: T21, _ t22: T22, _ t23: T23, _ t24: T24, _ t25: T25, _ t26: T26, _ t27: T27, _ t28: T28) {
        self.encodeIdentifier(.array)
        let count = t0.respEntries + t1.respEntries + t2.respEntries + t3.respEntries + t4.respEntries + t5.respEntries + t6.respEntries + t7.respEntries + t8.respEntries + t9.respEntries + t10.respEntries + t11.respEntries + t12.respEntries + t13.respEntries + t14.respEntries + t15.respEntries + t16.respEntries + t17.respEntries + t18.respEntries + t19.respEntries + t20.respEntries + t21.respEntries + t22.respEntries + t23.respEntries + t24.respEntries + t25.respEntries + t26.respEntries + t27.respEntries + t28.respEntries
        self.buffer.writeString("\(count)")
        self.buffer.writeStaticString("\r\n")
        t0.encode(into: &self)
        t1.encode(into: &self)
        t2.encode(into: &self)
        t3.encode(into: &self)
        t4.encode(into: &self)
        t5.encode(into: &self)
        t6.encode(into: &self)
        t7.encode(into: &self)
        t8.encode(into: &self)
        t9.encode(into: &self)
        t10.encode(into: &self)
        t11.encode(into: &self)
        t12.encode(into: &self)
        t13.encode(into: &self)
        t14.encode(into: &self)
        t15.encode(into: &self)
        t16.encode(into: &self)
        t17.encode(into: &self)
        t18.encode(into: &self)
        t19.encode(into: &self)
        t20.encode(into: &self)
        t21.encode(into: &self)
        t22.encode(into: &self)
        t23.encode(into: &self)
        t24.encode(into: &self)
        t25.encode(into: &self)
        t26.encode(into: &self)
        t27.encode(into: &self)
        t28.encode(into: &self)
    }
}
