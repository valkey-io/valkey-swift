//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.
@_documentation(visibility: internal)
public struct PFADD: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var element: [String]

    @inlinable public init(key: ValkeyKey, element: [String] = []) {
        self.key = key
        self.element = element
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("PFADD", key, element)
    }
}

/// Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).
@_documentation(visibility: internal)
public struct PFCOUNT: ValkeyCommand {
    public typealias Response = Int

    public var key: [ValkeyKey]

    @inlinable public init(key: [ValkeyKey]) {
        self.key = key
    }

    public var keysAffected: [ValkeyKey] { key }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("PFCOUNT", key)
    }
}

/// Merges one or more HyperLogLog values into a single key.
@_documentation(visibility: internal)
public struct PFMERGE: ValkeyCommand {
    public var destkey: ValkeyKey
    public var sourcekey: [ValkeyKey]

    @inlinable public init(destkey: ValkeyKey, sourcekey: [ValkeyKey] = []) {
        self.destkey = destkey
        self.sourcekey = sourcekey
    }

    public var keysAffected: [ValkeyKey] { sourcekey + [destkey] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("PFMERGE", destkey, sourcekey)
    }
}

extension ValkeyConnectionProtocol {
    /// Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [PFADD](https://valkey.io/commands/pfadd)
    /// - Available: 2.8.9
    /// - Complexity: O(1) to add every element.
    /// - Response: One of the following
    ///     * 1: If at least 1 HyperLogLog internal register was altered.
    ///     * 0: If no HyperLogLog internal register were altered.
    @inlinable
    public func pfadd(key: ValkeyKey, element: [String] = []) async throws -> Int {
        try await send(command: PFADD(key: key, element: element))
    }

    /// Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).
    ///
    /// - Documentation: [PFCOUNT](https://valkey.io/commands/pfcount)
    /// - Available: 2.8.9
    /// - Complexity: O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.
    /// - Response: [Integer]: The approximated number of unique elements observed via PFADD
    @inlinable
    public func pfcount(key: [ValkeyKey]) async throws -> Int {
        try await send(command: PFCOUNT(key: key))
    }

    /// Merges one or more HyperLogLog values into a single key.
    ///
    /// - Documentation: [PFMERGE](https://valkey.io/commands/pfmerge)
    /// - Available: 2.8.9
    /// - Complexity: O(N) to merge N HyperLogLogs, but with high constant times.
    @inlinable
    public func pfmerge(destkey: ValkeyKey, sourcekey: [ValkeyKey] = []) async throws {
        _ = try await send(command: PFMERGE(destkey: destkey, sourcekey: sourcekey))
    }

}
