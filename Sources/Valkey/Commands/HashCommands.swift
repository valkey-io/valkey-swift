//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-valkey open source project
//
// Copyright (c) 2025 Apple Inc. and the swift-valkey project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-valkey project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.
public struct HDEL: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey
    public var field: [String]

    @inlinable public init(key: RESPKey, field: [String]) {
        self.key = key
        self.field = field
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HDEL", key, field)
    }
}

/// Determines whether a field exists in a hash.
public struct HEXISTS: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey
    public var field: String

    @inlinable public init(key: RESPKey, field: String) {
        self.key = key
        self.field = field
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HEXISTS", key, field)
    }
}

/// Returns the value of a field in a hash.
public struct HGET: RESPCommand {
    public typealias Response = RESPToken?

    public var key: RESPKey
    public var field: String

    @inlinable public init(key: RESPKey, field: String) {
        self.key = key
        self.field = field
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HGET", key, field)
    }
}

/// Returns all fields and values in a hash.
public struct HGETALL: RESPCommand {
    public typealias Response = RESPToken.Map

    public var key: RESPKey

    @inlinable public init(key: RESPKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HGETALL", key)
    }
}

/// Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.
public struct HINCRBY: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey
    public var field: String
    public var increment: Int

    @inlinable public init(key: RESPKey, field: String, increment: Int) {
        self.key = key
        self.field = field
        self.increment = increment
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HINCRBY", key, field, increment)
    }
}

/// Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.
public struct HINCRBYFLOAT: RESPCommand {
    public var key: RESPKey
    public var field: String
    public var increment: Double

    @inlinable public init(key: RESPKey, field: String, increment: Double) {
        self.key = key
        self.field = field
        self.increment = increment
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HINCRBYFLOAT", key, field, increment)
    }
}

/// Returns all fields in a hash.
public struct HKEYS: RESPCommand {
    public typealias Response = RESPToken.Array

    public var key: RESPKey

    @inlinable public init(key: RESPKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HKEYS", key)
    }
}

/// Returns the number of fields in a hash.
public struct HLEN: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey

    @inlinable public init(key: RESPKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HLEN", key)
    }
}

/// Returns the values of all fields in a hash.
public struct HMGET: RESPCommand {
    public typealias Response = RESPToken.Array

    public var key: RESPKey
    public var field: [String]

    @inlinable public init(key: RESPKey, field: [String]) {
        self.key = key
        self.field = field
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HMGET", key, field)
    }
}

/// Sets the values of multiple fields.
@available(*, deprecated, message: "Since 4.0.0. Replaced by `HSET` with multiple field-value pairs.")
public struct HMSET: RESPCommand {
    public struct Data: RESPRenderable, Sendable {
        @usableFromInline let field: String
        @usableFromInline let value: String


        @inlinable public init(field: String, value: String) {
            self.field = field
            self.value = value
        }

        @inlinable
        public var respEntries: Int {
            field.respEntries + value.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout RESPCommandEncoder) {
            field.encode(into: &commandEncoder)
            value.encode(into: &commandEncoder)
        }
    }
    public var key: RESPKey
    public var data: [Data]

    @inlinable public init(key: RESPKey, data: [Data]) {
        self.key = key
        self.data = data
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HMSET", key, data)
    }
}

/// Returns one or more random fields from a hash.
public struct HRANDFIELD: RESPCommand {
    public struct Options: RESPRenderable, Sendable {
        @usableFromInline let count: Int
        @usableFromInline let withvalues: Bool


        @inlinable public init(count: Int, withvalues: Bool = false) {
            self.count = count
            self.withvalues = withvalues
        }

        @inlinable
        public var respEntries: Int {
            count.respEntries + "WITHVALUES".respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout RESPCommandEncoder) {
            count.encode(into: &commandEncoder)
            "WITHVALUES".encode(into: &commandEncoder)
        }
    }
    public var key: RESPKey
    public var options: Options? = nil

    @inlinable public init(key: RESPKey, options: Options? = nil) {
        self.key = key
        self.options = options
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HRANDFIELD", key, options)
    }
}

/// Iterates over fields and values of a hash.
public struct HSCAN: RESPCommand {
    public typealias Response = RESPToken.Array

    public var key: RESPKey
    public var cursor: Int
    public var pattern: String? = nil
    public var count: Int? = nil

    @inlinable public init(key: RESPKey, cursor: Int, pattern: String? = nil, count: Int? = nil) {
        self.key = key
        self.cursor = cursor
        self.pattern = pattern
        self.count = count
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HSCAN", key, cursor, RESPWithToken("MATCH", pattern), RESPWithToken("COUNT", count))
    }
}

/// Creates or modifies the value of a field in a hash.
public struct HSET: RESPCommand {
    public struct Data: RESPRenderable, Sendable {
        @usableFromInline let field: String
        @usableFromInline let value: String


        @inlinable public init(field: String, value: String) {
            self.field = field
            self.value = value
        }

        @inlinable
        public var respEntries: Int {
            field.respEntries + value.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout RESPCommandEncoder) {
            field.encode(into: &commandEncoder)
            value.encode(into: &commandEncoder)
        }
    }
    public typealias Response = Int

    public var key: RESPKey
    public var data: [Data]

    @inlinable public init(key: RESPKey, data: [Data]) {
        self.key = key
        self.data = data
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HSET", key, data)
    }
}

/// Sets the value of a field in a hash only when the field doesn't exist.
public struct HSETNX: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey
    public var field: String
    public var value: String

    @inlinable public init(key: RESPKey, field: String, value: String) {
        self.key = key
        self.field = field
        self.value = value
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HSETNX", key, field, value)
    }
}

/// Returns the length of the value of a field.
public struct HSTRLEN: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey
    public var field: String

    @inlinable public init(key: RESPKey, field: String) {
        self.key = key
        self.field = field
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HSTRLEN", key, field)
    }
}

/// Returns all values in a hash.
public struct HVALS: RESPCommand {
    public typealias Response = RESPToken.Array

    public var key: RESPKey

    @inlinable public init(key: RESPKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<RESPKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("HVALS", key)
    }
}

extension ValkeyConnection {
    /// Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.
    ///
    /// - Documentation: [HDEL](https:/valkey.io/commands/hdel)
    /// - Version: 2.0.0
    /// - Complexity: O(N) where N is the number of fields to be removed.
    /// - Categories: @write, @hash, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of fields that were removed from the hash, excluding any specified but non-existing fields.
    @inlinable
    public func hdel(key: RESPKey, field: [String]) async throws -> Int {
        try await send(command: HDEL(key: key, field: field))
    }

    /// Determines whether a field exists in a hash.
    ///
    /// - Documentation: [HEXISTS](https:/valkey.io/commands/hexists)
    /// - Version: 2.0.0
    /// - Complexity: O(1)
    /// - Categories: @read, @hash, @fast
    /// - Returns: One of the following:
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `0` if the hash does not contain the field, or the key does not exist.
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `1` if the hash contains the field.
    @inlinable
    public func hexists(key: RESPKey, field: String) async throws -> Int {
        try await send(command: HEXISTS(key: key, field: field))
    }

    /// Returns the value of a field in a hash.
    ///
    /// - Documentation: [HGET](https:/valkey.io/commands/hget)
    /// - Version: 2.0.0
    /// - Complexity: O(1)
    /// - Categories: @read, @hash, @fast
    /// - Returns: One of the following:
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): The value associated with the field.
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): If the field is not present in the hash or key does not exist.
    @inlinable
    public func hget(key: RESPKey, field: String) async throws -> RESPToken? {
        try await send(command: HGET(key: key, field: field))
    }

    /// Returns all fields and values in a hash.
    ///
    /// - Documentation: [HGETALL](https:/valkey.io/commands/hgetall)
    /// - Version: 2.0.0
    /// - Complexity: O(N) where N is the size of the hash.
    /// - Categories: @read, @hash, @slow
    /// - Returns: [Map](https:/valkey.io/topics/protocol/#maps): a map of fields and their values stored in the hash, or an empty list when key does not exist.
    @inlinable
    public func hgetall(key: RESPKey) async throws -> RESPToken.Map {
        try await send(command: HGETALL(key: key))
    }

    /// Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.
    ///
    /// - Documentation: [HINCRBY](https:/valkey.io/commands/hincrby)
    /// - Version: 2.0.0
    /// - Complexity: O(1)
    /// - Categories: @write, @hash, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the value of the field after the increment operation.
    @inlinable
    public func hincrby(key: RESPKey, field: String, increment: Int) async throws -> Int {
        try await send(command: HINCRBY(key: key, field: field, increment: increment))
    }

    /// Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.
    ///
    /// - Documentation: [HINCRBYFLOAT](https:/valkey.io/commands/hincrbyfloat)
    /// - Version: 2.6.0
    /// - Complexity: O(1)
    /// - Categories: @write, @hash, @fast
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the value of the field after the increment operation.
    @inlinable
    public func hincrbyfloat(key: RESPKey, field: String, increment: Double) async throws -> HINCRBYFLOAT.Response {
        try await send(command: HINCRBYFLOAT(key: key, field: field, increment: increment))
    }

    /// Returns all fields in a hash.
    ///
    /// - Documentation: [HKEYS](https:/valkey.io/commands/hkeys)
    /// - Version: 2.0.0
    /// - Complexity: O(N) where N is the size of the hash.
    /// - Categories: @read, @hash, @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of fields in the hash, or an empty list when the key does not exist.
    @inlinable
    public func hkeys(key: RESPKey) async throws -> RESPToken.Array {
        try await send(command: HKEYS(key: key))
    }

    /// Returns the number of fields in a hash.
    ///
    /// - Documentation: [HLEN](https:/valkey.io/commands/hlen)
    /// - Version: 2.0.0
    /// - Complexity: O(1)
    /// - Categories: @read, @hash, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of fields in the hash, or 0 when the key does not exist.
    @inlinable
    public func hlen(key: RESPKey) async throws -> Int {
        try await send(command: HLEN(key: key))
    }

    /// Returns the values of all fields in a hash.
    ///
    /// - Documentation: [HMGET](https:/valkey.io/commands/hmget)
    /// - Version: 2.0.0
    /// - Complexity: O(N) where N is the number of fields being requested.
    /// - Categories: @read, @hash, @fast
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of values associated with the given fields, in the same order as they are requested.
    @inlinable
    public func hmget(key: RESPKey, field: [String]) async throws -> RESPToken.Array {
        try await send(command: HMGET(key: key, field: field))
    }

    /// Sets the values of multiple fields.
    ///
    /// - Documentation: [HMSET](https:/valkey.io/commands/hmset)
    /// - Version: 2.0.0
    /// - Complexity: O(N) where N is the number of fields being set.
    /// - Categories: @write, @hash, @fast
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    @available(*, deprecated, message: "Since 4.0.0. Replaced by `HSET` with multiple field-value pairs.")
    public func hmset(key: RESPKey, data: [HMSET.Data]) async throws {
        _ = try await send(command: HMSET(key: key, data: data))
    }

    /// Returns one or more random fields from a hash.
    ///
    /// - Documentation: [HRANDFIELD](https:/valkey.io/commands/hrandfield)
    /// - Version: 6.2.0
    /// - Complexity: O(N) where N is the number of fields returned
    /// - Categories: @read, @hash, @slow
    /// - Returns: Any of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): if the key doesn't exist
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): a single, randomly selected field when the `count` option is not used
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): a list containing `count` fields when the `count` option is used, or an empty array if the key does not exists.
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): a list of fields and their values when `count` and `WITHVALUES` were both used.
    @inlinable
    public func hrandfield(key: RESPKey, options: HRANDFIELD.Options? = nil) async throws -> HRANDFIELD.Response {
        try await send(command: HRANDFIELD(key: key, options: options))
    }

    /// Iterates over fields and values of a hash.
    ///
    /// - Documentation: [HSCAN](https:/valkey.io/commands/hscan)
    /// - Version: 2.8.0
    /// - Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
    /// - Categories: @read, @hash, @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a two-element array.
    ///     * The first element is a [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings) that represents an unsigned 64-bit number, the cursor.
    ///     * The second element is an [Array](https:/valkey.io/topics/protocol/#arrays) of field/value pairs that were scanned. When `NOVALUES` option is on, a list of keys from the hash.
    @inlinable
    public func hscan(key: RESPKey, cursor: Int, pattern: String? = nil, count: Int? = nil) async throws -> RESPToken.Array {
        try await send(command: HSCAN(key: key, cursor: cursor, pattern: pattern, count: count))
    }

    /// Creates or modifies the value of a field in a hash.
    ///
    /// - Documentation: [HSET](https:/valkey.io/commands/hset)
    /// - Version: 2.0.0
    /// - Complexity: O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.
    /// - Categories: @write, @hash, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of fields that were added.
    @inlinable
    public func hset(key: RESPKey, data: [HSET.Data]) async throws -> Int {
        try await send(command: HSET(key: key, data: data))
    }

    /// Sets the value of a field in a hash only when the field doesn't exist.
    ///
    /// - Documentation: [HSETNX](https:/valkey.io/commands/hsetnx)
    /// - Version: 2.0.0
    /// - Complexity: O(1)
    /// - Categories: @write, @hash, @fast
    /// - Returns: One of the following:
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `0` if the field already exists in the hash and no operation was performed.
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `1` if the field is a new field in the hash and the value was set.
    @inlinable
    public func hsetnx(key: RESPKey, field: String, value: String) async throws -> Int {
        try await send(command: HSETNX(key: key, field: field, value: value))
    }

    /// Returns the length of the value of a field.
    ///
    /// - Documentation: [HSTRLEN](https:/valkey.io/commands/hstrlen)
    /// - Version: 3.2.0
    /// - Complexity: O(1)
    /// - Categories: @read, @hash, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the string length of the value associated with the _field_, or zero when the _field_ isn't present in the hash or the _key_ doesn't exist at all.
    @inlinable
    public func hstrlen(key: RESPKey, field: String) async throws -> Int {
        try await send(command: HSTRLEN(key: key, field: field))
    }

    /// Returns all values in a hash.
    ///
    /// - Documentation: [HVALS](https:/valkey.io/commands/hvals)
    /// - Version: 2.0.0
    /// - Complexity: O(N) where N is the size of the hash.
    /// - Categories: @read, @hash, @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of values in the hash, or an empty list when the key does not exist.
    @inlinable
    public func hvals(key: RESPKey) async throws -> RESPToken.Array {
        try await send(command: HVALS(key: key))
    }

}
