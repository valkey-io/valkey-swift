//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.
@_documentation(visibility: internal)
public struct HDEL<Field: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var fields: [Field]

    @inlinable public init(_ key: ValkeyKey, fields: [Field]) {
        self.key = key
        self.fields = fields
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HDEL", key, fields.map { RESPBulkString($0) })
    }
}

/// Determines whether a field exists in a hash.
@_documentation(visibility: internal)
public struct HEXISTS<Field: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var field: Field

    @inlinable public init(_ key: ValkeyKey, field: Field) {
        self.key = key
        self.field = field
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HEXISTS", key, RESPBulkString(field))
    }
}

/// Returns the value of a field in a hash.
@_documentation(visibility: internal)
public struct HGET<Field: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = ByteBuffer?

    public var key: ValkeyKey
    public var field: Field

    @inlinable public init(_ key: ValkeyKey, field: Field) {
        self.key = key
        self.field = field
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HGET", key, RESPBulkString(field))
    }
}

/// Returns all fields and values in a hash.
@_documentation(visibility: internal)
public struct HGETALL: ValkeyCommand {
    public typealias Response = RESPToken.Map

    public var key: ValkeyKey

    @inlinable public init(_ key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HGETALL", key)
    }
}

/// Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.
@_documentation(visibility: internal)
public struct HINCRBY<Field: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var field: Field
    public var increment: Int

    @inlinable public init(_ key: ValkeyKey, field: Field, increment: Int) {
        self.key = key
        self.field = field
        self.increment = increment
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HINCRBY", key, RESPBulkString(field), increment)
    }
}

/// Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.
@_documentation(visibility: internal)
public struct HINCRBYFLOAT<Field: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = ByteBuffer

    public var key: ValkeyKey
    public var field: Field
    public var increment: Double

    @inlinable public init(_ key: ValkeyKey, field: Field, increment: Double) {
        self.key = key
        self.field = field
        self.increment = increment
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HINCRBYFLOAT", key, RESPBulkString(field), increment)
    }
}

/// Returns all fields in a hash.
@_documentation(visibility: internal)
public struct HKEYS: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey

    @inlinable public init(_ key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HKEYS", key)
    }
}

/// Returns the number of fields in a hash.
@_documentation(visibility: internal)
public struct HLEN: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey

    @inlinable public init(_ key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HLEN", key)
    }
}

/// Returns the values of all fields in a hash.
@_documentation(visibility: internal)
public struct HMGET<Field: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var fields: [Field]

    @inlinable public init(_ key: ValkeyKey, fields: [Field]) {
        self.key = key
        self.fields = fields
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HMGET", key, fields.map { RESPBulkString($0) })
    }
}

/// Sets the values of multiple fields.
@_documentation(visibility: internal)
public struct HMSET<Field: RESPStringRenderable, Value: RESPStringRenderable>: ValkeyCommand {
    public struct Data: RESPRenderable, Sendable, Hashable {
        @usableFromInline let field: Field
        @usableFromInline let value: Value

        @inlinable public init(field: Field, value: Value) {
            self.field = field
            self.value = value
        }

        @inlinable
        public var respEntries: Int {
            RESPBulkString(field).respEntries + RESPBulkString(value).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            RESPBulkString(field).encode(into: &commandEncoder)
            RESPBulkString(value).encode(into: &commandEncoder)
        }
    }
    public var key: ValkeyKey
    public var datas: [Data]

    @inlinable public init(_ key: ValkeyKey, datas: [Data]) {
        self.key = key
        self.datas = datas
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HMSET", key, datas)
    }
}

/// Returns one or more random fields from a hash.
@_documentation(visibility: internal)
public struct HRANDFIELD: ValkeyCommand {
    public struct Options: RESPRenderable, Sendable, Hashable {
        @usableFromInline let count: Int
        @usableFromInline let withvalues: Bool

        @inlinable public init(count: Int, withvalues: Bool = false) {
            self.count = count
            self.withvalues = withvalues
        }

        @inlinable
        public var respEntries: Int {
            count.respEntries + RESPPureToken("WITHVALUES", withvalues).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            count.encode(into: &commandEncoder)
            RESPPureToken("WITHVALUES", withvalues).encode(into: &commandEncoder)
        }
    }
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var options: Options?

    @inlinable public init(_ key: ValkeyKey, options: Options? = nil) {
        self.key = key
        self.options = options
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HRANDFIELD", key, options)
    }
}

/// Iterates over fields and values of a hash.
@_documentation(visibility: internal)
public struct HSCAN: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var cursor: Int
    public var pattern: String?
    public var count: Int?
    public var novalues: Bool

    @inlinable public init(_ key: ValkeyKey, cursor: Int, pattern: String? = nil, count: Int? = nil, novalues: Bool = false) {
        self.key = key
        self.cursor = cursor
        self.pattern = pattern
        self.count = count
        self.novalues = novalues
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray(
            "HSCAN",
            key,
            cursor,
            RESPWithToken("MATCH", pattern),
            RESPWithToken("COUNT", count),
            RESPPureToken("NOVALUES", novalues)
        )
    }
}

/// Creates or modifies the value of a field in a hash.
@_documentation(visibility: internal)
public struct HSET<Field: RESPStringRenderable, Value: RESPStringRenderable>: ValkeyCommand {
    public struct Data: RESPRenderable, Sendable, Hashable {
        @usableFromInline let field: Field
        @usableFromInline let value: Value

        @inlinable public init(field: Field, value: Value) {
            self.field = field
            self.value = value
        }

        @inlinable
        public var respEntries: Int {
            RESPBulkString(field).respEntries + RESPBulkString(value).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            RESPBulkString(field).encode(into: &commandEncoder)
            RESPBulkString(value).encode(into: &commandEncoder)
        }
    }
    public typealias Response = Int

    public var key: ValkeyKey
    public var datas: [Data]

    @inlinable public init(_ key: ValkeyKey, datas: [Data]) {
        self.key = key
        self.datas = datas
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HSET", key, datas)
    }
}

/// Sets the value of a field in a hash only when the field doesn't exist.
@_documentation(visibility: internal)
public struct HSETNX<Field: RESPStringRenderable, Value: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var field: Field
    public var value: Value

    @inlinable public init(_ key: ValkeyKey, field: Field, value: Value) {
        self.key = key
        self.field = field
        self.value = value
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HSETNX", key, RESPBulkString(field), RESPBulkString(value))
    }
}

/// Returns the length of the value of a field.
@_documentation(visibility: internal)
public struct HSTRLEN<Field: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var field: Field

    @inlinable public init(_ key: ValkeyKey, field: Field) {
        self.key = key
        self.field = field
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HSTRLEN", key, RESPBulkString(field))
    }
}

/// Returns all values in a hash.
@_documentation(visibility: internal)
public struct HVALS: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey

    @inlinable public init(_ key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("HVALS", key)
    }
}

extension ValkeyConnectionProtocol {
    /// Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.
    ///
    /// - Documentation: [HDEL](https://valkey.io/commands/hdel)
    /// - Available: 2.0.0
    /// - History:
    ///     * 2.4.0: Accepts multiple `field` arguments.
    /// - Complexity: O(N) where N is the number of fields to be removed.
    /// - Response: [Integer]: The number of fields that were removed from the hash.
    @inlinable
    @discardableResult
    public func hdel<Field: RESPStringRenderable>(_ key: ValkeyKey, fields: [Field]) async throws -> Int {
        try await send(command: HDEL(key, fields: fields))
    }

    /// Determines whether a field exists in a hash.
    ///
    /// - Documentation: [HEXISTS](https://valkey.io/commands/hexists)
    /// - Available: 2.0.0
    /// - Complexity: O(1)
    /// - Response: One of the following
    ///     * 0: The hash does not contain the field, or key does not exist.
    ///     * 1: The hash contains the field.
    @inlinable
    public func hexists<Field: RESPStringRenderable>(_ key: ValkeyKey, field: Field) async throws -> Int {
        try await send(command: HEXISTS(key, field: field))
    }

    /// Returns the value of a field in a hash.
    ///
    /// - Documentation: [HGET](https://valkey.io/commands/hget)
    /// - Available: 2.0.0
    /// - Complexity: O(1)
    /// - Response: One of the following
    ///     * [String]: The value associated with the field.
    ///     * [Null]: If the field is not present in the hash or key does not exist.
    @inlinable
    public func hget<Field: RESPStringRenderable>(_ key: ValkeyKey, field: Field) async throws -> ByteBuffer? {
        try await send(command: HGET(key, field: field))
    }

    /// Returns all fields and values in a hash.
    ///
    /// - Documentation: [HGETALL](https://valkey.io/commands/hgetall)
    /// - Available: 2.0.0
    /// - Complexity: O(N) where N is the size of the hash.
    /// - Response: [Map]: Map of fields and their values stored in the hash, or an empty list when key does not exist. In RESP2 this is returned as a flat array.
    @inlinable
    public func hgetall(_ key: ValkeyKey) async throws -> RESPToken.Map {
        try await send(command: HGETALL(key))
    }

    /// Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.
    ///
    /// - Documentation: [HINCRBY](https://valkey.io/commands/hincrby)
    /// - Available: 2.0.0
    /// - Complexity: O(1)
    /// - Response: [Integer]: The value of the field after the increment operation.
    @inlinable
    @discardableResult
    public func hincrby<Field: RESPStringRenderable>(_ key: ValkeyKey, field: Field, increment: Int) async throws -> Int {
        try await send(command: HINCRBY(key, field: field, increment: increment))
    }

    /// Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.
    ///
    /// - Documentation: [HINCRBYFLOAT](https://valkey.io/commands/hincrbyfloat)
    /// - Available: 2.6.0
    /// - Complexity: O(1)
    /// - Response: [String]: The value of the field after the increment operation.
    @inlinable
    @discardableResult
    public func hincrbyfloat<Field: RESPStringRenderable>(_ key: ValkeyKey, field: Field, increment: Double) async throws -> ByteBuffer {
        try await send(command: HINCRBYFLOAT(key, field: field, increment: increment))
    }

    /// Returns all fields in a hash.
    ///
    /// - Documentation: [HKEYS](https://valkey.io/commands/hkeys)
    /// - Available: 2.0.0
    /// - Complexity: O(N) where N is the size of the hash.
    /// - Response: [Array]: List of fields in the hash, or an empty list when the key does not exist.
    @inlinable
    public func hkeys(_ key: ValkeyKey) async throws -> RESPToken.Array {
        try await send(command: HKEYS(key))
    }

    /// Returns the number of fields in a hash.
    ///
    /// - Documentation: [HLEN](https://valkey.io/commands/hlen)
    /// - Available: 2.0.0
    /// - Complexity: O(1)
    /// - Response: [Integer]: Number of the fields in the hash, or 0 when the key does not exist.
    @inlinable
    public func hlen(_ key: ValkeyKey) async throws -> Int {
        try await send(command: HLEN(key))
    }

    /// Returns the values of all fields in a hash.
    ///
    /// - Documentation: [HMGET](https://valkey.io/commands/hmget)
    /// - Available: 2.0.0
    /// - Complexity: O(N) where N is the number of fields being requested.
    /// - Response: [Array]: List of values associated with the given fields, in the same order as they are requested.
    @inlinable
    public func hmget<Field: RESPStringRenderable>(_ key: ValkeyKey, fields: [Field]) async throws -> RESPToken.Array {
        try await send(command: HMGET(key, fields: fields))
    }

    /// Sets the values of multiple fields.
    ///
    /// - Documentation: [HMSET](https://valkey.io/commands/hmset)
    /// - Available: 2.0.0
    /// - Deprecated since: 4.0.0. Replaced by `HSET` with multiple field-value pairs.
    /// - Complexity: O(N) where N is the number of fields being set.
    @inlinable
    public func hmset<Field: RESPStringRenderable, Value: RESPStringRenderable>(_ key: ValkeyKey, datas: [HMSET<Field, Value>.Data]) async throws {
        _ = try await send(command: HMSET(key, datas: datas))
    }

    /// Returns one or more random fields from a hash.
    ///
    /// - Documentation: [HRANDFIELD](https://valkey.io/commands/hrandfield)
    /// - Available: 6.2.0
    /// - Complexity: O(N) where N is the number of fields returned
    /// - Response: One of the following
    ///     * [Null]: Key doesn't exist
    ///     * [String]: A single random field. Returned in case `COUNT` was not used.
    ///     * [Array]: A list of fields. Returned in case `COUNT` was used.
    ///     * [Array]: Fields and their values. Returned in case `COUNT` and `WITHVALUES` were used. In RESP2 this is returned as a flat array.
    @inlinable
    public func hrandfield(_ key: ValkeyKey, options: HRANDFIELD.Options? = nil) async throws -> RESPToken? {
        try await send(command: HRANDFIELD(key, options: options))
    }

    /// Iterates over fields and values of a hash.
    ///
    /// - Documentation: [HSCAN](https://valkey.io/commands/hscan)
    /// - Available: 2.8.0
    /// - Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
    /// - Response: [Array]: Cursor and scan response in array form.
    @inlinable
    public func hscan(
        _ key: ValkeyKey,
        cursor: Int,
        pattern: String? = nil,
        count: Int? = nil,
        novalues: Bool = false
    ) async throws -> RESPToken.Array {
        try await send(command: HSCAN(key, cursor: cursor, pattern: pattern, count: count, novalues: novalues))
    }

    /// Creates or modifies the value of a field in a hash.
    ///
    /// - Documentation: [HSET](https://valkey.io/commands/hset)
    /// - Available: 2.0.0
    /// - History:
    ///     * 4.0.0: Accepts multiple `field` and `value` arguments.
    /// - Complexity: O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.
    /// - Response: [Integer]: The number of fields that were added
    @inlinable
    @discardableResult
    public func hset<Field: RESPStringRenderable, Value: RESPStringRenderable>(_ key: ValkeyKey, datas: [HSET<Field, Value>.Data]) async throws -> Int
    {
        try await send(command: HSET(key, datas: datas))
    }

    /// Sets the value of a field in a hash only when the field doesn't exist.
    ///
    /// - Documentation: [HSETNX](https://valkey.io/commands/hsetnx)
    /// - Available: 2.0.0
    /// - Complexity: O(1)
    /// - Response: One of the following
    ///     * 0: The field is a new field in the hash and value was set.
    ///     * 1: The field already exists in the hash and no operation was performed.
    @inlinable
    @discardableResult
    public func hsetnx<Field: RESPStringRenderable, Value: RESPStringRenderable>(_ key: ValkeyKey, field: Field, value: Value) async throws -> Int {
        try await send(command: HSETNX(key, field: field, value: value))
    }

    /// Returns the length of the value of a field.
    ///
    /// - Documentation: [HSTRLEN](https://valkey.io/commands/hstrlen)
    /// - Available: 3.2.0
    /// - Complexity: O(1)
    /// - Response: [Integer]: String length of the value associated with the field, or zero when the field is not present in the hash or key does not exist at all.
    @inlinable
    public func hstrlen<Field: RESPStringRenderable>(_ key: ValkeyKey, field: Field) async throws -> Int {
        try await send(command: HSTRLEN(key, field: field))
    }

    /// Returns all values in a hash.
    ///
    /// - Documentation: [HVALS](https://valkey.io/commands/hvals)
    /// - Available: 2.0.0
    /// - Complexity: O(N) where N is the size of the hash.
    /// - Response: [Array]: List of values in the hash, or an empty list when the key does not exist.
    @inlinable
    public func hvals(_ key: ValkeyKey) async throws -> RESPToken.Array {
        try await send(command: HVALS(key))
    }

}
