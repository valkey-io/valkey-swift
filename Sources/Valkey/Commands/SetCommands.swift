//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-valkey open source project
//
// Copyright (c) 2025 Apple Inc. and the swift-valkey project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-valkey project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Adds one or more members to a set. Creates the key if it doesn't exist.
public struct SADD: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey
    public var member: [String]

    @inlinable public init(key: RESPKey, member: [String]) {
        self.key = key
        self.member = member
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SADD", key, member)
    }
}

/// Returns the number of members in a set.
public struct SCARD: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey

    @inlinable public init(key: RESPKey) {
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SCARD", key)
    }
}

/// Returns the difference of multiple sets.
public struct SDIFF: RESPCommand {
    public typealias Response = RESPToken

    public var key: [RESPKey]

    @inlinable public init(key: [RESPKey]) {
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SDIFF", key)
    }
}

/// Stores the difference of multiple sets in a key.
public struct SDIFFSTORE: RESPCommand {
    public typealias Response = Int

    public var destination: RESPKey
    public var key: [RESPKey]

    @inlinable public init(destination: RESPKey, key: [RESPKey]) {
        self.destination = destination
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SDIFFSTORE", destination, key)
    }
}

/// Returns the intersect of multiple sets.
public struct SINTER: RESPCommand {
    public typealias Response = RESPToken

    public var key: [RESPKey]

    @inlinable public init(key: [RESPKey]) {
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SINTER", key)
    }
}

/// Returns the number of members of the intersect of multiple sets.
public struct SINTERCARD: RESPCommand {
    public typealias Response = Int

    public var key: [RESPKey]
    public var limit: Int? = nil

    @inlinable public init(key: [RESPKey], limit: Int? = nil) {
        self.key = key
        self.limit = limit
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SINTERCARD", RESPArrayWithCount(key), RESPWithToken("LIMIT", limit))
    }
}

/// Stores the intersect of multiple sets in a key.
public struct SINTERSTORE: RESPCommand {
    public typealias Response = Int

    public var destination: RESPKey
    public var key: [RESPKey]

    @inlinable public init(destination: RESPKey, key: [RESPKey]) {
        self.destination = destination
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SINTERSTORE", destination, key)
    }
}

/// Determines whether a member belongs to a set.
public struct SISMEMBER: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey
    public var member: String

    @inlinable public init(key: RESPKey, member: String) {
        self.key = key
        self.member = member
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SISMEMBER", key, member)
    }
}

/// Returns all members of a set.
public struct SMEMBERS: RESPCommand {
    public typealias Response = RESPToken

    public var key: RESPKey

    @inlinable public init(key: RESPKey) {
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SMEMBERS", key)
    }
}

/// Determines whether multiple members belong to a set.
public struct SMISMEMBER: RESPCommand {
    public typealias Response = [RESPToken]

    public var key: RESPKey
    public var member: [String]

    @inlinable public init(key: RESPKey, member: [String]) {
        self.key = key
        self.member = member
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SMISMEMBER", key, member)
    }
}

/// Moves a member from one set to another.
public struct SMOVE: RESPCommand {
    public typealias Response = Int

    public var source: RESPKey
    public var destination: RESPKey
    public var member: String

    @inlinable public init(source: RESPKey, destination: RESPKey, member: String) {
        self.source = source
        self.destination = destination
        self.member = member
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SMOVE", source, destination, member)
    }
}

/// Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.
public struct SPOP: RESPCommand {
    public typealias Response = RESPToken

    public var key: RESPKey
    public var count: Int? = nil

    @inlinable public init(key: RESPKey, count: Int? = nil) {
        self.key = key
        self.count = count
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SPOP", key, count)
    }
}

/// Get one or multiple random members from a set
public struct SRANDMEMBER: RESPCommand {
    public typealias Response = RESPToken

    public var key: RESPKey
    public var count: Int? = nil

    @inlinable public init(key: RESPKey, count: Int? = nil) {
        self.key = key
        self.count = count
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SRANDMEMBER", key, count)
    }
}

/// Removes one or more members from a set. Deletes the set if the last member was removed.
public struct SREM: RESPCommand {
    public typealias Response = Int

    public var key: RESPKey
    public var member: [String]

    @inlinable public init(key: RESPKey, member: [String]) {
        self.key = key
        self.member = member
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SREM", key, member)
    }
}

/// Iterates over members of a set.
public struct SSCAN: RESPCommand {
    public typealias Response = [RESPToken]

    public var key: RESPKey
    public var cursor: Int
    public var pattern: String? = nil
    public var count: Int? = nil

    @inlinable public init(key: RESPKey, cursor: Int, pattern: String? = nil, count: Int? = nil) {
        self.key = key
        self.cursor = cursor
        self.pattern = pattern
        self.count = count
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SSCAN", key, cursor, RESPWithToken("MATCH", pattern), RESPWithToken("COUNT", count))
    }
}

/// Returns the union of multiple sets.
public struct SUNION: RESPCommand {
    public typealias Response = RESPToken

    public var key: [RESPKey]

    @inlinable public init(key: [RESPKey]) {
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SUNION", key)
    }
}

/// Stores the union of multiple sets in a key.
public struct SUNIONSTORE: RESPCommand {
    public typealias Response = Int

    public var destination: RESPKey
    public var key: [RESPKey]

    @inlinable public init(destination: RESPKey, key: [RESPKey]) {
        self.destination = destination
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("SUNIONSTORE", destination, key)
    }
}


extension ValkeyConnection {
    /// Adds one or more members to a set. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [SADD](https:/valkey.io/commands/sadd)
    /// - Version: 1.0.0
    /// - Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
    /// - Categories: @write, @set, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of elements that were added to the set, not including all the elements already present in the set.
    @inlinable
    public func sadd(key: RESPKey, member: [String]) async throws -> Int {
        try await send(command: SADD(key: key, member: member))
    }

    /// Returns the number of members in a set.
    ///
    /// - Documentation: [SCARD](https:/valkey.io/commands/scard)
    /// - Version: 1.0.0
    /// - Complexity: O(1)
    /// - Categories: @read, @set, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the cardinality (number of elements) of the set, or `0` if the key does not exist.
    @inlinable
    public func scard(key: RESPKey) async throws -> Int {
        try await send(command: SCARD(key: key))
    }

    /// Returns the difference of multiple sets.
    ///
    /// - Documentation: [SDIFF](https:/valkey.io/commands/sdiff)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the total number of elements in all given sets.
    /// - Categories: @read, @set, @slow
    /// - Returns: [Set](https:/valkey.io/topics/protocol/#sets): the resulting set.
    @inlinable
    public func sdiff(key: [RESPKey]) async throws -> RESPToken {
        try await send(command: SDIFF(key: key))
    }

    /// Stores the difference of multiple sets in a key.
    ///
    /// - Documentation: [SDIFFSTORE](https:/valkey.io/commands/sdiffstore)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the total number of elements in all given sets.
    /// - Categories: @write, @set, @slow
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of elements in the resulting set.
    @inlinable
    public func sdiffstore(destination: RESPKey, key: [RESPKey]) async throws -> Int {
        try await send(command: SDIFFSTORE(destination: destination, key: key))
    }

    /// Returns the intersect of multiple sets.
    ///
    /// - Documentation: [SINTER](https:/valkey.io/commands/sinter)
    /// - Version: 1.0.0
    /// - Complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
    /// - Categories: @read, @set, @slow
    /// - Returns: [Set](https:/valkey.io/topics/protocol/#sets): the resulting set.
    @inlinable
    public func sinter(key: [RESPKey]) async throws -> RESPToken {
        try await send(command: SINTER(key: key))
    }

    /// Returns the number of members of the intersect of multiple sets.
    ///
    /// - Documentation: [SINTERCARD](https:/valkey.io/commands/sintercard)
    /// - Version: 7.0.0
    /// - Complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
    /// - Categories: @read, @set, @slow
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of elements in the resulting intersection.
    @inlinable
    public func sintercard(key: [RESPKey], limit: Int? = nil) async throws -> Int {
        try await send(command: SINTERCARD(key: key, limit: limit))
    }

    /// Stores the intersect of multiple sets in a key.
    ///
    /// - Documentation: [SINTERSTORE](https:/valkey.io/commands/sinterstore)
    /// - Version: 1.0.0
    /// - Complexity: O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.
    /// - Categories: @write, @set, @slow
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of elements in the resulting set.
    @inlinable
    public func sinterstore(destination: RESPKey, key: [RESPKey]) async throws -> Int {
        try await send(command: SINTERSTORE(destination: destination, key: key))
    }

    /// Determines whether a member belongs to a set.
    ///
    /// - Documentation: [SISMEMBER](https:/valkey.io/commands/sismember)
    /// - Version: 1.0.0
    /// - Complexity: O(1)
    /// - Categories: @read, @set, @fast
    /// - Returns: One of the following:
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `0` if the element is not a member of the set, or when the key does not exist.
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `1` if the element is a member of the set.
    @inlinable
    public func sismember(key: RESPKey, member: String) async throws -> Int {
        try await send(command: SISMEMBER(key: key, member: member))
    }

    /// Returns all members of a set.
    ///
    /// - Documentation: [SMEMBERS](https:/valkey.io/commands/smembers)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the set cardinality.
    /// - Categories: @read, @set, @slow
    /// - Returns: [Set](https:/valkey.io/topics/protocol/#sets): all members of the set.
    @inlinable
    public func smembers(key: RESPKey) async throws -> RESPToken {
        try await send(command: SMEMBERS(key: key))
    }

    /// Determines whether multiple members belong to a set.
    ///
    /// - Documentation: [SMISMEMBER](https:/valkey.io/commands/smismember)
    /// - Version: 6.2.0
    /// - Complexity: O(N) where N is the number of elements being checked for membership
    /// - Categories: @read, @set, @fast
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list representing the membership of the given elements, in the same order as they are requested.
    @inlinable
    public func smismember(key: RESPKey, member: [String]) async throws -> [RESPToken] {
        try await send(command: SMISMEMBER(key: key, member: member))
    }

    /// Moves a member from one set to another.
    ///
    /// - Documentation: [SMOVE](https:/valkey.io/commands/smove)
    /// - Version: 1.0.0
    /// - Complexity: O(1)
    /// - Categories: @write, @set, @fast
    /// - Returns: One of the following:
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `1` if the element is moved.
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `0` if the element is not a member of _source_ and no operation was performed.
    @inlinable
    public func smove(source: RESPKey, destination: RESPKey, member: String) async throws -> Int {
        try await send(command: SMOVE(source: source, destination: destination, member: member))
    }

    /// Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.
    ///
    /// - Documentation: [SPOP](https:/valkey.io/commands/spop)
    /// - Version: 1.0.0
    /// - Complexity: Without the count argument O(1), otherwise O(N) where N is the value of the passed count.
    /// - Categories: @write, @set, @fast
    /// - Returns: One of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): if the key does not exist.
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): when called without the _count_ argument, the removed member.
    ///     * [Set](https:/valkey.io/topics/protocol/#sets): when called with the _count_ argument, the set of removed members.
    @inlinable
    public func spop(key: RESPKey, count: Int? = nil) async throws -> RESPToken {
        try await send(command: SPOP(key: key, count: count))
    }

    /// Get one or multiple random members from a set
    ///
    /// - Documentation: [SRANDMEMBER](https:/valkey.io/commands/srandmember)
    /// - Version: 1.0.0
    /// - Complexity: Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.
    /// - Categories: @read, @set, @slow
    /// - Returns: One of the following:
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): without the additional _count_ argument, the command returns a randomly selected member, or a [Null](https:/valkey.io/topics/protocol/#nulls) when _key_ doesn't exist.
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): when the optional _count_ argument is passed, the command returns an array of members, or an empty array when _key_ doesn't exist.
    @inlinable
    public func srandmember(key: RESPKey, count: Int? = nil) async throws -> RESPToken {
        try await send(command: SRANDMEMBER(key: key, count: count))
    }

    /// Removes one or more members from a set. Deletes the set if the last member was removed.
    ///
    /// - Documentation: [SREM](https:/valkey.io/commands/srem)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the number of members to be removed.
    /// - Categories: @write, @set, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of members that were removed from the set, not including non existing members.
    @inlinable
    public func srem(key: RESPKey, member: [String]) async throws -> Int {
        try await send(command: SREM(key: key, member: member))
    }

    /// Iterates over members of a set.
    ///
    /// - Documentation: [SSCAN](https:/valkey.io/commands/sscan)
    /// - Version: 2.8.0
    /// - Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
    /// - Categories: @read, @set, @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): specifically, an array with two elements:
    ///     * The first element is a [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings) that represents an unsigned 64-bit number, the cursor.
    ///     * The second element is an [Array](https:/valkey.io/topics/protocol/#arrays) with the names of scanned members.
    @inlinable
    public func sscan(key: RESPKey, cursor: Int, pattern: String? = nil, count: Int? = nil) async throws -> [RESPToken] {
        try await send(command: SSCAN(key: key, cursor: cursor, pattern: pattern, count: count))
    }

    /// Returns the union of multiple sets.
    ///
    /// - Documentation: [SUNION](https:/valkey.io/commands/sunion)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the total number of elements in all given sets.
    /// - Categories: @read, @set, @slow
    /// - Returns: [Set](https:/valkey.io/topics/protocol/#sets): the resulting set.
    @inlinable
    public func sunion(key: [RESPKey]) async throws -> RESPToken {
        try await send(command: SUNION(key: key))
    }

    /// Stores the union of multiple sets in a key.
    ///
    /// - Documentation: [SUNIONSTORE](https:/valkey.io/commands/sunionstore)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the total number of elements in all given sets.
    /// - Categories: @write, @set, @slow
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of elements in the resulting set.
    @inlinable
    public func sunionstore(destination: RESPKey, key: [RESPKey]) async throws -> Int {
        try await send(command: SUNIONSTORE(destination: destination, key: key))
    }

}
