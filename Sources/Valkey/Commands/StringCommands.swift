//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-valkey open source project
//
// Copyright (c) 2025 Apple Inc. and the swift-valkey project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-valkey project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Appends a string to the value of a key. Creates the key if it doesn't exist.
public struct APPEND<Value: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var value: Value

    @inlinable public init(key: ValkeyKey, value: Value) {
        self.key = key
        self.value = value
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("APPEND", key, RESPBulkString(value))
    }
}

/// Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.
public struct DECR: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey

    @inlinable public init(key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("DECR", key)
    }
}

/// Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.
public struct DECRBY: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var decrement: Int

    @inlinable public init(key: ValkeyKey, decrement: Int) {
        self.key = key
        self.decrement = decrement
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("DECRBY", key, decrement)
    }
}

/// Returns the string value of a key.
public struct GET: ValkeyCommand {
    public typealias Response = RESPToken?

    public var key: ValkeyKey

    @inlinable public init(key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("GET", key)
    }
}

/// Returns the string value of a key after deleting the key.
public struct GETDEL: ValkeyCommand {
    public typealias Response = RESPToken?

    public var key: ValkeyKey

    @inlinable public init(key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("GETDEL", key)
    }
}

/// Returns the string value of a key after setting its expiration time.
public struct GETEX: ValkeyCommand {
    public enum Expiration: RESPRenderable, Sendable {
        case seconds(Int)
        case milliseconds(Int)
        case unixTimeSeconds(Date)
        case unixTimeMilliseconds(Date)
        case persist

        @inlinable
        public var respEntries: Int {
            switch self {
            case .seconds(let seconds): RESPWithToken("EX", seconds).respEntries
            case .milliseconds(let milliseconds): RESPWithToken("PX", milliseconds).respEntries
            case .unixTimeSeconds(let unixTimeSeconds): RESPWithToken("EXAT", Int(unixTimeSeconds.timeIntervalSince1970)).respEntries
            case .unixTimeMilliseconds(let unixTimeMilliseconds): RESPWithToken("PXAT", Int(unixTimeMilliseconds.timeIntervalSince1970 * 1000)).respEntries
            case .persist: "PERSIST".respEntries
            }
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .seconds(let seconds): RESPWithToken("EX", seconds).encode(into: &commandEncoder)
            case .milliseconds(let milliseconds): RESPWithToken("PX", milliseconds).encode(into: &commandEncoder)
            case .unixTimeSeconds(let unixTimeSeconds): RESPWithToken("EXAT", Int(unixTimeSeconds.timeIntervalSince1970)).encode(into: &commandEncoder)
            case .unixTimeMilliseconds(let unixTimeMilliseconds): RESPWithToken("PXAT", Int(unixTimeMilliseconds.timeIntervalSince1970 * 1000)).encode(into: &commandEncoder)
            case .persist: "PERSIST".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var expiration: Expiration?

    @inlinable public init(key: ValkeyKey, expiration: Expiration? = nil) {
        self.key = key
        self.expiration = expiration
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("GETEX", key, expiration)
    }
}

/// Returns a substring of the string stored at a key.
public struct GETRANGE: ValkeyCommand {
    public var key: ValkeyKey
    public var start: Int
    public var end: Int

    @inlinable public init(key: ValkeyKey, start: Int, end: Int) {
        self.key = key
        self.start = start
        self.end = end
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("GETRANGE", key, start, end)
    }
}

/// Returns the previous string value of a key after setting it to a new value.
@available(*, deprecated, message: "Since 6.2.0. Replaced by `SET` with the `!GET` argument.")
public struct GETSET<Value: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var value: Value

    @inlinable public init(key: ValkeyKey, value: Value) {
        self.key = key
        self.value = value
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("GETSET", key, RESPBulkString(value))
    }
}

/// Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.
public struct INCR: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey

    @inlinable public init(key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("INCR", key)
    }
}

/// Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.
public struct INCRBY: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var increment: Int

    @inlinable public init(key: ValkeyKey, increment: Int) {
        self.key = key
        self.increment = increment
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("INCRBY", key, increment)
    }
}

/// Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.
public struct INCRBYFLOAT: ValkeyCommand {
    public var key: ValkeyKey
    public var increment: Double

    @inlinable public init(key: ValkeyKey, increment: Double) {
        self.key = key
        self.increment = increment
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("INCRBYFLOAT", key, increment)
    }
}

/// Finds the longest common substring.
public struct LCS: ValkeyCommand {
    public var key1: ValkeyKey
    public var key2: ValkeyKey
    public var len: Bool
    public var idx: Bool
    public var minMatchLen: Int?
    public var withmatchlen: Bool

    @inlinable public init(key1: ValkeyKey, key2: ValkeyKey, len: Bool = false, idx: Bool = false, minMatchLen: Int? = nil, withmatchlen: Bool = false) {
        self.key1 = key1
        self.key2 = key2
        self.len = len
        self.idx = idx
        self.minMatchLen = minMatchLen
        self.withmatchlen = withmatchlen
    }

    public var keysAffected: [ValkeyKey] { [key1, key2] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LCS", key1, key2, RESPPureToken("LEN", len), RESPPureToken("IDX", idx), RESPWithToken("MINMATCHLEN", minMatchLen), RESPPureToken("WITHMATCHLEN", withmatchlen))
    }
}

/// Atomically returns the string values of one or more keys.
public struct MGET: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: [ValkeyKey]

    @inlinable public init(key: [ValkeyKey]) {
        self.key = key
    }

    public var keysAffected: [ValkeyKey] { key }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("MGET", key)
    }
}

/// Atomically creates or modifies the string values of one or more keys.
public struct MSET<Value: RESPStringRenderable>: ValkeyCommand {
    public struct Data: RESPRenderable, Sendable {
        @usableFromInline let key: ValkeyKey
        @usableFromInline let value: Value


        @inlinable public init(key: ValkeyKey, value: Value) {
            self.key = key
            self.value = value
        }

        @inlinable
        public var respEntries: Int {
            key.respEntries + RESPBulkString(value).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            key.encode(into: &commandEncoder)
            RESPBulkString(value).encode(into: &commandEncoder)
        }
    }
    public var data: [Data]

    @inlinable public init(data: [Data]) {
        self.data = data
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("MSET", data)
    }
}

/// Atomically modifies the string values of one or more keys only when all keys don't exist.
public struct MSETNX<Value: RESPStringRenderable>: ValkeyCommand {
    public struct Data: RESPRenderable, Sendable {
        @usableFromInline let key: ValkeyKey
        @usableFromInline let value: Value


        @inlinable public init(key: ValkeyKey, value: Value) {
            self.key = key
            self.value = value
        }

        @inlinable
        public var respEntries: Int {
            key.respEntries + RESPBulkString(value).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            key.encode(into: &commandEncoder)
            RESPBulkString(value).encode(into: &commandEncoder)
        }
    }
    public typealias Response = Int

    public var data: [Data]

    @inlinable public init(data: [Data]) {
        self.data = data
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("MSETNX", data)
    }
}

/// Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.
@available(*, deprecated, message: "Since 2.6.12. Replaced by `SET` with the `PX` argument.")
public struct PSETEX<Value: RESPStringRenderable>: ValkeyCommand {
    public var key: ValkeyKey
    public var milliseconds: Int
    public var value: Value

    @inlinable public init(key: ValkeyKey, milliseconds: Int, value: Value) {
        self.key = key
        self.milliseconds = milliseconds
        self.value = value
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("PSETEX", key, milliseconds, RESPBulkString(value))
    }
}

/// Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.
public struct SET<Value: RESPStringRenderable>: ValkeyCommand {
    public enum Condition: RESPRenderable, Sendable {
        case nx
        case xx

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .nx: "NX".encode(into: &commandEncoder)
            case .xx: "XX".encode(into: &commandEncoder)
            }
        }
    }
    public enum Expiration: RESPRenderable, Sendable {
        case seconds(Int)
        case milliseconds(Int)
        case unixTimeSeconds(Date)
        case unixTimeMilliseconds(Date)
        case keepttl

        @inlinable
        public var respEntries: Int {
            switch self {
            case .seconds(let seconds): RESPWithToken("EX", seconds).respEntries
            case .milliseconds(let milliseconds): RESPWithToken("PX", milliseconds).respEntries
            case .unixTimeSeconds(let unixTimeSeconds): RESPWithToken("EXAT", Int(unixTimeSeconds.timeIntervalSince1970)).respEntries
            case .unixTimeMilliseconds(let unixTimeMilliseconds): RESPWithToken("PXAT", Int(unixTimeMilliseconds.timeIntervalSince1970 * 1000)).respEntries
            case .keepttl: "KEEPTTL".respEntries
            }
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .seconds(let seconds): RESPWithToken("EX", seconds).encode(into: &commandEncoder)
            case .milliseconds(let milliseconds): RESPWithToken("PX", milliseconds).encode(into: &commandEncoder)
            case .unixTimeSeconds(let unixTimeSeconds): RESPWithToken("EXAT", Int(unixTimeSeconds.timeIntervalSince1970)).encode(into: &commandEncoder)
            case .unixTimeMilliseconds(let unixTimeMilliseconds): RESPWithToken("PXAT", Int(unixTimeMilliseconds.timeIntervalSince1970 * 1000)).encode(into: &commandEncoder)
            case .keepttl: "KEEPTTL".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var value: Value
    public var condition: Condition?
    public var get: Bool
    public var expiration: Expiration?

    @inlinable public init(key: ValkeyKey, value: Value, condition: Condition? = nil, get: Bool = false, expiration: Expiration? = nil) {
        self.key = key
        self.value = value
        self.condition = condition
        self.get = get
        self.expiration = expiration
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SET", key, RESPBulkString(value), condition, RESPPureToken("GET", get), expiration)
    }
}

/// Sets the string value and expiration time of a key. Creates the key if it doesn't exist.
@available(*, deprecated, message: "Since 2.6.12. Replaced by `SET` with the `EX` argument.")
public struct SETEX<Value: RESPStringRenderable>: ValkeyCommand {
    public var key: ValkeyKey
    public var seconds: Int
    public var value: Value

    @inlinable public init(key: ValkeyKey, seconds: Int, value: Value) {
        self.key = key
        self.seconds = seconds
        self.value = value
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SETEX", key, seconds, RESPBulkString(value))
    }
}

/// Set the string value of a key only when the key doesn't exist.
@available(*, deprecated, message: "Since 2.6.12. Replaced by `SET` with the `NX` argument.")
public struct SETNX<Value: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var value: Value

    @inlinable public init(key: ValkeyKey, value: Value) {
        self.key = key
        self.value = value
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SETNX", key, RESPBulkString(value))
    }
}

/// Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.
public struct SETRANGE<Value: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var offset: Int
    public var value: Value

    @inlinable public init(key: ValkeyKey, offset: Int, value: Value) {
        self.key = key
        self.offset = offset
        self.value = value
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SETRANGE", key, offset, RESPBulkString(value))
    }
}

/// Returns the length of a string value.
public struct STRLEN: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey

    @inlinable public init(key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("STRLEN", key)
    }
}

/// Returns a substring from a string value.
@available(*, deprecated, message: "Since 2.0.0. Replaced by `GETRANGE`.")
public struct SUBSTR: ValkeyCommand {
    public var key: ValkeyKey
    public var start: Int
    public var end: Int

    @inlinable public init(key: ValkeyKey, start: Int, end: Int) {
        self.key = key
        self.start = start
        self.end = end
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SUBSTR", key, start, end)
    }
}

extension ValkeyConnection {
    /// Appends a string to the value of a key. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [APPEND](https:/valkey.io/commands/append)
    /// - Available: 2.0.0
    /// - Complexity: O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by the server will double the free space available on every reallocation.
    /// - Returns: [Integer]: The length of the string after the append operation.
    @inlinable
    public func append<Value: RESPStringRenderable>(key: ValkeyKey, value: Value) async throws -> Int {
        try await send(command: APPEND(key: key, value: value))
    }

    /// Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.
    ///
    /// - Documentation: [DECR](https:/valkey.io/commands/decr)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Returns: [Integer]: The value of the key after decrementing it.
    @inlinable
    public func decr(key: ValkeyKey) async throws -> Int {
        try await send(command: DECR(key: key))
    }

    /// Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.
    ///
    /// - Documentation: [DECRBY](https:/valkey.io/commands/decrby)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Returns: [Integer]: The value of the key after decrementing it.
    @inlinable
    public func decrby(key: ValkeyKey, decrement: Int) async throws -> Int {
        try await send(command: DECRBY(key: key, decrement: decrement))
    }

    /// Returns the string value of a key.
    ///
    /// - Documentation: [GET](https:/valkey.io/commands/get)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Returns: One of the following
    ///     * [String]: The value of the key.
    ///     * [Null]: Key does not exist.
    @inlinable
    public func get(key: ValkeyKey) async throws -> RESPToken? {
        try await send(command: GET(key: key))
    }

    /// Returns the string value of a key after deleting the key.
    ///
    /// - Documentation: [GETDEL](https:/valkey.io/commands/getdel)
    /// - Available: 6.2.0
    /// - Complexity: O(1)
    /// - Returns: One of the following
    ///     * [String]: The value of the key.
    ///     * [Null]: The key does not exist.
    @inlinable
    public func getdel(key: ValkeyKey) async throws -> RESPToken? {
        try await send(command: GETDEL(key: key))
    }

    /// Returns the string value of a key after setting its expiration time.
    ///
    /// - Documentation: [GETEX](https:/valkey.io/commands/getex)
    /// - Available: 6.2.0
    /// - Complexity: O(1)
    /// - Returns: One of the following
    ///     * [String]: The value of the key.
    ///     * [Null]: Key does not exist.
    @inlinable
    public func getex(key: ValkeyKey, expiration: GETEX.Expiration? = nil) async throws -> RESPToken? {
        try await send(command: GETEX(key: key, expiration: expiration))
    }

    /// Returns a substring of the string stored at a key.
    ///
    /// - Documentation: [GETRANGE](https:/valkey.io/commands/getrange)
    /// - Available: 2.4.0
    /// - Complexity: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.
    /// - Returns: [String]: The substring of the string value stored at key, determined by the offsets start and end (both are inclusive).
    @inlinable
    public func getrange(key: ValkeyKey, start: Int, end: Int) async throws -> GETRANGE.Response {
        try await send(command: GETRANGE(key: key, start: start, end: end))
    }

    /// Returns the previous string value of a key after setting it to a new value.
    ///
    /// - Documentation: [GETSET](https:/valkey.io/commands/getset)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Returns: One of the following
    ///     * [String]: The old value stored at the key.
    ///     * [Null]: The key does not exist.
    @inlinable
    @available(*, deprecated, message: "Since 6.2.0. Replaced by `SET` with the `!GET` argument.")
    public func getset<Value: RESPStringRenderable>(key: ValkeyKey, value: Value) async throws -> RESPToken? {
        try await send(command: GETSET(key: key, value: value))
    }

    /// Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.
    ///
    /// - Documentation: [INCR](https:/valkey.io/commands/incr)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Returns: [Integer]: The value of key after the increment
    @inlinable
    public func incr(key: ValkeyKey) async throws -> Int {
        try await send(command: INCR(key: key))
    }

    /// Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.
    ///
    /// - Documentation: [INCRBY](https:/valkey.io/commands/incrby)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Returns: [Integer]: The value of the key after incrementing it.
    @inlinable
    public func incrby(key: ValkeyKey, increment: Int) async throws -> Int {
        try await send(command: INCRBY(key: key, increment: increment))
    }

    /// Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.
    ///
    /// - Documentation: [INCRBYFLOAT](https:/valkey.io/commands/incrbyfloat)
    /// - Available: 2.6.0
    /// - Complexity: O(1)
    /// - Returns: [String]: The value of the key after incrementing it.
    @inlinable
    public func incrbyfloat(key: ValkeyKey, increment: Double) async throws -> INCRBYFLOAT.Response {
        try await send(command: INCRBYFLOAT(key: key, increment: increment))
    }

    /// Finds the longest common substring.
    ///
    /// - Documentation: [LCS](https:/valkey.io/commands/lcs)
    /// - Available: 7.0.0
    /// - Complexity: O(N*M) where N and M are the lengths of s1 and s2, respectively
    /// - Returns: One of the following
    ///     * [String]: The longest common subsequence.
    ///     * [Integer]: The length of the longest common subsequence when 'LEN' is given.
    ///     * [Map]: Array with the LCS length and all the ranges in both the strings when 'IDX' is given. In RESP2 this is returned as a flat array
    @inlinable
    public func lcs(key1: ValkeyKey, key2: ValkeyKey, len: Bool = false, idx: Bool = false, minMatchLen: Int? = nil, withmatchlen: Bool = false) async throws -> LCS.Response {
        try await send(command: LCS(key1: key1, key2: key2, len: len, idx: idx, minMatchLen: minMatchLen, withmatchlen: withmatchlen))
    }

    /// Atomically returns the string values of one or more keys.
    ///
    /// - Documentation: [MGET](https:/valkey.io/commands/mget)
    /// - Available: 1.0.0
    /// - Complexity: O(N) where N is the number of keys to retrieve.
    /// - Returns: [Array]: List of values at the specified keys.
    @inlinable
    public func mget(key: [ValkeyKey]) async throws -> RESPToken.Array {
        try await send(command: MGET(key: key))
    }

    /// Atomically creates or modifies the string values of one or more keys.
    ///
    /// - Documentation: [MSET](https:/valkey.io/commands/mset)
    /// - Available: 1.0.1
    /// - Complexity: O(N) where N is the number of keys to set.
    @inlinable
    public func mset<Value: RESPStringRenderable>(data: [MSET<Value>.Data]) async throws {
        _ = try await send(command: MSET(data: data))
    }

    /// Atomically modifies the string values of one or more keys only when all keys don't exist.
    ///
    /// - Documentation: [MSETNX](https:/valkey.io/commands/msetnx)
    /// - Available: 1.0.1
    /// - Complexity: O(N) where N is the number of keys to set.
    /// - Returns: One of the following
    ///     * 0: No key was set (at least one key already existed).
    ///     * 1: All the keys were set.
    @inlinable
    public func msetnx<Value: RESPStringRenderable>(data: [MSETNX<Value>.Data]) async throws -> Int {
        try await send(command: MSETNX(data: data))
    }

    /// Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.
    ///
    /// - Documentation: [PSETEX](https:/valkey.io/commands/psetex)
    /// - Available: 2.6.0
    /// - Complexity: O(1)
    @inlinable
    @available(*, deprecated, message: "Since 2.6.12. Replaced by `SET` with the `PX` argument.")
    public func psetex<Value: RESPStringRenderable>(key: ValkeyKey, milliseconds: Int, value: Value) async throws {
        _ = try await send(command: PSETEX(key: key, milliseconds: milliseconds, value: value))
    }

    /// Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.
    ///
    /// - Documentation: [SET](https:/valkey.io/commands/set)
    /// - Available: 1.0.0
    /// - History:
    ///     * 2.6.12: Added the `EX`, `PX`, `NX` and `XX` options.
    ///     * 6.0.0: Added the `KEEPTTL` option.
    ///     * 6.2.0: Added the `GET`, `EXAT` and `PXAT` option.
    ///     * 7.0.0: Allowed the `NX` and `GET` options to be used together.
    /// - Complexity: O(1)
    /// - Returns: One of the following
    ///     * [Null]: `GET` not given: Operation was aborted (conflict with one of the `XX`/`NX` options).
    ///     * "OK": `GET` not given: The key was set.
    ///     * [Null]: `GET` given: The key didn't exist before the `SET`
    ///     * [String]: `GET` given: The previous value of the key
    @inlinable
    public func set<Value: RESPStringRenderable>(key: ValkeyKey, value: Value, condition: SET<Value>.Condition? = nil, get: Bool = false, expiration: SET<Value>.Expiration? = nil) async throws -> RESPToken? {
        try await send(command: SET(key: key, value: value, condition: condition, get: get, expiration: expiration))
    }

    /// Sets the string value and expiration time of a key. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [SETEX](https:/valkey.io/commands/setex)
    /// - Available: 2.0.0
    /// - Complexity: O(1)
    @inlinable
    @available(*, deprecated, message: "Since 2.6.12. Replaced by `SET` with the `EX` argument.")
    public func setex<Value: RESPStringRenderable>(key: ValkeyKey, seconds: Int, value: Value) async throws {
        _ = try await send(command: SETEX(key: key, seconds: seconds, value: value))
    }

    /// Set the string value of a key only when the key doesn't exist.
    ///
    /// - Documentation: [SETNX](https:/valkey.io/commands/setnx)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Returns: One of the following
    ///     * 0: The key was set.
    ///     * 1: The key was not set.
    @inlinable
    @available(*, deprecated, message: "Since 2.6.12. Replaced by `SET` with the `NX` argument.")
    public func setnx<Value: RESPStringRenderable>(key: ValkeyKey, value: Value) async throws -> Int {
        try await send(command: SETNX(key: key, value: value))
    }

    /// Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [SETRANGE](https:/valkey.io/commands/setrange)
    /// - Available: 2.2.0
    /// - Complexity: O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.
    /// - Returns: [Integer]: Length of the string after it was modified by the command.
    @inlinable
    public func setrange<Value: RESPStringRenderable>(key: ValkeyKey, offset: Int, value: Value) async throws -> Int {
        try await send(command: SETRANGE(key: key, offset: offset, value: value))
    }

    /// Returns the length of a string value.
    ///
    /// - Documentation: [STRLEN](https:/valkey.io/commands/strlen)
    /// - Available: 2.2.0
    /// - Complexity: O(1)
    /// - Returns: [Integer]: The length of the string value stored at key, or 0 when key does not exist.
    @inlinable
    public func strlen(key: ValkeyKey) async throws -> Int {
        try await send(command: STRLEN(key: key))
    }

    /// Returns a substring from a string value.
    ///
    /// - Documentation: [SUBSTR](https:/valkey.io/commands/substr)
    /// - Available: 1.0.0
    /// - Complexity: O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.
    /// - Returns: [String]: The substring of the string value stored at key, determined by the offsets start and end (both are inclusive).
    @inlinable
    @available(*, deprecated, message: "Since 2.0.0. Replaced by `GETRANGE`.")
    public func substr(key: ValkeyKey, start: Int, end: Int) async throws -> SUBSTR.Response {
        try await send(command: SUBSTR(key: key, start: start, end: end))
    }

}
