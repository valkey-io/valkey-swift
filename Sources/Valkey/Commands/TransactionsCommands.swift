//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Discards a transaction.
@_documentation(visibility: internal)
public struct DISCARD: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("DISCARD")
    }
}

/// Executes all commands in a transaction.
@_documentation(visibility: internal)
public struct EXEC: ValkeyCommand {
    public typealias Response = RESPToken.Array?

    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("EXEC")
    }
}

/// Starts a transaction.
@_documentation(visibility: internal)
public struct MULTI: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("MULTI")
    }
}

/// Forgets about watched keys of a transaction.
@_documentation(visibility: internal)
public struct UNWATCH: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("UNWATCH")
    }
}

/// Monitors changes to keys to determine the execution of a transaction.
@_documentation(visibility: internal)
public struct WATCH: ValkeyCommand {
    public var keys: [ValkeyKey]

    @inlinable public init(keys: [ValkeyKey]) {
        self.keys = keys
    }

    public var keysAffected: [ValkeyKey] { keys }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("WATCH", keys)
    }
}

@available(valkeySwift 1.0, *)
extension ValkeyConnection {
    /// Discards a transaction.
    ///
    /// - Documentation: [DISCARD](https://valkey.io/commands/discard)
    /// - Available: 2.0.0
    /// - Complexity: O(N), when N is the number of queued commands
    @inlinable
    public func discard() async throws {
        _ = try await send(command: DISCARD())
    }

    /// Executes all commands in a transaction.
    ///
    /// - Documentation: [EXEC](https://valkey.io/commands/exec)
    /// - Available: 1.2.0
    /// - Complexity: Depends on commands in the transaction
    /// - Response: One of the following
    ///     * [Array]: Each element being the reply to each of the commands in the atomic transaction.
    ///     * [Null]: The transaction was aborted because a `WATCH`ed key was touched
    @inlinable
    @discardableResult
    public func exec() async throws -> RESPToken.Array? {
        try await send(command: EXEC())
    }

    /// Starts a transaction.
    ///
    /// - Documentation: [MULTI](https://valkey.io/commands/multi)
    /// - Available: 1.2.0
    /// - Complexity: O(1)
    @inlinable
    public func multi() async throws {
        _ = try await send(command: MULTI())
    }

    /// Forgets about watched keys of a transaction.
    ///
    /// - Documentation: [UNWATCH](https://valkey.io/commands/unwatch)
    /// - Available: 2.2.0
    /// - Complexity: O(1)
    @inlinable
    public func unwatch() async throws {
        _ = try await send(command: UNWATCH())
    }

    /// Monitors changes to keys to determine the execution of a transaction.
    ///
    /// - Documentation: [WATCH](https://valkey.io/commands/watch)
    /// - Available: 2.2.0
    /// - Complexity: O(1) for every key.
    @inlinable
    public func watch(keys: [ValkeyKey]) async throws {
        _ = try await send(command: WATCH(keys: keys))
    }

}
