//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-valkey open source project
//
// Copyright (c) 2025 Apple Inc. and the swift-valkey project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-valkey project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.
public struct BLMOVE: ValkeyCommand {
    public enum Wherefrom: RESPRenderable, Sendable {
        case left
        case right

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .left: "LEFT".encode(into: &commandEncoder)
            case .right: "RIGHT".encode(into: &commandEncoder)
            }
        }
    }
    public enum Whereto: RESPRenderable, Sendable {
        case left
        case right

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .left: "LEFT".encode(into: &commandEncoder)
            case .right: "RIGHT".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = RESPToken?

    public var source: ValkeyKey
    public var destination: ValkeyKey
    public var wherefrom: Wherefrom
    public var whereto: Whereto
    public var timeout: Double

    @inlinable public init(source: ValkeyKey, destination: ValkeyKey, wherefrom: Wherefrom, whereto: Whereto, timeout: Double) {
        self.source = source
        self.destination = destination
        self.wherefrom = wherefrom
        self.whereto = whereto
        self.timeout = timeout
    }

    public var keysAffected: [ValkeyKey] { [source, destination] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BLMOVE", source, destination, wherefrom, whereto, timeout)
    }
}

/// Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
public struct BLMPOP: ValkeyCommand {
    public enum Where: RESPRenderable, Sendable {
        case left
        case right

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .left: "LEFT".encode(into: &commandEncoder)
            case .right: "RIGHT".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = RESPToken.Array?

    public var timeout: Double
    public var key: [ValkeyKey]
    public var `where`: Where
    public var count: Int?

    @inlinable public init(timeout: Double, key: [ValkeyKey], `where`: Where, count: Int? = nil) {
        self.timeout = timeout
        self.key = key
        self.`where` = `where`
        self.count = count
    }

    public var keysAffected: [ValkeyKey] { key }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BLMPOP", timeout, RESPArrayWithCount(key), `where`, RESPWithToken("COUNT", count))
    }
}

/// Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
public struct BLPOP: ValkeyCommand {
    public typealias Response = RESPToken.Array?

    public var key: [ValkeyKey]
    public var timeout: Double

    @inlinable public init(key: [ValkeyKey], timeout: Double) {
        self.key = key
        self.timeout = timeout
    }

    public var keysAffected: [ValkeyKey] { key }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BLPOP", key, timeout)
    }
}

/// Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
public struct BRPOP: ValkeyCommand {
    public typealias Response = RESPToken.Array?

    public var key: [ValkeyKey]
    public var timeout: Double

    @inlinable public init(key: [ValkeyKey], timeout: Double) {
        self.key = key
        self.timeout = timeout
    }

    public var keysAffected: [ValkeyKey] { key }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BRPOP", key, timeout)
    }
}

/// Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.
@available(*, deprecated, message: "Since 6.2.0. Replaced by `BLMOVE` with the `RIGHT` and `LEFT` arguments.")
public struct BRPOPLPUSH: ValkeyCommand {
    public typealias Response = RESPToken?

    public var source: ValkeyKey
    public var destination: ValkeyKey
    public var timeout: Double

    @inlinable public init(source: ValkeyKey, destination: ValkeyKey, timeout: Double) {
        self.source = source
        self.destination = destination
        self.timeout = timeout
    }

    public var keysAffected: [ValkeyKey] { [source, destination] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BRPOPLPUSH", source, destination, timeout)
    }
}

/// Returns an element from a list by its index.
public struct LINDEX: ValkeyCommand {
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var index: Int

    @inlinable public init(key: ValkeyKey, index: Int) {
        self.key = key
        self.index = index
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LINDEX", key, index)
    }
}

/// Inserts an element before or after another element in a list.
public struct LINSERT<Pivot: RESPStringRenderable, Element: RESPStringRenderable>: ValkeyCommand {
    public enum Where: RESPRenderable, Sendable {
        case before
        case after

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .before: "BEFORE".encode(into: &commandEncoder)
            case .after: "AFTER".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = Int

    public var key: ValkeyKey
    public var `where`: Where
    public var pivot: Pivot
    public var element: Element

    @inlinable public init(key: ValkeyKey, `where`: Where, pivot: Pivot, element: Element) {
        self.key = key
        self.`where` = `where`
        self.pivot = pivot
        self.element = element
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LINSERT", key, `where`, RESPBulkString(pivot), RESPBulkString(element))
    }
}

/// Returns the length of a list.
public struct LLEN: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey

    @inlinable public init(key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LLEN", key)
    }
}

/// Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.
public struct LMOVE: ValkeyCommand {
    public enum Wherefrom: RESPRenderable, Sendable {
        case left
        case right

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .left: "LEFT".encode(into: &commandEncoder)
            case .right: "RIGHT".encode(into: &commandEncoder)
            }
        }
    }
    public enum Whereto: RESPRenderable, Sendable {
        case left
        case right

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .left: "LEFT".encode(into: &commandEncoder)
            case .right: "RIGHT".encode(into: &commandEncoder)
            }
        }
    }
    public var source: ValkeyKey
    public var destination: ValkeyKey
    public var wherefrom: Wherefrom
    public var whereto: Whereto

    @inlinable public init(source: ValkeyKey, destination: ValkeyKey, wherefrom: Wherefrom, whereto: Whereto) {
        self.source = source
        self.destination = destination
        self.wherefrom = wherefrom
        self.whereto = whereto
    }

    public var keysAffected: [ValkeyKey] { [source, destination] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LMOVE", source, destination, wherefrom, whereto)
    }
}

/// Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.
public struct LMPOP: ValkeyCommand {
    public enum Where: RESPRenderable, Sendable {
        case left
        case right

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .left: "LEFT".encode(into: &commandEncoder)
            case .right: "RIGHT".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = RESPToken.Array?

    public var key: [ValkeyKey]
    public var `where`: Where
    public var count: Int?

    @inlinable public init(key: [ValkeyKey], `where`: Where, count: Int? = nil) {
        self.key = key
        self.`where` = `where`
        self.count = count
    }

    public var keysAffected: [ValkeyKey] { key }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LMPOP", RESPArrayWithCount(key), `where`, RESPWithToken("COUNT", count))
    }
}

/// Returns the first elements in a list after removing it. Deletes the list if the last element was popped.
public struct LPOP: ValkeyCommand {
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var count: Int?

    @inlinable public init(key: ValkeyKey, count: Int? = nil) {
        self.key = key
        self.count = count
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LPOP", key, count)
    }
}

/// Returns the index of matching elements in a list.
public struct LPOS<Element: RESPStringRenderable>: ValkeyCommand {
    public var key: ValkeyKey
    public var element: Element
    public var rank: Int?
    public var numMatches: Int?
    public var len: Int?

    @inlinable public init(key: ValkeyKey, element: Element, rank: Int? = nil, numMatches: Int? = nil, len: Int? = nil) {
        self.key = key
        self.element = element
        self.rank = rank
        self.numMatches = numMatches
        self.len = len
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LPOS", key, RESPBulkString(element), RESPWithToken("RANK", rank), RESPWithToken("COUNT", numMatches), RESPWithToken("MAXLEN", len))
    }
}

/// Prepends one or more elements to a list. Creates the key if it doesn't exist.
public struct LPUSH<Element: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var element: [Element]

    @inlinable public init(key: ValkeyKey, element: [Element]) {
        self.key = key
        self.element = element
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LPUSH", key, element.map { RESPBulkString($0) })
    }
}

/// Prepends one or more elements to a list only when the list exists.
public struct LPUSHX<Element: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var element: [Element]

    @inlinable public init(key: ValkeyKey, element: [Element]) {
        self.key = key
        self.element = element
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LPUSHX", key, element.map { RESPBulkString($0) })
    }
}

/// Returns a range of elements from a list.
public struct LRANGE: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var start: Int
    public var stop: Int

    @inlinable public init(key: ValkeyKey, start: Int, stop: Int) {
        self.key = key
        self.start = start
        self.stop = stop
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LRANGE", key, start, stop)
    }
}

/// Removes elements from a list. Deletes the list if the last element was removed.
public struct LREM<Element: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var count: Int
    public var element: Element

    @inlinable public init(key: ValkeyKey, count: Int, element: Element) {
        self.key = key
        self.count = count
        self.element = element
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LREM", key, count, RESPBulkString(element))
    }
}

/// Sets the value of an element in a list by its index.
public struct LSET<Element: RESPStringRenderable>: ValkeyCommand {
    public var key: ValkeyKey
    public var index: Int
    public var element: Element

    @inlinable public init(key: ValkeyKey, index: Int, element: Element) {
        self.key = key
        self.index = index
        self.element = element
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LSET", key, index, RESPBulkString(element))
    }
}

/// Removes elements from both ends a list. Deletes the list if all elements were trimmed.
public struct LTRIM: ValkeyCommand {
    public var key: ValkeyKey
    public var start: Int
    public var stop: Int

    @inlinable public init(key: ValkeyKey, start: Int, stop: Int) {
        self.key = key
        self.start = start
        self.stop = stop
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LTRIM", key, start, stop)
    }
}

/// Returns and removes the last elements of a list. Deletes the list if the last element was popped.
public struct RPOP: ValkeyCommand {
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var count: Int?

    @inlinable public init(key: ValkeyKey, count: Int? = nil) {
        self.key = key
        self.count = count
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("RPOP", key, count)
    }
}

/// Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.
@available(*, deprecated, message: "Since 6.2.0. Replaced by `LMOVE` with the `RIGHT` and `LEFT` arguments.")
public struct RPOPLPUSH: ValkeyCommand {
    public typealias Response = RESPToken?

    public var source: ValkeyKey
    public var destination: ValkeyKey

    @inlinable public init(source: ValkeyKey, destination: ValkeyKey) {
        self.source = source
        self.destination = destination
    }

    public var keysAffected: [ValkeyKey] { [source, destination] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("RPOPLPUSH", source, destination)
    }
}

/// Appends one or more elements to a list. Creates the key if it doesn't exist.
public struct RPUSH<Element: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var element: [Element]

    @inlinable public init(key: ValkeyKey, element: [Element]) {
        self.key = key
        self.element = element
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("RPUSH", key, element.map { RESPBulkString($0) })
    }
}

/// Appends an element to a list only when the list exists.
public struct RPUSHX<Element: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var element: [Element]

    @inlinable public init(key: ValkeyKey, element: [Element]) {
        self.key = key
        self.element = element
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("RPUSHX", key, element.map { RESPBulkString($0) })
    }
}

extension ValkeyConnection {
    /// Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.
    ///
    /// - Documentation: [BLMOVE](https:/valkey.io/commands/blmove)
    /// - Version: 6.2.0
    /// - Complexity: O(1)
    /// - Categories: @write, @list, @slow, @blocking
    /// - Returns: One of the following:
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the element being popped from the _source_ and pushed to the _destination_.
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): the operation timed-out
    @inlinable
    public func blmove(source: ValkeyKey, destination: ValkeyKey, wherefrom: BLMOVE.Wherefrom, whereto: BLMOVE.Whereto, timeout: Double) async throws -> RESPToken? {
        try await send(command: BLMOVE(source: source, destination: destination, wherefrom: wherefrom, whereto: whereto, timeout: timeout))
    }

    /// Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
    ///
    /// - Documentation: [BLMPOP](https:/valkey.io/commands/blmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(N+M) where N is the number of provided keys and M is the number of elements returned.
    /// - Categories: @write, @list, @slow, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): when no element could be popped and the _timeout_ is reached.
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): a two-element array with the first element being the name of the key from which elements were popped, and the second element being an array of the popped elements.
    @inlinable
    public func blmpop(timeout: Double, key: [ValkeyKey], `where`: BLMPOP.Where, count: Int? = nil) async throws -> RESPToken.Array? {
        try await send(command: BLMPOP(timeout: timeout, key: key, where: `where`, count: count))
    }

    /// Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
    ///
    /// - Documentation: [BLPOP](https:/valkey.io/commands/blpop)
    /// - Version: 2.0.0
    /// - Complexity: O(N) where N is the number of provided keys.
    /// - Categories: @write, @list, @slow, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): no element could be popped and the timeout expired
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): the key from which the element was popped and the value of the popped element.
    @inlinable
    public func blpop(key: [ValkeyKey], timeout: Double) async throws -> RESPToken.Array? {
        try await send(command: BLPOP(key: key, timeout: timeout))
    }

    /// Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.
    ///
    /// - Documentation: [BRPOP](https:/valkey.io/commands/brpop)
    /// - Version: 2.0.0
    /// - Complexity: O(N) where N is the number of provided keys.
    /// - Categories: @write, @list, @slow, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): no element could be popped and the timeout expired.
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): the key from which the element was popped and the value of the popped element
    @inlinable
    public func brpop(key: [ValkeyKey], timeout: Double) async throws -> RESPToken.Array? {
        try await send(command: BRPOP(key: key, timeout: timeout))
    }

    /// Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.
    ///
    /// - Documentation: [BRPOPLPUSH](https:/valkey.io/commands/brpoplpush)
    /// - Version: 2.2.0
    /// - Complexity: O(1)
    /// - Categories: @write, @list, @slow, @blocking
    /// - Returns: One of the following:
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the element being popped from _source_ and pushed to _destination_.
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): the timeout is reached.
    @inlinable
    @available(*, deprecated, message: "Since 6.2.0. Replaced by `BLMOVE` with the `RIGHT` and `LEFT` arguments.")
    public func brpoplpush(source: ValkeyKey, destination: ValkeyKey, timeout: Double) async throws -> RESPToken? {
        try await send(command: BRPOPLPUSH(source: source, destination: destination, timeout: timeout))
    }

    /// Returns an element from a list by its index.
    ///
    /// - Documentation: [LINDEX](https:/valkey.io/commands/lindex)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).
    /// - Categories: @read, @list, @slow
    /// - Returns: One of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): when _index_ is out of range.
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the requested element.
    @inlinable
    public func lindex(key: ValkeyKey, index: Int) async throws -> RESPToken? {
        try await send(command: LINDEX(key: key, index: index))
    }

    /// Inserts an element before or after another element in a list.
    ///
    /// - Documentation: [LINSERT](https:/valkey.io/commands/linsert)
    /// - Version: 2.2.0
    /// - Complexity: O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).
    /// - Categories: @write, @list, @slow
    /// - Returns: One of the following:
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): the list length after a successful insert operation.
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `0` when the key doesn't exist.
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): `-1` when the pivot wasn't found.
    @inlinable
    public func linsert<Pivot: RESPStringRenderable, Element: RESPStringRenderable>(key: ValkeyKey, `where`: LINSERT<Pivot, Element>.Where, pivot: Pivot, element: Element) async throws -> Int {
        try await send(command: LINSERT(key: key, where: `where`, pivot: pivot, element: element))
    }

    /// Returns the length of a list.
    ///
    /// - Documentation: [LLEN](https:/valkey.io/commands/llen)
    /// - Version: 1.0.0
    /// - Complexity: O(1)
    /// - Categories: @read, @list, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the length of the list.
    @inlinable
    public func llen(key: ValkeyKey) async throws -> Int {
        try await send(command: LLEN(key: key))
    }

    /// Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.
    ///
    /// - Documentation: [LMOVE](https:/valkey.io/commands/lmove)
    /// - Version: 6.2.0
    /// - Complexity: O(1)
    /// - Categories: @write, @list, @slow
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the element being popped and pushed.
    @inlinable
    public func lmove(source: ValkeyKey, destination: ValkeyKey, wherefrom: LMOVE.Wherefrom, whereto: LMOVE.Whereto) async throws -> LMOVE.Response {
        try await send(command: LMOVE(source: source, destination: destination, wherefrom: wherefrom, whereto: whereto))
    }

    /// Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.
    ///
    /// - Documentation: [LMPOP](https:/valkey.io/commands/lmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(N+M) where N is the number of provided keys and M is the number of elements returned.
    /// - Categories: @write, @list, @slow
    /// - Returns: One of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): if no element could be popped.
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): a two-element array with the first element being the name of the key from which elements were popped and the second element being an array of elements.
    @inlinable
    public func lmpop(key: [ValkeyKey], `where`: LMPOP.Where, count: Int? = nil) async throws -> RESPToken.Array? {
        try await send(command: LMPOP(key: key, where: `where`, count: count))
    }

    /// Returns the first elements in a list after removing it. Deletes the list if the last element was popped.
    ///
    /// - Documentation: [LPOP](https:/valkey.io/commands/lpop)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the number of elements returned
    /// - Categories: @write, @list, @fast
    /// - Returns: One of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): if the key does not exist.
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): when called without the _count_ argument, the value of the first element.
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): when called with the _count_ argument, a list of popped elements.
    @inlinable
    public func lpop(key: ValkeyKey, count: Int? = nil) async throws -> RESPToken? {
        try await send(command: LPOP(key: key, count: count))
    }

    /// Returns the index of matching elements in a list.
    ///
    /// - Documentation: [LPOS](https:/valkey.io/commands/lpos)
    /// - Version: 6.0.6
    /// - Complexity: O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.
    /// - Categories: @read, @list, @slow
    /// - Returns: Any of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): if there is no matching element.
    ///     * [Integer](https:/valkey.io/topics/protocol/#integers): an integer representing the matching element.
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): If the COUNT option is given, an array of integers representing the matching elements (or an empty array if there are no matches).
    @inlinable
    public func lpos<Element: RESPStringRenderable>(key: ValkeyKey, element: Element, rank: Int? = nil, numMatches: Int? = nil, len: Int? = nil) async throws -> LPOS.Response {
        try await send(command: LPOS(key: key, element: element, rank: rank, numMatches: numMatches, len: len))
    }

    /// Prepends one or more elements to a list. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [LPUSH](https:/valkey.io/commands/lpush)
    /// - Version: 1.0.0
    /// - Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
    /// - Categories: @write, @list, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the length of the list after the push operation.
    @inlinable
    public func lpush<Element: RESPStringRenderable>(key: ValkeyKey, element: [Element]) async throws -> Int {
        try await send(command: LPUSH(key: key, element: element))
    }

    /// Prepends one or more elements to a list only when the list exists.
    ///
    /// - Documentation: [LPUSHX](https:/valkey.io/commands/lpushx)
    /// - Version: 2.2.0
    /// - Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
    /// - Categories: @write, @list, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the length of the list after the push operation.
    @inlinable
    public func lpushx<Element: RESPStringRenderable>(key: ValkeyKey, element: [Element]) async throws -> Int {
        try await send(command: LPUSHX(key: key, element: element))
    }

    /// Returns a range of elements from a list.
    ///
    /// - Documentation: [LRANGE](https:/valkey.io/commands/lrange)
    /// - Version: 1.0.0
    /// - Complexity: O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.
    /// - Categories: @read, @list, @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of elements in the specified range, or an empty array if the key doesn't exist.
    @inlinable
    public func lrange(key: ValkeyKey, start: Int, stop: Int) async throws -> RESPToken.Array {
        try await send(command: LRANGE(key: key, start: start, stop: stop))
    }

    /// Removes elements from a list. Deletes the list if the last element was removed.
    ///
    /// - Documentation: [LREM](https:/valkey.io/commands/lrem)
    /// - Version: 1.0.0
    /// - Complexity: O(N+M) where N is the length of the list and M is the number of elements removed.
    /// - Categories: @write, @list, @slow
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of removed elements.
    @inlinable
    public func lrem<Element: RESPStringRenderable>(key: ValkeyKey, count: Int, element: Element) async throws -> Int {
        try await send(command: LREM(key: key, count: count, element: element))
    }

    /// Sets the value of an element in a list by its index.
    ///
    /// - Documentation: [LSET](https:/valkey.io/commands/lset)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).
    /// - Categories: @write, @list, @slow
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func lset<Element: RESPStringRenderable>(key: ValkeyKey, index: Int, element: Element) async throws {
        _ = try await send(command: LSET(key: key, index: index, element: element))
    }

    /// Removes elements from both ends a list. Deletes the list if all elements were trimmed.
    ///
    /// - Documentation: [LTRIM](https:/valkey.io/commands/ltrim)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the number of elements to be removed by the operation.
    /// - Categories: @write, @list, @slow
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func ltrim(key: ValkeyKey, start: Int, stop: Int) async throws {
        _ = try await send(command: LTRIM(key: key, start: start, stop: stop))
    }

    /// Returns and removes the last elements of a list. Deletes the list if the last element was popped.
    ///
    /// - Documentation: [RPOP](https:/valkey.io/commands/rpop)
    /// - Version: 1.0.0
    /// - Complexity: O(N) where N is the number of elements returned
    /// - Categories: @write, @list, @fast
    /// - Returns: One of the following:
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): if the key does not exist.
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): when called without the _count_ argument, the value of the last element.
    ///     * [Array](https:/valkey.io/topics/protocol/#arrays): when called with the _count_ argument, a list of popped elements.
    @inlinable
    public func rpop(key: ValkeyKey, count: Int? = nil) async throws -> RESPToken? {
        try await send(command: RPOP(key: key, count: count))
    }

    /// Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.
    ///
    /// - Documentation: [RPOPLPUSH](https:/valkey.io/commands/rpoplpush)
    /// - Version: 1.2.0
    /// - Complexity: O(1)
    /// - Categories: @write, @list, @slow
    /// - Returns: One of the following:
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the element being popped and pushed.
    ///     * [Null](https:/valkey.io/topics/protocol/#nulls): if the source list is empty.
    @inlinable
    @available(*, deprecated, message: "Since 6.2.0. Replaced by `LMOVE` with the `RIGHT` and `LEFT` arguments.")
    public func rpoplpush(source: ValkeyKey, destination: ValkeyKey) async throws -> RESPToken? {
        try await send(command: RPOPLPUSH(source: source, destination: destination))
    }

    /// Appends one or more elements to a list. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [RPUSH](https:/valkey.io/commands/rpush)
    /// - Version: 1.0.0
    /// - Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
    /// - Categories: @write, @list, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the length of the list after the push operation.
    @inlinable
    public func rpush<Element: RESPStringRenderable>(key: ValkeyKey, element: [Element]) async throws -> Int {
        try await send(command: RPUSH(key: key, element: element))
    }

    /// Appends an element to a list only when the list exists.
    ///
    /// - Documentation: [RPUSHX](https:/valkey.io/commands/rpushx)
    /// - Version: 2.2.0
    /// - Complexity: O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.
    /// - Categories: @write, @list, @fast
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the length of the list after the push operation.
    @inlinable
    public func rpushx<Element: RESPStringRenderable>(key: ValkeyKey, element: [Element]) async throws -> Int {
        try await send(command: RPUSHX(key: key, element: element))
    }

}
