//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
@_documentation(visibility: internal)
public struct BZMPOP: ValkeyCommand {
    public enum Where: RESPRenderable, Sendable, Hashable {
        case min
        case max

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .min: "MIN".encode(into: &commandEncoder)
            case .max: "MAX".encode(into: &commandEncoder)
            }
        }
    }
    public var timeout: Double
    public var key: [ValkeyKey]
    public var `where`: Where
    public var count: Int?

    @inlinable public init(timeout: Double, key: [ValkeyKey], `where`: Where, count: Int? = nil) {
        self.timeout = timeout
        self.key = key
        self.`where` = `where`
        self.count = count
    }

    public var keysAffected: [ValkeyKey] { key }

    public var isBlocking: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BZMPOP", timeout, RESPArrayWithCount(key), `where`, RESPWithToken("COUNT", count))
    }
}

/// Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.
@_documentation(visibility: internal)
public struct BZPOPMAX: ValkeyCommand {
    public var key: [ValkeyKey]
    public var timeout: Double

    @inlinable public init(key: [ValkeyKey], timeout: Double) {
        self.key = key
        self.timeout = timeout
    }

    public var keysAffected: [ValkeyKey] { key }

    public var isBlocking: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BZPOPMAX", key, timeout)
    }
}

/// Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
@_documentation(visibility: internal)
public struct BZPOPMIN: ValkeyCommand {
    public var key: [ValkeyKey]
    public var timeout: Double

    @inlinable public init(key: [ValkeyKey], timeout: Double) {
        self.key = key
        self.timeout = timeout
    }

    public var keysAffected: [ValkeyKey] { key }

    public var isBlocking: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BZPOPMIN", key, timeout)
    }
}

/// Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.
@_documentation(visibility: internal)
public struct ZADD<Member: RESPStringRenderable>: ValkeyCommand {
    public enum Condition: RESPRenderable, Sendable, Hashable {
        case nx
        case xx

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .nx: "NX".encode(into: &commandEncoder)
            case .xx: "XX".encode(into: &commandEncoder)
            }
        }
    }
    public enum Comparison: RESPRenderable, Sendable, Hashable {
        case gt
        case lt

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .gt: "GT".encode(into: &commandEncoder)
            case .lt: "LT".encode(into: &commandEncoder)
            }
        }
    }
    public struct Data: RESPRenderable, Sendable, Hashable {
        @usableFromInline let score: Double
        @usableFromInline let member: Member

        @inlinable public init(score: Double, member: Member) {
            self.score = score
            self.member = member
        }

        @inlinable
        public var respEntries: Int {
            score.respEntries + RESPBulkString(member).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            score.encode(into: &commandEncoder)
            RESPBulkString(member).encode(into: &commandEncoder)
        }
    }
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var condition: Condition?
    public var comparison: Comparison?
    public var change: Bool
    public var increment: Bool
    public var data: [Data]

    @inlinable public init(
        key: ValkeyKey,
        condition: Condition? = nil,
        comparison: Comparison? = nil,
        change: Bool = false,
        increment: Bool = false,
        data: [Data]
    ) {
        self.key = key
        self.condition = condition
        self.comparison = comparison
        self.change = change
        self.increment = increment
        self.data = data
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZADD", key, condition, comparison, RESPPureToken("CH", change), RESPPureToken("INCR", increment), data)
    }
}

/// Returns the number of members in a sorted set.
@_documentation(visibility: internal)
public struct ZCARD: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey

    @inlinable public init(key: ValkeyKey) {
        self.key = key
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZCARD", key)
    }
}

/// Returns the count of members in a sorted set that have scores within a range.
@_documentation(visibility: internal)
public struct ZCOUNT: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var min: Double
    public var max: Double

    @inlinable public init(key: ValkeyKey, min: Double, max: Double) {
        self.key = key
        self.min = min
        self.max = max
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZCOUNT", key, min, max)
    }
}

/// Returns the difference between multiple sorted sets.
@_documentation(visibility: internal)
public struct ZDIFF: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: [ValkeyKey]
    public var withscores: Bool

    @inlinable public init(key: [ValkeyKey], withscores: Bool = false) {
        self.key = key
        self.withscores = withscores
    }

    public var keysAffected: [ValkeyKey] { key }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZDIFF", RESPArrayWithCount(key), RESPPureToken("WITHSCORES", withscores))
    }
}

/// Stores the difference of multiple sorted sets in a key.
@_documentation(visibility: internal)
public struct ZDIFFSTORE: ValkeyCommand {
    public typealias Response = Int

    public var destination: ValkeyKey
    public var key: [ValkeyKey]

    @inlinable public init(destination: ValkeyKey, key: [ValkeyKey]) {
        self.destination = destination
        self.key = key
    }

    public var keysAffected: [ValkeyKey] { key + [destination] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZDIFFSTORE", destination, RESPArrayWithCount(key))
    }
}

/// Increments the score of a member in a sorted set.
@_documentation(visibility: internal)
public struct ZINCRBY<Member: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Double

    public var key: ValkeyKey
    public var increment: Int
    public var member: Member

    @inlinable public init(key: ValkeyKey, increment: Int, member: Member) {
        self.key = key
        self.increment = increment
        self.member = member
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZINCRBY", key, increment, RESPBulkString(member))
    }
}

/// Returns the intersect of multiple sorted sets.
@_documentation(visibility: internal)
public struct ZINTER: ValkeyCommand {
    public enum Aggregate: RESPRenderable, Sendable, Hashable {
        case sum
        case min
        case max

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .sum: "SUM".encode(into: &commandEncoder)
            case .min: "MIN".encode(into: &commandEncoder)
            case .max: "MAX".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = RESPToken.Array

    public var key: [ValkeyKey]
    public var weight: [Int]
    public var aggregate: Aggregate?
    public var withscores: Bool

    @inlinable public init(key: [ValkeyKey], weight: [Int] = [], aggregate: Aggregate? = nil, withscores: Bool = false) {
        self.key = key
        self.weight = weight
        self.aggregate = aggregate
        self.withscores = withscores
    }

    public var keysAffected: [ValkeyKey] { key }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray(
            "ZINTER",
            RESPArrayWithCount(key),
            RESPWithToken("WEIGHTS", weight),
            RESPWithToken("AGGREGATE", aggregate),
            RESPPureToken("WITHSCORES", withscores)
        )
    }
}

/// Returns the number of members of the intersect of multiple sorted sets.
@_documentation(visibility: internal)
public struct ZINTERCARD: ValkeyCommand {
    public typealias Response = Int

    public var key: [ValkeyKey]
    public var limit: Int?

    @inlinable public init(key: [ValkeyKey], limit: Int? = nil) {
        self.key = key
        self.limit = limit
    }

    public var keysAffected: [ValkeyKey] { key }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZINTERCARD", RESPArrayWithCount(key), RESPWithToken("LIMIT", limit))
    }
}

/// Stores the intersect of multiple sorted sets in a key.
@_documentation(visibility: internal)
public struct ZINTERSTORE: ValkeyCommand {
    public enum Aggregate: RESPRenderable, Sendable, Hashable {
        case sum
        case min
        case max

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .sum: "SUM".encode(into: &commandEncoder)
            case .min: "MIN".encode(into: &commandEncoder)
            case .max: "MAX".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = Int

    public var destination: ValkeyKey
    public var key: [ValkeyKey]
    public var weight: [Int]
    public var aggregate: Aggregate?

    @inlinable public init(destination: ValkeyKey, key: [ValkeyKey], weight: [Int] = [], aggregate: Aggregate? = nil) {
        self.destination = destination
        self.key = key
        self.weight = weight
        self.aggregate = aggregate
    }

    public var keysAffected: [ValkeyKey] { key + [destination] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray(
            "ZINTERSTORE",
            destination,
            RESPArrayWithCount(key),
            RESPWithToken("WEIGHTS", weight),
            RESPWithToken("AGGREGATE", aggregate)
        )
    }
}

/// Returns the number of members in a sorted set within a lexicographical range.
@_documentation(visibility: internal)
public struct ZLEXCOUNT<Min: RESPStringRenderable, Max: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var min: Min
    public var max: Max

    @inlinable public init(key: ValkeyKey, min: Min, max: Max) {
        self.key = key
        self.min = min
        self.max = max
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZLEXCOUNT", key, RESPBulkString(min), RESPBulkString(max))
    }
}

/// Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.
@_documentation(visibility: internal)
public struct ZMPOP: ValkeyCommand {
    public enum Where: RESPRenderable, Sendable, Hashable {
        case min
        case max

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .min: "MIN".encode(into: &commandEncoder)
            case .max: "MAX".encode(into: &commandEncoder)
            }
        }
    }
    public var key: [ValkeyKey]
    public var `where`: Where
    public var count: Int?

    @inlinable public init(key: [ValkeyKey], `where`: Where, count: Int? = nil) {
        self.key = key
        self.`where` = `where`
        self.count = count
    }

    public var keysAffected: [ValkeyKey] { key }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZMPOP", RESPArrayWithCount(key), `where`, RESPWithToken("COUNT", count))
    }
}

/// Returns the score of one or more members in a sorted set.
@_documentation(visibility: internal)
public struct ZMSCORE<Member: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var member: [Member]

    @inlinable public init(key: ValkeyKey, member: [Member]) {
        self.key = key
        self.member = member
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZMSCORE", key, member.map { RESPBulkString($0) })
    }
}

/// Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
@_documentation(visibility: internal)
public struct ZPOPMAX: ValkeyCommand {
    public var key: ValkeyKey
    public var count: Int?

    @inlinable public init(key: ValkeyKey, count: Int? = nil) {
        self.key = key
        self.count = count
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZPOPMAX", key, count)
    }
}

/// Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
@_documentation(visibility: internal)
public struct ZPOPMIN: ValkeyCommand {
    public var key: ValkeyKey
    public var count: Int?

    @inlinable public init(key: ValkeyKey, count: Int? = nil) {
        self.key = key
        self.count = count
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZPOPMIN", key, count)
    }
}

/// Returns one or more random members from a sorted set.
@_documentation(visibility: internal)
public struct ZRANDMEMBER: ValkeyCommand {
    public struct Options: RESPRenderable, Sendable, Hashable {
        @usableFromInline let count: Int
        @usableFromInline let withscores: Bool

        @inlinable public init(count: Int, withscores: Bool = false) {
            self.count = count
            self.withscores = withscores
        }

        @inlinable
        public var respEntries: Int {
            count.respEntries + RESPPureToken("WITHSCORES", withscores).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            count.encode(into: &commandEncoder)
            RESPPureToken("WITHSCORES", withscores).encode(into: &commandEncoder)
        }
    }
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var options: Options?

    @inlinable public init(key: ValkeyKey, options: Options? = nil) {
        self.key = key
        self.options = options
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZRANDMEMBER", key, options)
    }
}

/// Returns members in a sorted set within a range of indexes.
@_documentation(visibility: internal)
public struct ZRANGE<Start: RESPStringRenderable, Stop: RESPStringRenderable>: ValkeyCommand {
    public enum Sortby: RESPRenderable, Sendable, Hashable {
        case byscore
        case bylex

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .byscore: "BYSCORE".encode(into: &commandEncoder)
            case .bylex: "BYLEX".encode(into: &commandEncoder)
            }
        }
    }
    public struct Limit: RESPRenderable, Sendable, Hashable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable public init(offset: Int, count: Int) {
            self.offset = offset
            self.count = count
        }

        @inlinable
        public var respEntries: Int {
            offset.respEntries + count.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            offset.encode(into: &commandEncoder)
            count.encode(into: &commandEncoder)
        }
    }
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var start: Start
    public var stop: Stop
    public var sortby: Sortby?
    public var rev: Bool
    public var limit: Limit?
    public var withscores: Bool

    @inlinable public init(
        key: ValkeyKey,
        start: Start,
        stop: Stop,
        sortby: Sortby? = nil,
        rev: Bool = false,
        limit: Limit? = nil,
        withscores: Bool = false
    ) {
        self.key = key
        self.start = start
        self.stop = stop
        self.sortby = sortby
        self.rev = rev
        self.limit = limit
        self.withscores = withscores
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray(
            "ZRANGE",
            key,
            RESPBulkString(start),
            RESPBulkString(stop),
            sortby,
            RESPPureToken("REV", rev),
            RESPWithToken("LIMIT", limit),
            RESPPureToken("WITHSCORES", withscores)
        )
    }
}

/// Returns members in a sorted set within a lexicographical range.
@_documentation(visibility: internal)
public struct ZRANGEBYLEX<Min: RESPStringRenderable, Max: RESPStringRenderable>: ValkeyCommand {
    public struct Limit: RESPRenderable, Sendable, Hashable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable public init(offset: Int, count: Int) {
            self.offset = offset
            self.count = count
        }

        @inlinable
        public var respEntries: Int {
            offset.respEntries + count.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            offset.encode(into: &commandEncoder)
            count.encode(into: &commandEncoder)
        }
    }
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var min: Min
    public var max: Max
    public var limit: Limit?

    @inlinable public init(key: ValkeyKey, min: Min, max: Max, limit: Limit? = nil) {
        self.key = key
        self.min = min
        self.max = max
        self.limit = limit
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZRANGEBYLEX", key, RESPBulkString(min), RESPBulkString(max), RESPWithToken("LIMIT", limit))
    }
}

/// Returns members in a sorted set within a range of scores.
@_documentation(visibility: internal)
public struct ZRANGEBYSCORE: ValkeyCommand {
    public struct Limit: RESPRenderable, Sendable, Hashable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable public init(offset: Int, count: Int) {
            self.offset = offset
            self.count = count
        }

        @inlinable
        public var respEntries: Int {
            offset.respEntries + count.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            offset.encode(into: &commandEncoder)
            count.encode(into: &commandEncoder)
        }
    }
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var min: Double
    public var max: Double
    public var withscores: Bool
    public var limit: Limit?

    @inlinable public init(key: ValkeyKey, min: Double, max: Double, withscores: Bool = false, limit: Limit? = nil) {
        self.key = key
        self.min = min
        self.max = max
        self.withscores = withscores
        self.limit = limit
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZRANGEBYSCORE", key, min, max, RESPPureToken("WITHSCORES", withscores), RESPWithToken("LIMIT", limit))
    }
}

/// Stores a range of members from sorted set in a key.
@_documentation(visibility: internal)
public struct ZRANGESTORE<Min: RESPStringRenderable, Max: RESPStringRenderable>: ValkeyCommand {
    public enum Sortby: RESPRenderable, Sendable, Hashable {
        case byscore
        case bylex

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .byscore: "BYSCORE".encode(into: &commandEncoder)
            case .bylex: "BYLEX".encode(into: &commandEncoder)
            }
        }
    }
    public struct Limit: RESPRenderable, Sendable, Hashable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable public init(offset: Int, count: Int) {
            self.offset = offset
            self.count = count
        }

        @inlinable
        public var respEntries: Int {
            offset.respEntries + count.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            offset.encode(into: &commandEncoder)
            count.encode(into: &commandEncoder)
        }
    }
    public typealias Response = Int

    public var dst: ValkeyKey
    public var src: ValkeyKey
    public var min: Min
    public var max: Max
    public var sortby: Sortby?
    public var rev: Bool
    public var limit: Limit?

    @inlinable public init(dst: ValkeyKey, src: ValkeyKey, min: Min, max: Max, sortby: Sortby? = nil, rev: Bool = false, limit: Limit? = nil) {
        self.dst = dst
        self.src = src
        self.min = min
        self.max = max
        self.sortby = sortby
        self.rev = rev
        self.limit = limit
    }

    public var keysAffected: [ValkeyKey] { [dst, src] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray(
            "ZRANGESTORE",
            dst,
            src,
            RESPBulkString(min),
            RESPBulkString(max),
            sortby,
            RESPPureToken("REV", rev),
            RESPWithToken("LIMIT", limit)
        )
    }
}

/// Returns the index of a member in a sorted set ordered by ascending scores.
@_documentation(visibility: internal)
public struct ZRANK<Member: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var member: Member
    public var withscore: Bool

    @inlinable public init(key: ValkeyKey, member: Member, withscore: Bool = false) {
        self.key = key
        self.member = member
        self.withscore = withscore
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZRANK", key, RESPBulkString(member), RESPPureToken("WITHSCORE", withscore))
    }
}

/// Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
@_documentation(visibility: internal)
public struct ZREM<Member: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var member: [Member]

    @inlinable public init(key: ValkeyKey, member: [Member]) {
        self.key = key
        self.member = member
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZREM", key, member.map { RESPBulkString($0) })
    }
}

/// Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.
@_documentation(visibility: internal)
public struct ZREMRANGEBYLEX<Min: RESPStringRenderable, Max: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var min: Min
    public var max: Max

    @inlinable public init(key: ValkeyKey, min: Min, max: Max) {
        self.key = key
        self.min = min
        self.max = max
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZREMRANGEBYLEX", key, RESPBulkString(min), RESPBulkString(max))
    }
}

/// Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.
@_documentation(visibility: internal)
public struct ZREMRANGEBYRANK: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var start: Int
    public var stop: Int

    @inlinable public init(key: ValkeyKey, start: Int, stop: Int) {
        self.key = key
        self.start = start
        self.stop = stop
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZREMRANGEBYRANK", key, start, stop)
    }
}

/// Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.
@_documentation(visibility: internal)
public struct ZREMRANGEBYSCORE: ValkeyCommand {
    public typealias Response = Int

    public var key: ValkeyKey
    public var min: Double
    public var max: Double

    @inlinable public init(key: ValkeyKey, min: Double, max: Double) {
        self.key = key
        self.min = min
        self.max = max
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZREMRANGEBYSCORE", key, min, max)
    }
}

/// Returns members in a sorted set within a range of indexes in reverse order.
@_documentation(visibility: internal)
public struct ZREVRANGE: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var start: Int
    public var stop: Int
    public var withscores: Bool

    @inlinable public init(key: ValkeyKey, start: Int, stop: Int, withscores: Bool = false) {
        self.key = key
        self.start = start
        self.stop = stop
        self.withscores = withscores
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZREVRANGE", key, start, stop, RESPPureToken("WITHSCORES", withscores))
    }
}

/// Returns members in a sorted set within a lexicographical range in reverse order.
@_documentation(visibility: internal)
public struct ZREVRANGEBYLEX<Max: RESPStringRenderable, Min: RESPStringRenderable>: ValkeyCommand {
    public struct Limit: RESPRenderable, Sendable, Hashable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable public init(offset: Int, count: Int) {
            self.offset = offset
            self.count = count
        }

        @inlinable
        public var respEntries: Int {
            offset.respEntries + count.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            offset.encode(into: &commandEncoder)
            count.encode(into: &commandEncoder)
        }
    }
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var max: Max
    public var min: Min
    public var limit: Limit?

    @inlinable public init(key: ValkeyKey, max: Max, min: Min, limit: Limit? = nil) {
        self.key = key
        self.max = max
        self.min = min
        self.limit = limit
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZREVRANGEBYLEX", key, RESPBulkString(max), RESPBulkString(min), RESPWithToken("LIMIT", limit))
    }
}

/// Returns members in a sorted set within a range of scores in reverse order.
@_documentation(visibility: internal)
public struct ZREVRANGEBYSCORE: ValkeyCommand {
    public struct Limit: RESPRenderable, Sendable, Hashable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable public init(offset: Int, count: Int) {
            self.offset = offset
            self.count = count
        }

        @inlinable
        public var respEntries: Int {
            offset.respEntries + count.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            offset.encode(into: &commandEncoder)
            count.encode(into: &commandEncoder)
        }
    }
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var max: Double
    public var min: Double
    public var withscores: Bool
    public var limit: Limit?

    @inlinable public init(key: ValkeyKey, max: Double, min: Double, withscores: Bool = false, limit: Limit? = nil) {
        self.key = key
        self.max = max
        self.min = min
        self.withscores = withscores
        self.limit = limit
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZREVRANGEBYSCORE", key, max, min, RESPPureToken("WITHSCORES", withscores), RESPWithToken("LIMIT", limit))
    }
}

/// Returns the index of a member in a sorted set ordered by descending scores.
@_documentation(visibility: internal)
public struct ZREVRANK<Member: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = RESPToken?

    public var key: ValkeyKey
    public var member: Member
    public var withscore: Bool

    @inlinable public init(key: ValkeyKey, member: Member, withscore: Bool = false) {
        self.key = key
        self.member = member
        self.withscore = withscore
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZREVRANK", key, RESPBulkString(member), RESPPureToken("WITHSCORE", withscore))
    }
}

/// Iterates over members and scores of a sorted set.
@_documentation(visibility: internal)
public struct ZSCAN: ValkeyCommand {
    public typealias Response = RESPToken.Array

    public var key: ValkeyKey
    public var cursor: Int
    public var pattern: String?
    public var count: Int?
    public var noscores: Bool

    @inlinable public init(key: ValkeyKey, cursor: Int, pattern: String? = nil, count: Int? = nil, noscores: Bool = false) {
        self.key = key
        self.cursor = cursor
        self.pattern = pattern
        self.count = count
        self.noscores = noscores
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray(
            "ZSCAN",
            key,
            cursor,
            RESPWithToken("MATCH", pattern),
            RESPWithToken("COUNT", count),
            RESPPureToken("NOSCORES", noscores)
        )
    }
}

/// Returns the score of a member in a sorted set.
@_documentation(visibility: internal)
public struct ZSCORE<Member: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Double?

    public var key: ValkeyKey
    public var member: Member

    @inlinable public init(key: ValkeyKey, member: Member) {
        self.key = key
        self.member = member
    }

    public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ZSCORE", key, RESPBulkString(member))
    }
}

/// Returns the union of multiple sorted sets.
@_documentation(visibility: internal)
public struct ZUNION: ValkeyCommand {
    public enum Aggregate: RESPRenderable, Sendable, Hashable {
        case sum
        case min
        case max

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .sum: "SUM".encode(into: &commandEncoder)
            case .min: "MIN".encode(into: &commandEncoder)
            case .max: "MAX".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = RESPToken.Array

    public var key: [ValkeyKey]
    public var weight: [Int]
    public var aggregate: Aggregate?
    public var withscores: Bool

    @inlinable public init(key: [ValkeyKey], weight: [Int] = [], aggregate: Aggregate? = nil, withscores: Bool = false) {
        self.key = key
        self.weight = weight
        self.aggregate = aggregate
        self.withscores = withscores
    }

    public var keysAffected: [ValkeyKey] { key }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray(
            "ZUNION",
            RESPArrayWithCount(key),
            RESPWithToken("WEIGHTS", weight),
            RESPWithToken("AGGREGATE", aggregate),
            RESPPureToken("WITHSCORES", withscores)
        )
    }
}

/// Stores the union of multiple sorted sets in a key.
@_documentation(visibility: internal)
public struct ZUNIONSTORE: ValkeyCommand {
    public enum Aggregate: RESPRenderable, Sendable, Hashable {
        case sum
        case min
        case max

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .sum: "SUM".encode(into: &commandEncoder)
            case .min: "MIN".encode(into: &commandEncoder)
            case .max: "MAX".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = Int

    public var destination: ValkeyKey
    public var key: [ValkeyKey]
    public var weight: [Int]
    public var aggregate: Aggregate?

    @inlinable public init(destination: ValkeyKey, key: [ValkeyKey], weight: [Int] = [], aggregate: Aggregate? = nil) {
        self.destination = destination
        self.key = key
        self.weight = weight
        self.aggregate = aggregate
    }

    public var keysAffected: [ValkeyKey] { key + [destination] }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray(
            "ZUNIONSTORE",
            destination,
            RESPArrayWithCount(key),
            RESPWithToken("WEIGHTS", weight),
            RESPWithToken("AGGREGATE", aggregate)
        )
    }
}

extension ValkeyConnectionProtocol {
    /// Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZMPOP](https://valkey.io/commands/bzmpop)
    /// - Available: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Response: One of the following
    ///     * [Null]: Timeout reached and no elements were popped.
    ///     * [Array]: The keyname and the popped members.
    @inlinable
    public func bzmpop(timeout: Double, key: [ValkeyKey], `where`: BZMPOP.Where, count: Int? = nil) async throws -> BZMPOP.Response {
        try await send(command: BZMPOP(timeout: timeout, key: key, where: `where`, count: count))
    }

    /// Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMAX](https://valkey.io/commands/bzpopmax)
    /// - Available: 5.0.0
    /// - History:
    ///     * 6.0.0: `timeout` is interpreted as a double instead of an integer.
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Response: One of the following
    ///     * [Null]: Timeout reached and no elements were popped.
    ///     * [Array]: The keyname, popped member, and its score.
    @inlinable
    public func bzpopmax(key: [ValkeyKey], timeout: Double) async throws -> BZPOPMAX.Response {
        try await send(command: BZPOPMAX(key: key, timeout: timeout))
    }

    /// Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMIN](https://valkey.io/commands/bzpopmin)
    /// - Available: 5.0.0
    /// - History:
    ///     * 6.0.0: `timeout` is interpreted as a double instead of an integer.
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Response: One of the following
    ///     * [Null]: Timeout reached and no elements were popped.
    ///     * [Array]: The keyname, popped member, and its score.
    @inlinable
    public func bzpopmin(key: [ValkeyKey], timeout: Double) async throws -> BZPOPMIN.Response {
        try await send(command: BZPOPMIN(key: key, timeout: timeout))
    }

    /// Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [ZADD](https://valkey.io/commands/zadd)
    /// - Available: 1.2.0
    /// - History:
    ///     * 2.4.0: Accepts multiple elements.
    ///     * 3.0.2: Added the `XX`, `NX`, `CH` and `INCR` options.
    ///     * 6.2.0: Added the `GT` and `LT` options.
    /// - Complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.
    /// - Response: One of the following
    ///     * [Null]: Operation was aborted (conflict with one of the `XX`/`NX`/`LT`/`GT` options).
    ///     * [Integer]: The number of new members (when the `CH` option is not used)
    ///     * [Integer]: The number of new or updated members (when the `CH` option is used)
    ///     * [Double]: The updated score of the member (when the `INCR` option is used)
    @inlinable
    public func zadd<Member: RESPStringRenderable>(
        key: ValkeyKey,
        condition: ZADD<Member>.Condition? = nil,
        comparison: ZADD<Member>.Comparison? = nil,
        change: Bool = false,
        increment: Bool = false,
        data: [ZADD<Member>.Data]
    ) async throws -> RESPToken? {
        try await send(command: ZADD(key: key, condition: condition, comparison: comparison, change: change, increment: increment, data: data))
    }

    /// Returns the number of members in a sorted set.
    ///
    /// - Documentation: [ZCARD](https://valkey.io/commands/zcard)
    /// - Available: 1.2.0
    /// - Complexity: O(1)
    /// - Response: [Integer]: The cardinality (number of elements) of the sorted set, or 0 if key does not exist
    @inlinable
    public func zcard(key: ValkeyKey) async throws -> Int {
        try await send(command: ZCARD(key: key))
    }

    /// Returns the count of members in a sorted set that have scores within a range.
    ///
    /// - Documentation: [ZCOUNT](https://valkey.io/commands/zcount)
    /// - Available: 2.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Response: [Integer]: The number of elements in the specified score range
    @inlinable
    public func zcount(key: ValkeyKey, min: Double, max: Double) async throws -> Int {
        try await send(command: ZCOUNT(key: key, min: min, max: max))
    }

    /// Returns the difference between multiple sorted sets.
    ///
    /// - Documentation: [ZDIFF](https://valkey.io/commands/zdiff)
    /// - Available: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Response: One of the following
    ///     * [Array]: A list of members. Returned in case `WITHSCORES` was not used.
    ///     * [Array]: Members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array
    @inlinable
    public func zdiff(key: [ValkeyKey], withscores: Bool = false) async throws -> RESPToken.Array {
        try await send(command: ZDIFF(key: key, withscores: withscores))
    }

    /// Stores the difference of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZDIFFSTORE](https://valkey.io/commands/zdiffstore)
    /// - Available: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Response: [Integer]: Number of elements in the resulting sorted set at `destination`
    @inlinable
    public func zdiffstore(destination: ValkeyKey, key: [ValkeyKey]) async throws -> Int {
        try await send(command: ZDIFFSTORE(destination: destination, key: key))
    }

    /// Increments the score of a member in a sorted set.
    ///
    /// - Documentation: [ZINCRBY](https://valkey.io/commands/zincrby)
    /// - Available: 1.2.0
    /// - Complexity: O(log(N)) where N is the number of elements in the sorted set.
    /// - Response: [Double]: The new score of `member`
    @inlinable
    public func zincrby<Member: RESPStringRenderable>(key: ValkeyKey, increment: Int, member: Member) async throws -> Double {
        try await send(command: ZINCRBY(key: key, increment: increment, member: member))
    }

    /// Returns the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTER](https://valkey.io/commands/zinter)
    /// - Available: 6.2.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Response: One of the following
    ///     * [Array]: Result of intersection, containing only the member names. Returned in case `WITHSCORES` was not used.
    ///     * [Array]: Result of intersection, containing members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array
    @inlinable
    public func zinter(
        key: [ValkeyKey],
        weight: [Int] = [],
        aggregate: ZINTER.Aggregate? = nil,
        withscores: Bool = false
    ) async throws -> RESPToken.Array {
        try await send(command: ZINTER(key: key, weight: weight, aggregate: aggregate, withscores: withscores))
    }

    /// Returns the number of members of the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTERCARD](https://valkey.io/commands/zintercard)
    /// - Available: 7.0.0
    /// - Complexity: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.
    /// - Response: [Integer]: Number of elements in the resulting intersection.
    @inlinable
    public func zintercard(key: [ValkeyKey], limit: Int? = nil) async throws -> Int {
        try await send(command: ZINTERCARD(key: key, limit: limit))
    }

    /// Stores the intersect of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZINTERSTORE](https://valkey.io/commands/zinterstore)
    /// - Available: 2.0.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Response: [Integer]: Number of elements in the resulting sorted set.
    @inlinable
    public func zinterstore(destination: ValkeyKey, key: [ValkeyKey], weight: [Int] = [], aggregate: ZINTERSTORE.Aggregate? = nil) async throws -> Int
    {
        try await send(command: ZINTERSTORE(destination: destination, key: key, weight: weight, aggregate: aggregate))
    }

    /// Returns the number of members in a sorted set within a lexicographical range.
    ///
    /// - Documentation: [ZLEXCOUNT](https://valkey.io/commands/zlexcount)
    /// - Available: 2.8.9
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Response: [Integer]: Number of elements in the specified score range.
    @inlinable
    public func zlexcount<Min: RESPStringRenderable, Max: RESPStringRenderable>(key: ValkeyKey, min: Min, max: Max) async throws -> Int {
        try await send(command: ZLEXCOUNT(key: key, min: min, max: max))
    }

    /// Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZMPOP](https://valkey.io/commands/zmpop)
    /// - Available: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Response: One of the following
    ///     * [Null]: No element could be popped.
    ///     * [Array]: Name of the key that elements were popped.
    @inlinable
    public func zmpop(key: [ValkeyKey], `where`: ZMPOP.Where, count: Int? = nil) async throws -> ZMPOP.Response {
        try await send(command: ZMPOP(key: key, where: `where`, count: count))
    }

    /// Returns the score of one or more members in a sorted set.
    ///
    /// - Documentation: [ZMSCORE](https://valkey.io/commands/zmscore)
    /// - Available: 6.2.0
    /// - Complexity: O(N) where N is the number of members being requested.
    /// - Response: One of the following
    ///     * [Array]: The score of the member (a double precision floating point number). In RESP2, this is returned as string.
    ///     * [Array]: Member does not exist in the sorted set.
    @inlinable
    public func zmscore<Member: RESPStringRenderable>(key: ValkeyKey, member: [Member]) async throws -> RESPToken.Array {
        try await send(command: ZMSCORE(key: key, member: member))
    }

    /// Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZPOPMAX](https://valkey.io/commands/zpopmax)
    /// - Available: 5.0.0
    /// - Complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Response: One of the following
    ///     * [Array]: List of popped elements and scores when 'COUNT' isn't specified.
    ///     * [Array]: List of popped elements and scores when 'COUNT' is specified.
    @inlinable
    public func zpopmax(key: ValkeyKey, count: Int? = nil) async throws -> ZPOPMAX.Response {
        try await send(command: ZPOPMAX(key: key, count: count))
    }

    /// Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZPOPMIN](https://valkey.io/commands/zpopmin)
    /// - Available: 5.0.0
    /// - Complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Response: One of the following
    ///     * [Array]: List of popped elements and scores when 'COUNT' isn't specified.
    ///     * [Array]: List of popped elements and scores when 'COUNT' is specified.
    @inlinable
    public func zpopmin(key: ValkeyKey, count: Int? = nil) async throws -> ZPOPMIN.Response {
        try await send(command: ZPOPMIN(key: key, count: count))
    }

    /// Returns one or more random members from a sorted set.
    ///
    /// - Documentation: [ZRANDMEMBER](https://valkey.io/commands/zrandmember)
    /// - Available: 6.2.0
    /// - Complexity: O(N) where N is the number of members returned
    /// - Response: One of the following
    ///     * [Null]: Key does not exist.
    ///     * [String]: Randomly selected element when 'COUNT' is not used.
    ///     * [Array]: Randomly selected elements when 'COUNT' is used.
    ///     * [Array]: Randomly selected elements when 'COUNT' and 'WITHSCORES' modifiers are used.
    @inlinable
    public func zrandmember(key: ValkeyKey, options: ZRANDMEMBER.Options? = nil) async throws -> RESPToken? {
        try await send(command: ZRANDMEMBER(key: key, options: options))
    }

    /// Returns members in a sorted set within a range of indexes.
    ///
    /// - Documentation: [ZRANGE](https://valkey.io/commands/zrange)
    /// - Available: 1.2.0
    /// - History:
    ///     * 6.2.0: Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options.
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
    /// - Response: One of the following
    ///     * [Array]: A list of member elements
    ///     * [Array]: Members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array
    @inlinable
    public func zrange<Start: RESPStringRenderable, Stop: RESPStringRenderable>(
        key: ValkeyKey,
        start: Start,
        stop: Stop,
        sortby: ZRANGE<Start, Stop>.Sortby? = nil,
        rev: Bool = false,
        limit: ZRANGE<Start, Stop>.Limit? = nil,
        withscores: Bool = false
    ) async throws -> RESPToken.Array {
        try await send(command: ZRANGE(key: key, start: start, stop: stop, sortby: sortby, rev: rev, limit: limit, withscores: withscores))
    }

    /// Returns members in a sorted set within a lexicographical range.
    ///
    /// - Documentation: [ZRANGEBYLEX](https://valkey.io/commands/zrangebylex)
    /// - Available: 2.8.9
    /// - Deprecated since: 6.2.0. Replaced by `ZRANGE` with the `BYLEX` argument.
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Response: [Array]: List of elements in the specified score range.
    @inlinable
    public func zrangebylex<Min: RESPStringRenderable, Max: RESPStringRenderable>(
        key: ValkeyKey,
        min: Min,
        max: Max,
        limit: ZRANGEBYLEX<Min, Max>.Limit? = nil
    ) async throws -> RESPToken.Array {
        try await send(command: ZRANGEBYLEX(key: key, min: min, max: max, limit: limit))
    }

    /// Returns members in a sorted set within a range of scores.
    ///
    /// - Documentation: [ZRANGEBYSCORE](https://valkey.io/commands/zrangebyscore)
    /// - Available: 1.0.5
    /// - History:
    ///     * 2.0.0: Added the `WITHSCORES` modifier.
    /// - Deprecated since: 6.2.0. Replaced by `ZRANGE` with the `BYSCORE` argument.
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Response: One of the following
    ///     * [Array]: List of the elements in the specified score range, as not WITHSCORES.
    ///     * [Array]: List of the elements and their scores in the specified score range, as WITHSCORES used.
    @inlinable
    public func zrangebyscore(
        key: ValkeyKey,
        min: Double,
        max: Double,
        withscores: Bool = false,
        limit: ZRANGEBYSCORE.Limit? = nil
    ) async throws -> RESPToken.Array {
        try await send(command: ZRANGEBYSCORE(key: key, min: min, max: max, withscores: withscores, limit: limit))
    }

    /// Stores a range of members from sorted set in a key.
    ///
    /// - Documentation: [ZRANGESTORE](https://valkey.io/commands/zrangestore)
    /// - Available: 6.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.
    /// - Response: [Integer]: Number of elements in the resulting sorted set.
    @inlinable
    public func zrangestore<Min: RESPStringRenderable, Max: RESPStringRenderable>(
        dst: ValkeyKey,
        src: ValkeyKey,
        min: Min,
        max: Max,
        sortby: ZRANGESTORE<Min, Max>.Sortby? = nil,
        rev: Bool = false,
        limit: ZRANGESTORE<Min, Max>.Limit? = nil
    ) async throws -> Int {
        try await send(command: ZRANGESTORE(dst: dst, src: src, min: min, max: max, sortby: sortby, rev: rev, limit: limit))
    }

    /// Returns the index of a member in a sorted set ordered by ascending scores.
    ///
    /// - Documentation: [ZRANK](https://valkey.io/commands/zrank)
    /// - Available: 2.0.0
    /// - History:
    ///     * 7.2.0: Added the optional `WITHSCORE` argument.
    /// - Complexity: O(log(N))
    /// - Response: One of the following
    ///     * [Null]: Key does not exist or the member does not exist in the sorted set.
    ///     * [Integer]: The rank of the member when 'WITHSCORE' is not used.
    ///     * [Array]: The rank and score of the member when 'WITHSCORE' is used.
    @inlinable
    public func zrank<Member: RESPStringRenderable>(key: ValkeyKey, member: Member, withscore: Bool = false) async throws -> RESPToken? {
        try await send(command: ZRANK(key: key, member: member, withscore: withscore))
    }

    /// Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREM](https://valkey.io/commands/zrem)
    /// - Available: 1.2.0
    /// - History:
    ///     * 2.4.0: Accepts multiple elements.
    /// - Complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.
    /// - Response: [Integer]: The number of members removed from the sorted set, not including non existing members.
    @inlinable
    public func zrem<Member: RESPStringRenderable>(key: ValkeyKey, member: [Member]) async throws -> Int {
        try await send(command: ZREM(key: key, member: member))
    }

    /// Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYLEX](https://valkey.io/commands/zremrangebylex)
    /// - Available: 2.8.9
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Response: [Integer]: Number of elements removed.
    @inlinable
    public func zremrangebylex<Min: RESPStringRenderable, Max: RESPStringRenderable>(key: ValkeyKey, min: Min, max: Max) async throws -> Int {
        try await send(command: ZREMRANGEBYLEX(key: key, min: min, max: max))
    }

    /// Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYRANK](https://valkey.io/commands/zremrangebyrank)
    /// - Available: 2.0.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Response: [Integer]: Number of elements removed.
    @inlinable
    public func zremrangebyrank(key: ValkeyKey, start: Int, stop: Int) async throws -> Int {
        try await send(command: ZREMRANGEBYRANK(key: key, start: start, stop: stop))
    }

    /// Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYSCORE](https://valkey.io/commands/zremrangebyscore)
    /// - Available: 1.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Response: [Integer]: Number of elements removed.
    @inlinable
    public func zremrangebyscore(key: ValkeyKey, min: Double, max: Double) async throws -> Int {
        try await send(command: ZREMRANGEBYSCORE(key: key, min: min, max: max))
    }

    /// Returns members in a sorted set within a range of indexes in reverse order.
    ///
    /// - Documentation: [ZREVRANGE](https://valkey.io/commands/zrevrange)
    /// - Available: 1.2.0
    /// - Deprecated since: 6.2.0. Replaced by `ZRANGE` with the `REV` argument.
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
    /// - Response: One of the following
    ///     * [Array]: List of member elements.
    ///     * [Array]: List of the members and their scores. Returned in case `WITHSCORES` was used.
    @inlinable
    public func zrevrange(key: ValkeyKey, start: Int, stop: Int, withscores: Bool = false) async throws -> RESPToken.Array {
        try await send(command: ZREVRANGE(key: key, start: start, stop: stop, withscores: withscores))
    }

    /// Returns members in a sorted set within a lexicographical range in reverse order.
    ///
    /// - Documentation: [ZREVRANGEBYLEX](https://valkey.io/commands/zrevrangebylex)
    /// - Available: 2.8.9
    /// - Deprecated since: 6.2.0. Replaced by `ZRANGE` with the `REV` and `BYLEX` arguments.
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Response: [Array]: List of the elements in the specified score range.
    @inlinable
    public func zrevrangebylex<Max: RESPStringRenderable, Min: RESPStringRenderable>(
        key: ValkeyKey,
        max: Max,
        min: Min,
        limit: ZREVRANGEBYLEX<Max, Min>.Limit? = nil
    ) async throws -> RESPToken.Array {
        try await send(command: ZREVRANGEBYLEX(key: key, max: max, min: min, limit: limit))
    }

    /// Returns members in a sorted set within a range of scores in reverse order.
    ///
    /// - Documentation: [ZREVRANGEBYSCORE](https://valkey.io/commands/zrevrangebyscore)
    /// - Available: 2.2.0
    /// - History:
    ///     * 2.1.6: `min` and `max` can be exclusive.
    /// - Deprecated since: 6.2.0. Replaced by `ZRANGE` with the `REV` and `BYSCORE` arguments.
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Response: One of the following
    ///     * [Array]: List of the elements in the specified score range, as not WITHSCORES.
    ///     * [Array]: List of the elements and their scores in the specified score range, as WITHSCORES used.
    @inlinable
    public func zrevrangebyscore(
        key: ValkeyKey,
        max: Double,
        min: Double,
        withscores: Bool = false,
        limit: ZREVRANGEBYSCORE.Limit? = nil
    ) async throws -> RESPToken.Array {
        try await send(command: ZREVRANGEBYSCORE(key: key, max: max, min: min, withscores: withscores, limit: limit))
    }

    /// Returns the index of a member in a sorted set ordered by descending scores.
    ///
    /// - Documentation: [ZREVRANK](https://valkey.io/commands/zrevrank)
    /// - Available: 2.0.0
    /// - History:
    ///     * 7.2.0: Added the optional `WITHSCORE` argument.
    /// - Complexity: O(log(N))
    /// - Response: One of the following
    ///     * [Null]: Key does not exist or the member does not exist in the sorted set.
    ///     * [Integer]: The rank of the member when 'WITHSCORE' is not used.
    ///     * [Array]: The rank and score of the member when 'WITHSCORE' is used.
    @inlinable
    public func zrevrank<Member: RESPStringRenderable>(key: ValkeyKey, member: Member, withscore: Bool = false) async throws -> RESPToken? {
        try await send(command: ZREVRANK(key: key, member: member, withscore: withscore))
    }

    /// Iterates over members and scores of a sorted set.
    ///
    /// - Documentation: [ZSCAN](https://valkey.io/commands/zscan)
    /// - Available: 2.8.0
    /// - History:
    ///     * 8.0.0: Added noscores option.
    /// - Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
    /// - Response: [Array]: Cursor and scan response in array form.
    @inlinable
    public func zscan(key: ValkeyKey, cursor: Int, pattern: String? = nil, count: Int? = nil, noscores: Bool = false) async throws -> RESPToken.Array
    {
        try await send(command: ZSCAN(key: key, cursor: cursor, pattern: pattern, count: count, noscores: noscores))
    }

    /// Returns the score of a member in a sorted set.
    ///
    /// - Documentation: [ZSCORE](https://valkey.io/commands/zscore)
    /// - Available: 1.2.0
    /// - Complexity: O(1)
    /// - Response: One of the following
    ///     * [Double]: The score of the member (a double precision floating point number). In RESP2, this is returned as string.
    ///     * [Null]: Member does not exist in the sorted set, or key does not exist.
    @inlinable
    public func zscore<Member: RESPStringRenderable>(key: ValkeyKey, member: Member) async throws -> Double? {
        try await send(command: ZSCORE(key: key, member: member))
    }

    /// Returns the union of multiple sorted sets.
    ///
    /// - Documentation: [ZUNION](https://valkey.io/commands/zunion)
    /// - Available: 6.2.0
    /// - Complexity: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Response: One of the following
    ///     * [Array]: The result of union when 'WITHSCORES' is not used.
    ///     * [Array]: The result of union when 'WITHSCORES' is used.
    @inlinable
    public func zunion(
        key: [ValkeyKey],
        weight: [Int] = [],
        aggregate: ZUNION.Aggregate? = nil,
        withscores: Bool = false
    ) async throws -> RESPToken.Array {
        try await send(command: ZUNION(key: key, weight: weight, aggregate: aggregate, withscores: withscores))
    }

    /// Stores the union of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZUNIONSTORE](https://valkey.io/commands/zunionstore)
    /// - Available: 2.0.0
    /// - Complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Response: [Integer]: The number of elements in the resulting sorted set.
    @inlinable
    public func zunionstore(destination: ValkeyKey, key: [ValkeyKey], weight: [Int] = [], aggregate: ZUNIONSTORE.Aggregate? = nil) async throws -> Int
    {
        try await send(command: ZUNIONSTORE(destination: destination, key: key, weight: weight, aggregate: aggregate))
    }

}
