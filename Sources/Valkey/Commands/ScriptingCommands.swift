//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-valkey open source project
//
// Copyright (c) 2025 Apple Inc. and the swift-valkey project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-valkey project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// A container for function commands.
public enum FUNCTION {
    /// Deletes a library and its functions.
    public struct DELETE<LibraryName: RESPStringRenderable>: RESPCommand {
        public var libraryName: LibraryName

        @inlinable public init(libraryName: LibraryName) {
            self.libraryName = libraryName
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "DELETE", RESPBulkString(libraryName))
        }
    }

    /// Dumps all libraries into a serialized binary payload.
    public struct DUMP: RESPCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "DUMP")
        }
    }

    /// Deletes all libraries and functions.
    public struct FLUSH: RESPCommand {
        public enum FlushType: RESPRenderable, Sendable {
            case async
            case sync

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout RESPCommandEncoder) {
                switch self {
                case .async: "ASYNC".encode(into: &commandEncoder)
                case .sync: "SYNC".encode(into: &commandEncoder)
                }
            }
        }
        public var flushType: FlushType?

        @inlinable public init(flushType: FlushType? = nil) {
            self.flushType = flushType
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "FLUSH", flushType)
        }
    }

    /// Returns helpful text about the different subcommands.
    public struct HELP: RESPCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "HELP")
        }
    }

    /// Terminates a function during execution.
    public struct KILL: RESPCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "KILL")
        }
    }

    /// Returns information about all libraries.
    public struct LIST: RESPCommand {
        public typealias Response = RESPToken.Array

        public var libraryNamePattern: String?
        public var withcode: Bool

        @inlinable public init(libraryNamePattern: String? = nil, withcode: Bool = false) {
            self.libraryNamePattern = libraryNamePattern
            self.withcode = withcode
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "LIST", RESPWithToken("LIBRARYNAME", libraryNamePattern), RESPPureToken("WITHCODE", withcode))
        }
    }

    /// Creates a library.
    public struct LOAD<FunctionCode: RESPStringRenderable>: RESPCommand {
        public var replace: Bool
        public var functionCode: FunctionCode

        @inlinable public init(replace: Bool = false, functionCode: FunctionCode) {
            self.replace = replace
            self.functionCode = functionCode
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "LOAD", RESPPureToken("REPLACE", replace), RESPBulkString(functionCode))
        }
    }

    /// Restores all libraries from a payload.
    public struct RESTORE<SerializedValue: RESPStringRenderable>: RESPCommand {
        public enum Policy: RESPRenderable, Sendable {
            case flush
            case append
            case replace

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout RESPCommandEncoder) {
                switch self {
                case .flush: "FLUSH".encode(into: &commandEncoder)
                case .append: "APPEND".encode(into: &commandEncoder)
                case .replace: "REPLACE".encode(into: &commandEncoder)
                }
            }
        }
        public var serializedValue: SerializedValue
        public var policy: Policy?

        @inlinable public init(serializedValue: SerializedValue, policy: Policy? = nil) {
            self.serializedValue = serializedValue
            self.policy = policy
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "RESTORE", RESPBulkString(serializedValue), policy)
        }
    }

    /// Returns information about a function during execution.
    public struct STATS: RESPCommand {
        public typealias Response = RESPToken.Map

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("FUNCTION", "STATS")
        }
    }

}

/// A container for Lua scripts management commands.
public enum SCRIPT {
    /// Sets the debug mode of server-side Lua scripts.
    public struct DEBUG: RESPCommand {
        public enum Mode: RESPRenderable, Sendable {
            case yes
            case sync
            case no

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout RESPCommandEncoder) {
                switch self {
                case .yes: "YES".encode(into: &commandEncoder)
                case .sync: "SYNC".encode(into: &commandEncoder)
                case .no: "NO".encode(into: &commandEncoder)
                }
            }
        }
        public var mode: Mode

        @inlinable public init(mode: Mode) {
            self.mode = mode
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("SCRIPT", "DEBUG", mode)
        }
    }

    /// Determines whether server-side Lua scripts exist in the script cache.
    public struct EXISTS<Sha1: RESPStringRenderable>: RESPCommand {
        public typealias Response = RESPToken.Array

        public var sha1: [Sha1]

        @inlinable public init(sha1: [Sha1]) {
            self.sha1 = sha1
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("SCRIPT", "EXISTS", sha1.map { RESPBulkString($0) })
        }
    }

    /// Removes all server-side Lua scripts from the script cache.
    public struct FLUSH: RESPCommand {
        public enum FlushType: RESPRenderable, Sendable {
            case async
            case sync

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout RESPCommandEncoder) {
                switch self {
                case .async: "ASYNC".encode(into: &commandEncoder)
                case .sync: "SYNC".encode(into: &commandEncoder)
                }
            }
        }
        public var flushType: FlushType?

        @inlinable public init(flushType: FlushType? = nil) {
            self.flushType = flushType
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("SCRIPT", "FLUSH", flushType)
        }
    }

    /// Returns helpful text about the different subcommands.
    public struct HELP: RESPCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("SCRIPT", "HELP")
        }
    }

    /// Terminates a server-side Lua script during execution.
    public struct KILL: RESPCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("SCRIPT", "KILL")
        }
    }

    /// Loads a server-side Lua script to the script cache.
    public struct LOAD<Script: RESPStringRenderable>: RESPCommand {
        public var script: Script

        @inlinable public init(script: Script) {
            self.script = script
        }

        @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
            commandEncoder.encodeArray("SCRIPT", "LOAD", RESPBulkString(script))
        }
    }

}

/// Executes a server-side Lua script.
public struct EVAL<Script: RESPStringRenderable>: RESPCommand {
    public var script: Script
    public var key: [RESPKey]
    public var arg: [String]

    @inlinable public init(script: Script, key: [RESPKey] = [], arg: [String] = []) {
        self.script = script
        self.key = key
        self.arg = arg
    }

    public var keysAffected: [RESPKey] { key }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("EVAL", RESPBulkString(script), RESPArrayWithCount(key), arg)
    }
}

/// Executes a server-side Lua script by SHA1 digest.
public struct EVALSHA<Sha1: RESPStringRenderable>: RESPCommand {
    public var sha1: Sha1
    public var key: [RESPKey]
    public var arg: [String]

    @inlinable public init(sha1: Sha1, key: [RESPKey] = [], arg: [String] = []) {
        self.sha1 = sha1
        self.key = key
        self.arg = arg
    }

    public var keysAffected: [RESPKey] { key }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("EVALSHA", RESPBulkString(sha1), RESPArrayWithCount(key), arg)
    }
}

/// Executes a read-only server-side Lua script by SHA1 digest.
public struct EVALSHARO<Sha1: RESPStringRenderable>: RESPCommand {
    public var sha1: Sha1
    public var key: [RESPKey]
    public var arg: [String]

    @inlinable public init(sha1: Sha1, key: [RESPKey] = [], arg: [String] = []) {
        self.sha1 = sha1
        self.key = key
        self.arg = arg
    }

    public var keysAffected: [RESPKey] { key }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("EVALSHA_RO", RESPBulkString(sha1), RESPArrayWithCount(key), arg)
    }
}

/// Executes a read-only server-side Lua script.
public struct EVALRO<Script: RESPStringRenderable>: RESPCommand {
    public var script: Script
    public var key: [RESPKey]
    public var arg: [String]

    @inlinable public init(script: Script, key: [RESPKey] = [], arg: [String] = []) {
        self.script = script
        self.key = key
        self.arg = arg
    }

    public var keysAffected: [RESPKey] { key }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("EVAL_RO", RESPBulkString(script), RESPArrayWithCount(key), arg)
    }
}

/// Invokes a function.
public struct FCALL<Function: RESPStringRenderable>: RESPCommand {
    public var function: Function
    public var key: [RESPKey]
    public var arg: [String]

    @inlinable public init(function: Function, key: [RESPKey] = [], arg: [String] = []) {
        self.function = function
        self.key = key
        self.arg = arg
    }

    public var keysAffected: [RESPKey] { key }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("FCALL", RESPBulkString(function), RESPArrayWithCount(key), arg)
    }
}

/// Invokes a read-only function.
public struct FCALLRO<Function: RESPStringRenderable>: RESPCommand {
    public var function: Function
    public var key: [RESPKey]
    public var arg: [String]

    @inlinable public init(function: Function, key: [RESPKey] = [], arg: [String] = []) {
        self.function = function
        self.key = key
        self.arg = arg
    }

    public var keysAffected: [RESPKey] { key }

    @inlinable public func encode(into commandEncoder: inout RESPCommandEncoder) {
        commandEncoder.encodeArray("FCALL_RO", RESPBulkString(function), RESPArrayWithCount(key), arg)
    }
}

extension ValkeyConnection {
    /// Executes a server-side Lua script.
    ///
    /// - Documentation: [EVAL](https:/valkey.io/commands/eval)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func eval<Script: RESPStringRenderable>(script: Script, key: [RESPKey] = [], arg: [String] = []) async throws -> EVAL.Response {
        try await send(command: EVAL(script: script, key: key, arg: arg))
    }

    /// Executes a server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA](https:/valkey.io/commands/evalsha)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalsha<Sha1: RESPStringRenderable>(sha1: Sha1, key: [RESPKey] = [], arg: [String] = []) async throws -> EVALSHA.Response {
        try await send(command: EVALSHA(sha1: sha1, key: key, arg: arg))
    }

    /// Executes a read-only server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA_RO](https:/valkey.io/commands/evalsha_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalshaRo<Sha1: RESPStringRenderable>(sha1: Sha1, key: [RESPKey] = [], arg: [String] = []) async throws -> EVALSHARO.Response {
        try await send(command: EVALSHARO(sha1: sha1, key: key, arg: arg))
    }

    /// Executes a read-only server-side Lua script.
    ///
    /// - Documentation: [EVAL_RO](https:/valkey.io/commands/eval_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalRo<Script: RESPStringRenderable>(script: Script, key: [RESPKey] = [], arg: [String] = []) async throws -> EVALRO.Response {
        try await send(command: EVALRO(script: script, key: key, arg: arg))
    }

    /// Invokes a function.
    ///
    /// - Documentation: [FCALL](https:/valkey.io/commands/fcall)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the function that was executed.
    @inlinable
    public func fcall<Function: RESPStringRenderable>(function: Function, key: [RESPKey] = [], arg: [String] = []) async throws -> FCALL.Response {
        try await send(command: FCALL(function: function, key: key, arg: arg))
    }

    /// Invokes a read-only function.
    ///
    /// - Documentation: [FCALL_RO](https:/valkey.io/commands/fcall_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the function that was executed.
    @inlinable
    public func fcallRo<Function: RESPStringRenderable>(function: Function, key: [RESPKey] = [], arg: [String] = []) async throws -> FCALLRO.Response {
        try await send(command: FCALLRO(function: function, key: key, arg: arg))
    }

    /// Deletes a library and its functions.
    ///
    /// - Documentation: [FUNCTION DELETE](https:/valkey.io/commands/function-delete)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @write, @slow, @scripting
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func functionDelete<LibraryName: RESPStringRenderable>(libraryName: LibraryName) async throws {
        _ = try await send(command: FUNCTION.DELETE(libraryName: libraryName))
    }

    /// Dumps all libraries into a serialized binary payload.
    ///
    /// - Documentation: [FUNCTION DUMP](https:/valkey.io/commands/function-dump)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions
    /// - Categories: @slow, @scripting
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the serialized payload
    @inlinable
    public func functionDump() async throws -> FUNCTION.DUMP.Response {
        try await send(command: FUNCTION.DUMP())
    }

    /// Deletes all libraries and functions.
    ///
    /// - Documentation: [FUNCTION FLUSH](https:/valkey.io/commands/function-flush)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions deleted
    /// - Categories: @write, @slow, @scripting
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func functionFlush(flushType: FUNCTION.FLUSH.FlushType? = nil) async throws {
        _ = try await send(command: FUNCTION.FLUSH(flushType: flushType))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [FUNCTION HELP](https:/valkey.io/commands/function-help)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of sub-commands and their descriptions.
    @inlinable
    public func functionHelp() async throws -> RESPToken.Array {
        try await send(command: FUNCTION.HELP())
    }

    /// Terminates a function during execution.
    ///
    /// - Documentation: [FUNCTION KILL](https:/valkey.io/commands/function-kill)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func functionKill() async throws {
        _ = try await send(command: FUNCTION.KILL())
    }

    /// Returns information about all libraries.
    ///
    /// - Documentation: [FUNCTION LIST](https:/valkey.io/commands/function-list)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): information about functions and libraries.
    @inlinable
    public func functionList(libraryNamePattern: String? = nil, withcode: Bool = false) async throws -> RESPToken.Array {
        try await send(command: FUNCTION.LIST(libraryNamePattern: libraryNamePattern, withcode: withcode))
    }

    /// Creates a library.
    ///
    /// - Documentation: [FUNCTION LOAD](https:/valkey.io/commands/function-load)
    /// - Version: 7.0.0
    /// - Complexity: O(1) (considering compilation time is redundant)
    /// - Categories: @write, @slow, @scripting
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the library name that was loaded.
    @inlinable
    public func functionLoad<FunctionCode: RESPStringRenderable>(replace: Bool = false, functionCode: FunctionCode) async throws -> FUNCTION.LOAD.Response {
        try await send(command: FUNCTION.LOAD(replace: replace, functionCode: functionCode))
    }

    /// Restores all libraries from a payload.
    ///
    /// - Documentation: [FUNCTION RESTORE](https:/valkey.io/commands/function-restore)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions on the payload
    /// - Categories: @write, @slow, @scripting
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func functionRestore<SerializedValue: RESPStringRenderable>(serializedValue: SerializedValue, policy: FUNCTION.RESTORE<SerializedValue>.Policy? = nil) async throws {
        _ = try await send(command: FUNCTION.RESTORE(serializedValue: serializedValue, policy: policy))
    }

    /// Returns information about a function during execution.
    ///
    /// - Documentation: [FUNCTION STATS](https:/valkey.io/commands/function-stats)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Map](https:/valkey.io/topics/protocol/#maps): information about the function that's currently running and information about the available execution engines.
    @inlinable
    public func functionStats() async throws -> RESPToken.Map {
        try await send(command: FUNCTION.STATS())
    }

    /// Sets the debug mode of server-side Lua scripts.
    ///
    /// - Documentation: [SCRIPT DEBUG](https:/valkey.io/commands/script-debug)
    /// - Version: 3.2.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func scriptDebug(mode: SCRIPT.DEBUG.Mode) async throws {
        _ = try await send(command: SCRIPT.DEBUG(mode: mode))
    }

    /// Determines whether server-side Lua scripts exist in the script cache.
    ///
    /// - Documentation: [SCRIPT EXISTS](https:/valkey.io/commands/script-exists)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): an array of integers that correspond to the specified SHA1 digest arguments.
    @inlinable
    public func scriptExists<Sha1: RESPStringRenderable>(sha1: [Sha1]) async throws -> RESPToken.Array {
        try await send(command: SCRIPT.EXISTS(sha1: sha1))
    }

    /// Removes all server-side Lua scripts from the script cache.
    ///
    /// - Documentation: [SCRIPT FLUSH](https:/valkey.io/commands/script-flush)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the number of scripts in cache
    /// - Categories: @slow, @scripting
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func scriptFlush(flushType: SCRIPT.FLUSH.FlushType? = nil) async throws {
        _ = try await send(command: SCRIPT.FLUSH(flushType: flushType))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [SCRIPT HELP](https:/valkey.io/commands/script-help)
    /// - Version: 5.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of sub-commands and their descriptions.
    @inlinable
    public func scriptHelp() async throws -> RESPToken.Array {
        try await send(command: SCRIPT.HELP())
    }

    /// Terminates a server-side Lua script during execution.
    ///
    /// - Documentation: [SCRIPT KILL](https:/valkey.io/commands/script-kill)
    /// - Version: 2.6.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func scriptKill() async throws {
        _ = try await send(command: SCRIPT.KILL())
    }

    /// Loads a server-side Lua script to the script cache.
    ///
    /// - Documentation: [SCRIPT LOAD](https:/valkey.io/commands/script-load)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the length in bytes of the script body.
    /// - Categories: @slow, @scripting
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the SHA1 digest of the script added into the script cache.
    @inlinable
    public func scriptLoad<Script: RESPStringRenderable>(script: Script) async throws -> SCRIPT.LOAD.Response {
        try await send(command: SCRIPT.LOAD(script: script))
    }

}
