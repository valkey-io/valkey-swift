//
// This source file is part of the valkey-swift project
// Copyright (c) 2025 the valkey-swift project authors
//
// See LICENSE.txt for license information
// SPDX-License-Identifier: Apache-2.0
//
// This file is autogenerated by ValkeyCommandsBuilder

extension FUNCTION {
    public typealias LOADResponse = String
}

extension FUNCTION.LIST {
    public typealias Response = [ResponseElement]
    public struct ResponseElement: RESPTokenDecodable, Sendable {
        public struct Script: RESPTokenDecodable, Sendable {
            let name: String
            let description: String?
            let flags: [String]

            public init(fromRESP token: RESPToken) throws {
                let map = try [String: RESPToken](fromRESP: token)
                guard let name = map["name"] else { throw RESPParsingError(code: .unexpectedType, buffer: token.base) }
                guard let description = map["description"] else { throw RESPParsingError(code: .unexpectedType, buffer: token.base) }
                guard let flags = map["flags"] else { throw RESPParsingError(code: .unexpectedType, buffer: token.base) }
                self.name = try String(fromRESP: name)
                self.description = try String?(fromRESP: description)
                self.flags = try [String](fromRESP: flags)
            }
        }
        let libraryName: String
        let engine: String
        let functions: [Script]
        let libraryCode: String?

        public init(fromRESP token: RESPToken) throws {
            let map = try [String: RESPToken](fromRESP: token)
            guard let libraryName = map["library_name"] else { throw RESPParsingError(code: .unexpectedType, buffer: token.base) }
            guard let engine = map["engine"] else { throw RESPParsingError(code: .unexpectedType, buffer: token.base) }
            guard let functions = map["functions"] else { throw RESPParsingError(code: .unexpectedType, buffer: token.base) }
            let libraryCode = map["library_code"]
            self.libraryName = try String(fromRESP: libraryName)
            self.engine = try String(fromRESP: engine)
            self.functions = try [Script](fromRESP: functions)
            self.libraryCode = try libraryCode.map { try String(fromRESP: $0) }
        }
    }
}

extension FUNCTION.LOAD {
    public typealias Response = FUNCTION.LOADResponse
}

extension FUNCTION.STATS {

}

extension SCRIPT {
    public typealias LOADResponse = String
    public typealias EXISTSResponse = [Int]
    public typealias SHOWResponse = String
}

extension SCRIPT.LOAD {
    public typealias Response = SCRIPT.LOADResponse
}

extension SCRIPT.EXISTS {
    public typealias Response = SCRIPT.EXISTSResponse
}

extension SCRIPT.SHOW {
    public typealias Response = SCRIPT.SHOWResponse
}
