//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 Apple Inc. and the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// A container for Pub/Sub commands.
public enum PUBSUB {
    /// Returns the active channels.
    public struct CHANNELS: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var pattern: String?

        @inlinable public init(pattern: String? = nil) {
            self.pattern = pattern
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("PUBSUB", "CHANNELS", pattern)
        }
    }

    /// Returns helpful text about the different subcommands.
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("PUBSUB", "HELP")
        }
    }

    /// Returns a count of unique pattern subscriptions.
    public struct NUMPAT: ValkeyCommand {
        public typealias Response = Int

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("PUBSUB", "NUMPAT")
        }
    }

    /// Returns a count of subscribers to channels.
    public struct NUMSUB: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var channel: [String]

        @inlinable public init(channel: [String] = []) {
            self.channel = channel
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("PUBSUB", "NUMSUB", channel)
        }
    }

    /// Returns the active shard channels.
    public struct SHARDCHANNELS: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var pattern: String?

        @inlinable public init(pattern: String? = nil) {
            self.pattern = pattern
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("PUBSUB", "SHARDCHANNELS", pattern)
        }
    }

    /// Returns the count of subscribers of shard channels.
    public struct SHARDNUMSUB: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var shardchannel: [String]

        @inlinable public init(shardchannel: [String] = []) {
            self.shardchannel = shardchannel
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("PUBSUB", "SHARDNUMSUB", shardchannel)
        }
    }

}

/// Listens for messages published to channels that match one or more patterns.
public struct PSUBSCRIBE: ValkeyCommand {
    public var pattern: [String]

    @inlinable public init(pattern: [String]) {
        self.pattern = pattern
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("PSUBSCRIBE", pattern)
    }
}

/// Posts a message to a channel.
public struct PUBLISH<Channel: RESPStringRenderable, Message: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var channel: Channel
    public var message: Message

    @inlinable public init(channel: Channel, message: Message) {
        self.channel = channel
        self.message = message
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("PUBLISH", RESPBulkString(channel), RESPBulkString(message))
    }
}

/// Stops listening to messages published to channels that match one or more patterns.
public struct PUNSUBSCRIBE: ValkeyCommand {
    public var pattern: [String]

    @inlinable public init(pattern: [String] = []) {
        self.pattern = pattern
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("PUNSUBSCRIBE", pattern)
    }
}

/// Post a message to a shard channel
public struct SPUBLISH<Shardchannel: RESPStringRenderable, Message: RESPStringRenderable>: ValkeyCommand {
    public typealias Response = Int

    public var shardchannel: Shardchannel
    public var message: Message

    @inlinable public init(shardchannel: Shardchannel, message: Message) {
        self.shardchannel = shardchannel
        self.message = message
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SPUBLISH", RESPBulkString(shardchannel), RESPBulkString(message))
    }
}

/// Listens for messages published to shard channels.
public struct SSUBSCRIBE<Shardchannel: RESPStringRenderable>: ValkeyCommand {
    public var shardchannel: [Shardchannel]

    @inlinable public init(shardchannel: [Shardchannel]) {
        self.shardchannel = shardchannel
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SSUBSCRIBE", shardchannel.map { RESPBulkString($0) })
    }
}

/// Listens for messages published to channels.
public struct SUBSCRIBE<Channel: RESPStringRenderable>: ValkeyCommand {
    public var channel: [Channel]

    @inlinable public init(channel: [Channel]) {
        self.channel = channel
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SUBSCRIBE", channel.map { RESPBulkString($0) })
    }
}

/// Stops listening to messages posted to shard channels.
public struct SUNSUBSCRIBE: ValkeyCommand {
    public var shardchannel: [String]

    @inlinable public init(shardchannel: [String] = []) {
        self.shardchannel = shardchannel
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SUNSUBSCRIBE", shardchannel)
    }
}

/// Stops listening to messages posted to channels.
public struct UNSUBSCRIBE: ValkeyCommand {
    public var channel: [String]

    @inlinable public init(channel: [String] = []) {
        self.channel = channel
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("UNSUBSCRIBE", channel)
    }
}

extension ValkeyConnectionProtocol {
    /// Posts a message to a channel.
    ///
    /// - Documentation: [PUBLISH](https:/valkey.io/commands/publish)
    /// - Available: 2.0.0
    /// - Complexity: O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).
    /// - Returns: [Integer]: The number of clients that received the message. Note that in a Cluster, only clients that are connected to the same node as the publishing client are included in the count.
    @inlinable
    public func publish<Channel: RESPStringRenderable, Message: RESPStringRenderable>(channel: Channel, message: Message) async throws -> Int {
        try await send(command: PUBLISH(channel: channel, message: message))
    }

    /// Returns the active channels.
    ///
    /// - Documentation: [PUBSUB CHANNELS](https:/valkey.io/commands/pubsub-channels)
    /// - Available: 2.8.0
    /// - Complexity: O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)
    /// - Returns: [Array]: A list of active channels, optionally matching the specified pattern.
    @inlinable
    public func pubsubChannels(pattern: String? = nil) async throws -> RESPToken.Array {
        try await send(command: PUBSUB.CHANNELS(pattern: pattern))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [PUBSUB HELP](https:/valkey.io/commands/pubsub-help)
    /// - Available: 6.2.0
    /// - Complexity: O(1)
    /// - Returns: [Array]: Helpful text about subcommands.
    @inlinable
    public func pubsubHelp() async throws -> RESPToken.Array {
        try await send(command: PUBSUB.HELP())
    }

    /// Returns a count of unique pattern subscriptions.
    ///
    /// - Documentation: [PUBSUB NUMPAT](https:/valkey.io/commands/pubsub-numpat)
    /// - Available: 2.8.0
    /// - Complexity: O(1)
    /// - Returns: [Integer]: The number of patterns all the clients are subscribed to.
    @inlinable
    public func pubsubNumpat() async throws -> Int {
        try await send(command: PUBSUB.NUMPAT())
    }

    /// Returns a count of subscribers to channels.
    ///
    /// - Documentation: [PUBSUB NUMSUB](https:/valkey.io/commands/pubsub-numsub)
    /// - Available: 2.8.0
    /// - Complexity: O(N) for the NUMSUB subcommand, where N is the number of requested channels
    /// - Returns: [Array]: The number of subscribers per channel, each even element (including 0th) is channel name, each odd element is the number of subscribers.
    @inlinable
    public func pubsubNumsub(channel: [String] = []) async throws -> RESPToken.Array {
        try await send(command: PUBSUB.NUMSUB(channel: channel))
    }

    /// Returns the active shard channels.
    ///
    /// - Documentation: [PUBSUB SHARDCHANNELS](https:/valkey.io/commands/pubsub-shardchannels)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).
    /// - Returns: [Array]: A list of active channels, optionally matching the specified pattern.
    @inlinable
    public func pubsubShardchannels(pattern: String? = nil) async throws -> RESPToken.Array {
        try await send(command: PUBSUB.SHARDCHANNELS(pattern: pattern))
    }

    /// Returns the count of subscribers of shard channels.
    ///
    /// - Documentation: [PUBSUB SHARDNUMSUB](https:/valkey.io/commands/pubsub-shardnumsub)
    /// - Available: 7.0.0
    /// - Complexity: O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels
    /// - Returns: [Array]: The number of subscribers per shard channel, each even element (including 0th) is channel name, each odd element is the number of subscribers.
    @inlinable
    public func pubsubShardnumsub(shardchannel: [String] = []) async throws -> RESPToken.Array {
        try await send(command: PUBSUB.SHARDNUMSUB(shardchannel: shardchannel))
    }

    /// Post a message to a shard channel
    ///
    /// - Documentation: [SPUBLISH](https:/valkey.io/commands/spublish)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the number of clients subscribed to the receiving shard channel.
    /// - Returns: [Integer]: The number of clients that received the message. Note that in a Cluster, only clients that are connected to the same node as the publishing client are included in the count.
    @inlinable
    public func spublish<Shardchannel: RESPStringRenderable, Message: RESPStringRenderable>(
        shardchannel: Shardchannel,
        message: Message
    ) async throws -> Int {
        try await send(command: SPUBLISH(shardchannel: shardchannel, message: message))
    }

}
