//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// A container for Access List Control commands.
@_documentation(visibility: internal)
public enum ACL {
    /// Lists the ACL categories, or the commands inside a category.
    @_documentation(visibility: internal)
    public struct CAT: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var category: String?

        @inlinable public init(category: String? = nil) {
            self.category = category
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "CAT", category)
        }
    }

    /// Deletes ACL users, and terminates their connections.
    @_documentation(visibility: internal)
    public struct DELUSER<Username: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = Int

        public var usernames: [Username]

        @inlinable public init(usernames: [Username]) {
            self.usernames = usernames
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "DELUSER", usernames.map { RESPBulkString($0) })
        }
    }

    /// Simulates the execution of a command by a user, without executing the command.
    @_documentation(visibility: internal)
    public struct DRYRUN<Username: RESPStringRenderable, Command: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = ByteBuffer?

        public var username: Username
        public var command: Command
        public var args: [String]

        @inlinable public init(username: Username, command: Command, args: [String] = []) {
            self.username = username
            self.command = command
            self.args = args
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "DRYRUN", RESPBulkString(username), RESPBulkString(command), args)
        }
    }

    /// Generates a pseudorandom, secure password that can be used to identify ACL users.
    @_documentation(visibility: internal)
    public struct GENPASS: ValkeyCommand {
        public typealias Response = ByteBuffer

        public var bits: Int?

        @inlinable public init(bits: Int? = nil) {
            self.bits = bits
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "GENPASS", bits)
        }
    }

    /// Lists the ACL rules of a user.
    @_documentation(visibility: internal)
    public struct GETUSER<Username: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Map?

        public var username: Username

        @inlinable public init(username: Username) {
            self.username = username
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "GETUSER", RESPBulkString(username))
        }
    }

    /// Returns helpful text about the different subcommands.
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "HELP")
        }
    }

    /// Dumps the effective rules in ACL file format.
    @_documentation(visibility: internal)
    public struct LIST: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "LIST")
        }
    }

    /// Reloads the rules from the configured ACL file.
    @_documentation(visibility: internal)
    public struct LOAD: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "LOAD")
        }
    }

    /// Lists recent security events generated due to ACL rules.
    @_documentation(visibility: internal)
    public struct LOG: ValkeyCommand {
        public enum Operation: RESPRenderable, Sendable, Hashable {
            case count(Int)
            case reset

            @inlinable
            public var respEntries: Int {
                switch self {
                case .count(let count): count.respEntries
                case .reset: "RESET".respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .count(let count): count.encode(into: &commandEncoder)
                case .reset: "RESET".encode(into: &commandEncoder)
                }
            }
        }
        public typealias Response = RESPToken.Array?

        public var operation: Operation?

        @inlinable public init(operation: Operation? = nil) {
            self.operation = operation
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "LOG", operation)
        }
    }

    /// Saves the effective ACL rules in the configured ACL file.
    @_documentation(visibility: internal)
    public struct SAVE: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "SAVE")
        }
    }

    /// Creates and modifies an ACL user and its rules.
    @_documentation(visibility: internal)
    public struct SETUSER<Username: RESPStringRenderable>: ValkeyCommand {
        public var username: Username
        public var rules: [String]

        @inlinable public init(username: Username, rules: [String] = []) {
            self.username = username
            self.rules = rules
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "SETUSER", RESPBulkString(username), rules)
        }
    }

    /// Lists all ACL users.
    @_documentation(visibility: internal)
    public struct USERS: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "USERS")
        }
    }

    /// Returns the authenticated username of the current connection.
    @_documentation(visibility: internal)
    public struct WHOAMI: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("ACL", "WHOAMI")
        }
    }

}

extension COMMAND {
    /// Returns a count of commands.
    @_documentation(visibility: internal)
    public struct COUNT: ValkeyCommand {
        public typealias Response = Int

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMAND", "COUNT")
        }
    }

    /// Returns documentary information about one, multiple or all commands.
    @_documentation(visibility: internal)
    public struct DOCS: ValkeyCommand {
        public typealias Response = RESPToken.Map

        public var commandNames: [String]

        @inlinable public init(commandNames: [String] = []) {
            self.commandNames = commandNames
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMAND", "DOCS", commandNames)
        }
    }

    /// Extracts the key names from an arbitrary command.
    @_documentation(visibility: internal)
    public struct GETKEYS<Command: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var command: Command
        public var args: [String]

        @inlinable public init(command: Command, args: [String] = []) {
            self.command = command
            self.args = args
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMAND", "GETKEYS", RESPBulkString(command), args)
        }
    }

    /// Extracts the key names and access flags for an arbitrary command.
    @_documentation(visibility: internal)
    public struct GETKEYSANDFLAGS<Command: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var command: Command
        public var args: [String]

        @inlinable public init(command: Command, args: [String] = []) {
            self.command = command
            self.args = args
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMAND", "GETKEYSANDFLAGS", RESPBulkString(command), args)
        }
    }

    /// Returns helpful text about the different subcommands.
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMAND", "HELP")
        }
    }

    /// Returns information about one, multiple or all commands.
    @_documentation(visibility: internal)
    public struct INFO: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var commandNames: [String]

        @inlinable public init(commandNames: [String] = []) {
            self.commandNames = commandNames
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMAND", "INFO", commandNames)
        }
    }

    /// Returns a list of command names.
    @_documentation(visibility: internal)
    public struct LIST: ValkeyCommand {
        public enum Filterby: RESPRenderable, Sendable, Hashable {
            case moduleName(String)
            case category(String)
            case pattern(String)

            @inlinable
            public var respEntries: Int {
                switch self {
                case .moduleName(let moduleName): RESPWithToken("MODULE", moduleName).respEntries
                case .category(let category): RESPWithToken("ACLCAT", category).respEntries
                case .pattern(let pattern): RESPWithToken("PATTERN", pattern).respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .moduleName(let moduleName): RESPWithToken("MODULE", moduleName).encode(into: &commandEncoder)
                case .category(let category): RESPWithToken("ACLCAT", category).encode(into: &commandEncoder)
                case .pattern(let pattern): RESPWithToken("PATTERN", pattern).encode(into: &commandEncoder)
                }
            }
        }
        public typealias Response = RESPToken.Array

        public var filterby: Filterby?

        @inlinable public init(filterby: Filterby? = nil) {
            self.filterby = filterby
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMAND", "LIST", RESPWithToken("FILTERBY", filterby))
        }
    }

}

/// A container for command log commands.
@_documentation(visibility: internal)
public enum COMMANDLOG {
    /// Returns the specified command log's entries.
    @_documentation(visibility: internal)
    public struct GET: ValkeyCommand {
        public enum _Type: RESPRenderable, Sendable, Hashable {
            case slow(String)
            case largeRequest(String)
            case largeReply(String)

            @inlinable
            public var respEntries: Int {
                switch self {
                case .slow(let slow): slow.respEntries
                case .largeRequest(let largeRequest): largeRequest.respEntries
                case .largeReply(let largeReply): largeReply.respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .slow(let slow): slow.encode(into: &commandEncoder)
                case .largeRequest(let largeRequest): largeRequest.encode(into: &commandEncoder)
                case .largeReply(let largeReply): largeReply.encode(into: &commandEncoder)
                }
            }
        }
        public typealias Response = RESPToken.Array

        public var count: Int
        public var type: _Type

        @inlinable public init(count: Int, type: _Type) {
            self.count = count
            self.type = type
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMANDLOG", "GET", count, type)
        }
    }

    /// Show helpful text about the different subcommands
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMANDLOG", "HELP")
        }
    }

    /// Returns the number of entries in the specified type of command log.
    @_documentation(visibility: internal)
    public struct LEN: ValkeyCommand {
        public enum _Type: RESPRenderable, Sendable, Hashable {
            case slow(String)
            case largeRequest(String)
            case largeReply(String)

            @inlinable
            public var respEntries: Int {
                switch self {
                case .slow(let slow): slow.respEntries
                case .largeRequest(let largeRequest): largeRequest.respEntries
                case .largeReply(let largeReply): largeReply.respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .slow(let slow): slow.encode(into: &commandEncoder)
                case .largeRequest(let largeRequest): largeRequest.encode(into: &commandEncoder)
                case .largeReply(let largeReply): largeReply.encode(into: &commandEncoder)
                }
            }
        }
        public typealias Response = Int

        public var type: _Type

        @inlinable public init(type: _Type) {
            self.type = type
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMANDLOG", "LEN", type)
        }
    }

    /// Clears all entries from the specified type of command log.
    @_documentation(visibility: internal)
    public struct RESET: ValkeyCommand {
        public enum _Type: RESPRenderable, Sendable, Hashable {
            case slow(String)
            case largeRequest(String)
            case largeReply(String)

            @inlinable
            public var respEntries: Int {
                switch self {
                case .slow(let slow): slow.respEntries
                case .largeRequest(let largeRequest): largeRequest.respEntries
                case .largeReply(let largeReply): largeReply.respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .slow(let slow): slow.encode(into: &commandEncoder)
                case .largeRequest(let largeRequest): largeRequest.encode(into: &commandEncoder)
                case .largeReply(let largeReply): largeReply.encode(into: &commandEncoder)
                }
            }
        }
        public var type: _Type

        @inlinable public init(type: _Type) {
            self.type = type
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("COMMANDLOG", "RESET", type)
        }
    }

}

/// A container for server configuration commands.
@_documentation(visibility: internal)
public enum CONFIG {
    /// Returns the effective values of configuration parameters.
    @_documentation(visibility: internal)
    public struct GET<Parameter: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Map

        public var parameters: [Parameter]

        @inlinable public init(parameters: [Parameter]) {
            self.parameters = parameters
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CONFIG", "GET", parameters.map { RESPBulkString($0) })
        }
    }

    /// Returns helpful text about the different subcommands.
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CONFIG", "HELP")
        }
    }

    /// Resets the server's statistics.
    @_documentation(visibility: internal)
    public struct RESETSTAT: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CONFIG", "RESETSTAT")
        }
    }

    /// Persists the effective configuration to file.
    @_documentation(visibility: internal)
    public struct REWRITE: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CONFIG", "REWRITE")
        }
    }

    /// Sets configuration parameters in-flight.
    @_documentation(visibility: internal)
    public struct SET<Parameter: RESPStringRenderable, Value: RESPStringRenderable>: ValkeyCommand {
        public struct Data: RESPRenderable, Sendable, Hashable {
            @usableFromInline let parameter: Parameter
            @usableFromInline let value: Value

            @inlinable public init(parameter: Parameter, value: Value) {
                self.parameter = parameter
                self.value = value
            }

            @inlinable
            public var respEntries: Int {
                RESPBulkString(parameter).respEntries + RESPBulkString(value).respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                RESPBulkString(parameter).encode(into: &commandEncoder)
                RESPBulkString(value).encode(into: &commandEncoder)
            }
        }
        public var data: [Data]

        @inlinable public init(data: [Data]) {
            self.data = data
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CONFIG", "SET", data)
        }
    }

}

/// A container for latency diagnostics commands.
@_documentation(visibility: internal)
public enum LATENCY {
    /// Returns a human-readable latency analysis report.
    @_documentation(visibility: internal)
    public struct DOCTOR: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("LATENCY", "DOCTOR")
        }
    }

    /// Returns a latency graph for an event.
    @_documentation(visibility: internal)
    public struct GRAPH<Event: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = ByteBuffer

        public var event: Event

        @inlinable public init(event: Event) {
            self.event = event
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("LATENCY", "GRAPH", RESPBulkString(event))
        }
    }

    /// Returns helpful text about the different subcommands.
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("LATENCY", "HELP")
        }
    }

    /// Returns the cumulative distribution of latencies of a subset or all commands.
    @_documentation(visibility: internal)
    public struct HISTOGRAM: ValkeyCommand {
        public typealias Response = RESPToken.Map

        public var commands: [String]

        @inlinable public init(commands: [String] = []) {
            self.commands = commands
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("LATENCY", "HISTOGRAM", commands)
        }
    }

    /// Returns timestamp-latency samples for an event.
    @_documentation(visibility: internal)
    public struct HISTORY<Event: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var event: Event

        @inlinable public init(event: Event) {
            self.event = event
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("LATENCY", "HISTORY", RESPBulkString(event))
        }
    }

    /// Returns the latest latency samples for all events.
    @_documentation(visibility: internal)
    public struct LATEST: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("LATENCY", "LATEST")
        }
    }

    /// Resets the latency data for one or more events.
    @_documentation(visibility: internal)
    public struct RESET: ValkeyCommand {
        public typealias Response = Int

        public var events: [String]

        @inlinable public init(events: [String] = []) {
            self.events = events
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("LATENCY", "RESET", events)
        }
    }

}

/// A container for memory diagnostics commands.
@_documentation(visibility: internal)
public enum MEMORY {
    /// Outputs a memory problems report.
    @_documentation(visibility: internal)
    public struct DOCTOR: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MEMORY", "DOCTOR")
        }
    }

    /// Returns helpful text about the different subcommands.
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MEMORY", "HELP")
        }
    }

    /// Returns the allocator statistics.
    @_documentation(visibility: internal)
    public struct MALLOCSTATS: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MEMORY", "MALLOC-STATS")
        }
    }

    /// Asks the allocator to release memory.
    @_documentation(visibility: internal)
    public struct PURGE: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MEMORY", "PURGE")
        }
    }

    /// Returns details about memory usage.
    @_documentation(visibility: internal)
    public struct STATS: ValkeyCommand {
        public typealias Response = RESPToken.Map

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MEMORY", "STATS")
        }
    }

    /// Estimates the memory usage of a key.
    @_documentation(visibility: internal)
    public struct USAGE: ValkeyCommand {
        public typealias Response = Int?

        public var key: ValkeyKey
        public var count: Int?

        @inlinable public init(_ key: ValkeyKey, count: Int? = nil) {
            self.key = key
            self.count = count
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        public var isReadOnly: Bool { true }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MEMORY", "USAGE", key, RESPWithToken("SAMPLES", count))
        }
    }

}

/// A container for module commands.
@_documentation(visibility: internal)
public enum MODULE {
    /// Returns helpful text about the different subcommands.
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MODULE", "HELP")
        }
    }

    /// Returns all loaded modules.
    @_documentation(visibility: internal)
    public struct LIST: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MODULE", "LIST")
        }
    }

    /// Loads a module.
    @_documentation(visibility: internal)
    public struct LOAD<Path: RESPStringRenderable>: ValkeyCommand {
        public var path: Path
        public var args: [String]

        @inlinable public init(path: Path, args: [String] = []) {
            self.path = path
            self.args = args
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MODULE", "LOAD", RESPBulkString(path), args)
        }
    }

    /// Loads a module using extended parameters.
    @_documentation(visibility: internal)
    public struct LOADEX<Path: RESPStringRenderable>: ValkeyCommand {
        public struct Configs: RESPRenderable, Sendable, Hashable {
            @usableFromInline let name: String
            @usableFromInline let value: String

            @inlinable public init(name: String, value: String) {
                self.name = name
                self.value = value
            }

            @inlinable
            public var respEntries: Int {
                name.respEntries + value.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                name.encode(into: &commandEncoder)
                value.encode(into: &commandEncoder)
            }
        }
        public var path: Path
        public var configs: [Configs]
        public var args: [String]

        @inlinable public init(path: Path, configs: [Configs] = [], args: [String] = []) {
            self.path = path
            self.configs = configs
            self.args = args
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MODULE", "LOADEX", RESPBulkString(path), RESPWithToken("CONFIG", configs), RESPWithToken("ARGS", args))
        }
    }

    /// Unloads a module.
    @_documentation(visibility: internal)
    public struct UNLOAD<Name: RESPStringRenderable>: ValkeyCommand {
        public var name: Name

        @inlinable public init(name: Name) {
            self.name = name
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("MODULE", "UNLOAD", RESPBulkString(name))
        }
    }

}

/// A container for slow log commands.
@_documentation(visibility: internal)
public enum SLOWLOG {
    /// Returns the slow log's entries.
    @_documentation(visibility: internal)
    public struct GET: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var count: Int?

        @inlinable public init(count: Int? = nil) {
            self.count = count
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SLOWLOG", "GET", count)
        }
    }

    /// Show helpful text about the different subcommands
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SLOWLOG", "HELP")
        }
    }

    /// Returns the number of entries in the slow log.
    @_documentation(visibility: internal)
    public struct LEN: ValkeyCommand {
        public typealias Response = Int

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SLOWLOG", "LEN")
        }
    }

    /// Clears all entries from the slow log.
    @_documentation(visibility: internal)
    public struct RESET: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SLOWLOG", "RESET")
        }
    }

}

/// Asynchronously rewrites the append-only file to disk.
@_documentation(visibility: internal)
public struct BGREWRITEAOF: ValkeyCommand {
    public typealias Response = ByteBuffer

    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BGREWRITEAOF")
    }
}

/// Asynchronously saves the database(s) to disk.
@_documentation(visibility: internal)
public struct BGSAVE: ValkeyCommand {
    public enum Operation: RESPRenderable, Sendable, Hashable {
        case schedule
        case cancel

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .schedule: "SCHEDULE".encode(into: &commandEncoder)
            case .cancel: "CANCEL".encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = String

    public var operation: Operation?

    @inlinable public init(operation: Operation? = nil) {
        self.operation = operation
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("BGSAVE", operation)
    }
}

/// Returns detailed information about all commands.
@_documentation(visibility: internal)
public struct COMMAND: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("COMMAND")
    }
}

/// Returns the number of keys in the database.
@_documentation(visibility: internal)
public struct DBSIZE: ValkeyCommand {
    public typealias Response = Int

    @inlinable public init() {
    }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("DBSIZE")
    }
}

/// Starts a coordinated failover from a server to one of its replicas.
@_documentation(visibility: internal)
public struct FAILOVER: ValkeyCommand {
    public struct Target: RESPRenderable, Sendable, Hashable {
        @usableFromInline let host: String
        @usableFromInline let port: Int
        @usableFromInline let force: Bool

        @inlinable public init(host: String, port: Int, force: Bool = false) {
            self.host = host
            self.port = port
            self.force = force
        }

        @inlinable
        public var respEntries: Int {
            host.respEntries + port.respEntries + RESPPureToken("FORCE", force).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            host.encode(into: &commandEncoder)
            port.encode(into: &commandEncoder)
            RESPPureToken("FORCE", force).encode(into: &commandEncoder)
        }
    }
    public var target: Target?
    public var abort: Bool
    public var milliseconds: Int?

    @inlinable public init(target: Target? = nil, abort: Bool = false, milliseconds: Int? = nil) {
        self.target = target
        self.abort = abort
        self.milliseconds = milliseconds
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("FAILOVER", RESPWithToken("TO", target), RESPPureToken("ABORT", abort), RESPWithToken("TIMEOUT", milliseconds))
    }
}

/// Removes all keys from all databases.
@_documentation(visibility: internal)
public struct FLUSHALL: ValkeyCommand {
    public enum FlushType: RESPRenderable, Sendable, Hashable {
        case async
        case sync

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .async: "ASYNC".encode(into: &commandEncoder)
            case .sync: "SYNC".encode(into: &commandEncoder)
            }
        }
    }
    public var flushType: FlushType?

    @inlinable public init(flushType: FlushType? = nil) {
        self.flushType = flushType
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("FLUSHALL", flushType)
    }
}

/// Remove all keys from the current database.
@_documentation(visibility: internal)
public struct FLUSHDB: ValkeyCommand {
    public enum FlushType: RESPRenderable, Sendable, Hashable {
        case async
        case sync

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .async: "ASYNC".encode(into: &commandEncoder)
            case .sync: "SYNC".encode(into: &commandEncoder)
            }
        }
    }
    public var flushType: FlushType?

    @inlinable public init(flushType: FlushType? = nil) {
        self.flushType = flushType
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("FLUSHDB", flushType)
    }
}

/// Returns information and statistics about the server.
@_documentation(visibility: internal)
public struct INFO: ValkeyCommand {
    public typealias Response = ByteBuffer

    public var sections: [String]

    @inlinable public init(sections: [String] = []) {
        self.sections = sections
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("INFO", sections)
    }
}

/// Returns the Unix timestamp of the last successful save to disk.
@_documentation(visibility: internal)
public struct LASTSAVE: ValkeyCommand {
    public typealias Response = Int

    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LASTSAVE")
    }
}

/// Displays computer art and the server version
@_documentation(visibility: internal)
public struct LOLWUT: ValkeyCommand {
    public typealias Response = ByteBuffer

    public var version: Int?

    @inlinable public init(version: Int? = nil) {
        self.version = version
    }

    public var isReadOnly: Bool { true }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("LOLWUT", RESPWithToken("VERSION", version))
    }
}

/// Listens for all requests received by the server in real-time.
@_documentation(visibility: internal)
public struct MONITOR: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("MONITOR")
    }
}

/// An internal command used in replication.
@_documentation(visibility: internal)
public struct PSYNC<Replicationid: RESPStringRenderable>: ValkeyCommand {
    public var replicationid: Replicationid
    public var offset: Int

    @inlinable public init(replicationid: Replicationid, offset: Int) {
        self.replicationid = replicationid
        self.offset = offset
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("PSYNC", RESPBulkString(replicationid), offset)
    }
}

/// Configures a server as replica of another, or promotes it to a primary.
@_documentation(visibility: internal)
public struct REPLICAOF: ValkeyCommand {
    public struct ArgsHostPort: RESPRenderable, Sendable, Hashable {
        @usableFromInline let host: String
        @usableFromInline let port: Int

        @inlinable public init(host: String, port: Int) {
            self.host = host
            self.port = port
        }

        @inlinable
        public var respEntries: Int {
            host.respEntries + port.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            host.encode(into: &commandEncoder)
            port.encode(into: &commandEncoder)
        }
    }
    public struct ArgsNoOne: RESPRenderable, Sendable, Hashable {

        @inlinable public init() {
        }

        @inlinable
        public var respEntries: Int {
            "NO".respEntries + "ONE".respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            "NO".encode(into: &commandEncoder)
            "ONE".encode(into: &commandEncoder)
        }
    }
    public enum Args: RESPRenderable, Sendable, Hashable {
        case hostPort(ArgsHostPort)
        case noOne

        @inlinable
        public var respEntries: Int {
            switch self {
            case .hostPort(let hostPort): hostPort.respEntries
            case .noOne: ArgsNoOne().respEntries
            }
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .hostPort(let hostPort): hostPort.encode(into: &commandEncoder)
            case .noOne: ArgsNoOne().encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = ByteBuffer

    public var args: Args

    @inlinable public init(args: Args) {
        self.args = args
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("REPLICAOF", args)
    }
}

/// Returns the replication role.
@_documentation(visibility: internal)
public struct ROLE: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ROLE")
    }
}

/// Synchronously saves the database(s) to disk.
@_documentation(visibility: internal)
public struct SAVE: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SAVE")
    }
}

/// Synchronously saves the database(s) to disk and shuts down the server.
@_documentation(visibility: internal)
public struct SHUTDOWN: ValkeyCommand {
    public enum AbortSelectorSaveSelectorBlockSaveSelector: RESPRenderable, Sendable, Hashable {
        case nosave
        case save

        @inlinable
        public var respEntries: Int { 1 }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .nosave: "NOSAVE".encode(into: &commandEncoder)
            case .save: "SAVE".encode(into: &commandEncoder)
            }
        }
    }
    public struct AbortSelectorSaveSelectorBlock: RESPRenderable, Sendable, Hashable {
        @usableFromInline let saveSelector: AbortSelectorSaveSelectorBlockSaveSelector?
        @usableFromInline let now: Bool
        @usableFromInline let force: Bool

        @inlinable public init(saveSelector: AbortSelectorSaveSelectorBlockSaveSelector? = nil, now: Bool = false, force: Bool = false) {
            self.saveSelector = saveSelector
            self.now = now
            self.force = force
        }

        @inlinable
        public var respEntries: Int {
            saveSelector.respEntries + RESPPureToken("NOW", now).respEntries + RESPPureToken("FORCE", force).respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            saveSelector.encode(into: &commandEncoder)
            RESPPureToken("NOW", now).encode(into: &commandEncoder)
            RESPPureToken("FORCE", force).encode(into: &commandEncoder)
        }
    }
    public enum AbortSelector: RESPRenderable, Sendable, Hashable {
        case saveSelectorBlock(AbortSelectorSaveSelectorBlock)
        case abort

        @inlinable
        public var respEntries: Int {
            switch self {
            case .saveSelectorBlock(let saveSelectorBlock): saveSelectorBlock.respEntries
            case .abort: "ABORT".respEntries
            }
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .saveSelectorBlock(let saveSelectorBlock): saveSelectorBlock.encode(into: &commandEncoder)
            case .abort: "ABORT".encode(into: &commandEncoder)
            }
        }
    }
    public var abortSelector: AbortSelector?

    @inlinable public init(abortSelector: AbortSelector? = nil) {
        self.abortSelector = abortSelector
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SHUTDOWN", abortSelector)
    }
}

/// Sets a server as a replica of another, or promotes it to being a primary.
@_documentation(visibility: internal)
public struct SLAVEOF: ValkeyCommand {
    public struct ArgsHostPort: RESPRenderable, Sendable, Hashable {
        @usableFromInline let host: String
        @usableFromInline let port: Int

        @inlinable public init(host: String, port: Int) {
            self.host = host
            self.port = port
        }

        @inlinable
        public var respEntries: Int {
            host.respEntries + port.respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            host.encode(into: &commandEncoder)
            port.encode(into: &commandEncoder)
        }
    }
    public struct ArgsNoOne: RESPRenderable, Sendable, Hashable {

        @inlinable public init() {
        }

        @inlinable
        public var respEntries: Int {
            "NO".respEntries + "ONE".respEntries
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            "NO".encode(into: &commandEncoder)
            "ONE".encode(into: &commandEncoder)
        }
    }
    public enum Args: RESPRenderable, Sendable, Hashable {
        case hostPort(ArgsHostPort)
        case noOne

        @inlinable
        public var respEntries: Int {
            switch self {
            case .hostPort(let hostPort): hostPort.respEntries
            case .noOne: ArgsNoOne().respEntries
            }
        }

        @inlinable
        public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            switch self {
            case .hostPort(let hostPort): hostPort.encode(into: &commandEncoder)
            case .noOne: ArgsNoOne().encode(into: &commandEncoder)
            }
        }
    }
    public typealias Response = ByteBuffer

    public var args: Args

    @inlinable public init(args: Args) {
        self.args = args
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SLAVEOF", args)
    }
}

/// Swaps two databases.
@_documentation(visibility: internal)
public struct SWAPDB: ValkeyCommand {
    public var index1: Int
    public var index2: Int

    @inlinable public init(index1: Int, index2: Int) {
        self.index1 = index1
        self.index2 = index2
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SWAPDB", index1, index2)
    }
}

/// An internal command used in replication.
@_documentation(visibility: internal)
public struct SYNC: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("SYNC")
    }
}

/// Returns the server time.
@_documentation(visibility: internal)
public struct TIME: ValkeyCommand {
    public typealias Response = RESPToken.Array

    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("TIME")
    }
}

extension ValkeyClientProtocol {
    /// Lists the ACL categories, or the commands inside a category.
    ///
    /// - Documentation: [ACL CAT](https://valkey.io/commands/acl-cat)
    /// - Available: 6.0.0
    /// - Complexity: O(1) since the categories and commands are a fixed set.
    /// - Response: One of the following
    ///     * [Array]: In case `category` was not given, a list of existing ACL categories
    ///     * [Array]: In case `category` was given, list of commands that fall under the provided ACL category.
    @inlinable
    @discardableResult
    public func aclCat(category: String? = nil) async throws -> RESPToken.Array {
        try await execute(ACL.CAT(category: category))
    }

    /// Deletes ACL users, and terminates their connections.
    ///
    /// - Documentation: [ACL DELUSER](https://valkey.io/commands/acl-deluser)
    /// - Available: 6.0.0
    /// - Complexity: O(1) amortized time considering the typical user.
    /// - Response: [Integer]: The number of users that were deleted.
    @inlinable
    @discardableResult
    public func aclDeluser<Username: RESPStringRenderable>(usernames: [Username]) async throws -> Int {
        try await execute(ACL.DELUSER(usernames: usernames))
    }

    /// Simulates the execution of a command by a user, without executing the command.
    ///
    /// - Documentation: [ACL DRYRUN](https://valkey.io/commands/acl-dryrun)
    /// - Available: 7.0.0
    /// - Complexity: O(1).
    /// - Response: One of the following
    ///     * "OK": The given user may successfully execute the given command.
    ///     * [String]: The description of the problem, in case the user is not allowed to run the given command.
    @inlinable
    @discardableResult
    public func aclDryrun<Username: RESPStringRenderable, Command: RESPStringRenderable>(
        username: Username,
        command: Command,
        args: [String] = []
    ) async throws -> ByteBuffer? {
        try await execute(ACL.DRYRUN(username: username, command: command, args: args))
    }

    /// Generates a pseudorandom, secure password that can be used to identify ACL users.
    ///
    /// - Documentation: [ACL GENPASS](https://valkey.io/commands/acl-genpass)
    /// - Available: 6.0.0
    /// - Complexity: O(1)
    /// - Response: [String]: Pseudorandom data. By default it contains 64 bytes, representing 256 bits of data. If `bits` was given, the output string length is the number of specified bits (rounded to the next multiple of 4) divided by 4.
    @inlinable
    @discardableResult
    public func aclGenpass(bits: Int? = nil) async throws -> ByteBuffer {
        try await execute(ACL.GENPASS(bits: bits))
    }

    /// Lists the ACL rules of a user.
    ///
    /// - Documentation: [ACL GETUSER](https://valkey.io/commands/acl-getuser)
    /// - Available: 6.0.0
    /// - History:
    ///     * 6.2.0: Added Pub/Sub channel patterns.
    ///     * 7.0.0: Added selectors and changed the format of key and channel patterns from a list to their rule representation.
    /// - Complexity: O(N). Where N is the number of password, command and pattern rules that the user has.
    /// - Response: One of the following
    ///     * [Map]: A set of ACL rule definitions for the user.
    ///     * [Null]: If user does not exist
    @inlinable
    @discardableResult
    public func aclGetuser<Username: RESPStringRenderable>(username: Username) async throws -> RESPToken.Map? {
        try await execute(ACL.GETUSER(username: username))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [ACL HELP](https://valkey.io/commands/acl-help)
    /// - Available: 6.0.0
    /// - Complexity: O(1)
    /// - Response: [Array]: A list of subcommands and their description.
    @inlinable
    @discardableResult
    public func aclHelp() async throws -> RESPToken.Array {
        try await execute(ACL.HELP())
    }

    /// Dumps the effective rules in ACL file format.
    ///
    /// - Documentation: [ACL LIST](https://valkey.io/commands/acl-list)
    /// - Available: 6.0.0
    /// - Complexity: O(N). Where N is the number of configured users.
    /// - Response: [Array]: A list of currently active ACL rules.
    @inlinable
    @discardableResult
    public func aclList() async throws -> RESPToken.Array {
        try await execute(ACL.LIST())
    }

    /// Reloads the rules from the configured ACL file.
    ///
    /// - Documentation: [ACL LOAD](https://valkey.io/commands/acl-load)
    /// - Available: 6.0.0
    /// - Complexity: O(N). Where N is the number of configured users.
    @inlinable
    public func aclLoad() async throws {
        _ = try await execute(ACL.LOAD())
    }

    /// Lists recent security events generated due to ACL rules.
    ///
    /// - Documentation: [ACL LOG](https://valkey.io/commands/acl-log)
    /// - Available: 6.0.0
    /// - History:
    ///     * 7.2.0: Added entry ID, timestamp created, and timestamp last updated.
    /// - Complexity: O(N) with N being the number of entries shown.
    /// - Response: One of the following
    ///     * [Array]: In case `RESET` was not given, a list of recent ACL security events.
    ///     * "OK": In case `RESET` was given, OK indicates ACL log was cleared.
    @inlinable
    @discardableResult
    public func aclLog(operation: ACL.LOG.Operation? = nil) async throws -> RESPToken.Array? {
        try await execute(ACL.LOG(operation: operation))
    }

    /// Saves the effective ACL rules in the configured ACL file.
    ///
    /// - Documentation: [ACL SAVE](https://valkey.io/commands/acl-save)
    /// - Available: 6.0.0
    /// - Complexity: O(N). Where N is the number of configured users.
    @inlinable
    public func aclSave() async throws {
        _ = try await execute(ACL.SAVE())
    }

    /// Creates and modifies an ACL user and its rules.
    ///
    /// - Documentation: [ACL SETUSER](https://valkey.io/commands/acl-setuser)
    /// - Available: 6.0.0
    /// - History:
    ///     * 6.2.0: Added Pub/Sub channel patterns.
    ///     * 7.0.0: Added selectors and key based permissions.
    /// - Complexity: O(N). Where N is the number of rules provided.
    @inlinable
    public func aclSetuser<Username: RESPStringRenderable>(username: Username, rules: [String] = []) async throws {
        _ = try await execute(ACL.SETUSER(username: username, rules: rules))
    }

    /// Lists all ACL users.
    ///
    /// - Documentation: [ACL USERS](https://valkey.io/commands/acl-users)
    /// - Available: 6.0.0
    /// - Complexity: O(N). Where N is the number of configured users.
    /// - Response: [Array]: List of existing ACL users.
    @inlinable
    @discardableResult
    public func aclUsers() async throws -> RESPToken.Array {
        try await execute(ACL.USERS())
    }

    /// Returns the authenticated username of the current connection.
    ///
    /// - Documentation: [ACL WHOAMI](https://valkey.io/commands/acl-whoami)
    /// - Available: 6.0.0
    /// - Complexity: O(1)
    /// - Response: [String]: The username of the current connection.
    @inlinable
    @discardableResult
    public func aclWhoami() async throws -> ByteBuffer {
        try await execute(ACL.WHOAMI())
    }

    /// Asynchronously rewrites the append-only file to disk.
    ///
    /// - Documentation: [BGREWRITEAOF](https://valkey.io/commands/bgrewriteaof)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Response: [String]: A simple string reply indicating that the rewriting started or is about to start ASAP
    @inlinable
    @discardableResult
    public func bgrewriteaof() async throws -> ByteBuffer {
        try await execute(BGREWRITEAOF())
    }

    /// Asynchronously saves the database(s) to disk.
    ///
    /// - Documentation: [BGSAVE](https://valkey.io/commands/bgsave)
    /// - Available: 1.0.0
    /// - History:
    ///     * 3.2.2: Added the `SCHEDULE` option.
    ///     * 8.1.0: Added the `CANCEL` option.
    /// - Complexity: O(1)
    @inlinable
    @discardableResult
    public func bgsave(operation: BGSAVE.Operation? = nil) async throws -> String {
        try await execute(BGSAVE(operation: operation))
    }

    /// Returns detailed information about all commands.
    ///
    /// - Documentation: [COMMAND](https://valkey.io/commands/command)
    /// - Available: 2.8.13
    /// - Complexity: O(N) where N is the total number of commands
    @inlinable
    @discardableResult
    public func command() async throws -> COMMAND.Response {
        try await execute(COMMAND())
    }

    /// Returns a count of commands.
    ///
    /// - Documentation: [COMMAND COUNT](https://valkey.io/commands/command-count)
    /// - Available: 2.8.13
    /// - Complexity: O(1)
    /// - Response: [Integer]: Number of total commands in this server.
    @inlinable
    @discardableResult
    public func commandCount() async throws -> Int {
        try await execute(COMMAND.COUNT())
    }

    /// Returns documentary information about one, multiple or all commands.
    ///
    /// - Documentation: [COMMAND DOCS](https://valkey.io/commands/command-docs)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the number of commands to look up
    /// - Response: [Map]: A map where each key is a command name, and each value is the documentary information
    @inlinable
    @discardableResult
    public func commandDocs(commandNames: [String] = []) async throws -> RESPToken.Map {
        try await execute(COMMAND.DOCS(commandNames: commandNames))
    }

    /// Extracts the key names from an arbitrary command.
    ///
    /// - Documentation: [COMMAND GETKEYS](https://valkey.io/commands/command-getkeys)
    /// - Available: 2.8.13
    /// - Complexity: O(N) where N is the number of arguments to the command
    /// - Response: [Array]: List of keys from the given command.
    @inlinable
    @discardableResult
    public func commandGetkeys<Command: RESPStringRenderable>(command: Command, args: [String] = []) async throws -> RESPToken.Array {
        try await execute(COMMAND.GETKEYS(command: command, args: args))
    }

    /// Extracts the key names and access flags for an arbitrary command.
    ///
    /// - Documentation: [COMMAND GETKEYSANDFLAGS](https://valkey.io/commands/command-getkeysandflags)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the number of arguments to the command
    /// - Response: [Array]: List of keys from the given command and their usage flags.
    @inlinable
    @discardableResult
    public func commandGetkeysandflags<Command: RESPStringRenderable>(command: Command, args: [String] = []) async throws -> RESPToken.Array {
        try await execute(COMMAND.GETKEYSANDFLAGS(command: command, args: args))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [COMMAND HELP](https://valkey.io/commands/command-help)
    /// - Available: 5.0.0
    /// - Complexity: O(1)
    /// - Response: [Array]: Helpful text about subcommands.
    @inlinable
    @discardableResult
    public func commandHelp() async throws -> RESPToken.Array {
        try await execute(COMMAND.HELP())
    }

    /// Returns information about one, multiple or all commands.
    ///
    /// - Documentation: [COMMAND INFO](https://valkey.io/commands/command-info)
    /// - Available: 2.8.13
    /// - History:
    ///     * 7.0.0: Allowed to be called with no argument to get info on all commands.
    /// - Complexity: O(N) where N is the number of commands to look up
    /// - Response: One of the following
    ///     * [Array]: Command does not exist.
    ///     * [Array]: Command info array output.
    @inlinable
    @discardableResult
    public func commandInfo(commandNames: [String] = []) async throws -> RESPToken.Array {
        try await execute(COMMAND.INFO(commandNames: commandNames))
    }

    /// Returns a list of command names.
    ///
    /// - Documentation: [COMMAND LIST](https://valkey.io/commands/command-list)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the total number of commands
    /// - Response: [Array]: Command name.
    @inlinable
    @discardableResult
    public func commandList(filterby: COMMAND.LIST.Filterby? = nil) async throws -> RESPToken.Array {
        try await execute(COMMAND.LIST(filterby: filterby))
    }

    /// Returns the specified command log's entries.
    ///
    /// - Documentation: [COMMANDLOG GET](https://valkey.io/commands/commandlog-get)
    /// - Available: 8.1.0
    /// - Complexity: O(N) where N is the number of entries returned
    /// - Response: [Array]: Entries from the command log in chronological order.
    @inlinable
    @discardableResult
    public func commandlogGet(count: Int, type: COMMANDLOG.GET._Type) async throws -> RESPToken.Array {
        try await execute(COMMANDLOG.GET(count: count, type: type))
    }

    /// Show helpful text about the different subcommands
    ///
    /// - Documentation: [COMMANDLOG HELP](https://valkey.io/commands/commandlog-help)
    /// - Available: 8.1.0
    /// - Complexity: O(1)
    /// - Response: [Array]: Helpful text about subcommands.
    @inlinable
    @discardableResult
    public func commandlogHelp() async throws -> RESPToken.Array {
        try await execute(COMMANDLOG.HELP())
    }

    /// Returns the number of entries in the specified type of command log.
    ///
    /// - Documentation: [COMMANDLOG LEN](https://valkey.io/commands/commandlog-len)
    /// - Available: 8.1.0
    /// - Complexity: O(1)
    /// - Response: [Integer]: Number of entries in the command log.
    @inlinable
    @discardableResult
    public func commandlogLen(type: COMMANDLOG.LEN._Type) async throws -> Int {
        try await execute(COMMANDLOG.LEN(type: type))
    }

    /// Clears all entries from the specified type of command log.
    ///
    /// - Documentation: [COMMANDLOG RESET](https://valkey.io/commands/commandlog-reset)
    /// - Available: 8.1.0
    /// - Complexity: O(N) where N is the number of entries in the commandlog
    @inlinable
    public func commandlogReset(type: COMMANDLOG.RESET._Type) async throws {
        _ = try await execute(COMMANDLOG.RESET(type: type))
    }

    /// Returns the effective values of configuration parameters.
    ///
    /// - Documentation: [CONFIG GET](https://valkey.io/commands/config-get)
    /// - Available: 2.0.0
    /// - History:
    ///     * 7.0.0: Added the ability to pass multiple pattern parameters in one call
    /// - Complexity: O(N) when N is the number of configuration parameters provided
    @inlinable
    @discardableResult
    public func configGet<Parameter: RESPStringRenderable>(parameters: [Parameter]) async throws -> RESPToken.Map {
        try await execute(CONFIG.GET(parameters: parameters))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [CONFIG HELP](https://valkey.io/commands/config-help)
    /// - Available: 5.0.0
    /// - Complexity: O(1)
    /// - Response: [Array]: Helpful text about subcommands.
    @inlinable
    @discardableResult
    public func configHelp() async throws -> RESPToken.Array {
        try await execute(CONFIG.HELP())
    }

    /// Resets the server's statistics.
    ///
    /// - Documentation: [CONFIG RESETSTAT](https://valkey.io/commands/config-resetstat)
    /// - Available: 2.0.0
    /// - Complexity: O(1)
    @inlinable
    public func configResetstat() async throws {
        _ = try await execute(CONFIG.RESETSTAT())
    }

    /// Persists the effective configuration to file.
    ///
    /// - Documentation: [CONFIG REWRITE](https://valkey.io/commands/config-rewrite)
    /// - Available: 2.8.0
    /// - Complexity: O(1)
    @inlinable
    public func configRewrite() async throws {
        _ = try await execute(CONFIG.REWRITE())
    }

    /// Sets configuration parameters in-flight.
    ///
    /// - Documentation: [CONFIG SET](https://valkey.io/commands/config-set)
    /// - Available: 2.0.0
    /// - History:
    ///     * 7.0.0: Added the ability to set multiple parameters in one call.
    /// - Complexity: O(N) when N is the number of configuration parameters provided
    @inlinable
    public func configSet<Parameter: RESPStringRenderable, Value: RESPStringRenderable>(data: [CONFIG.SET<Parameter, Value>.Data]) async throws {
        _ = try await execute(CONFIG.SET(data: data))
    }

    /// Returns the number of keys in the database.
    ///
    /// - Documentation: [DBSIZE](https://valkey.io/commands/dbsize)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Response: [Integer]: The number of keys in the currently-selected database.
    @inlinable
    public func dbsize() async throws -> Int {
        try await execute(DBSIZE())
    }

    /// Starts a coordinated failover from a server to one of its replicas.
    ///
    /// - Documentation: [FAILOVER](https://valkey.io/commands/failover)
    /// - Available: 6.2.0
    /// - Complexity: O(1)
    @inlinable
    public func failover(target: FAILOVER.Target? = nil, abort: Bool = false, milliseconds: Int? = nil) async throws {
        _ = try await execute(FAILOVER(target: target, abort: abort, milliseconds: milliseconds))
    }

    /// Removes all keys from all databases.
    ///
    /// - Documentation: [FLUSHALL](https://valkey.io/commands/flushall)
    /// - Available: 1.0.0
    /// - History:
    ///     * 4.0.0: Added the `ASYNC` flushing mode modifier.
    ///     * 6.2.0: Added the `SYNC` flushing mode modifier.
    /// - Complexity: O(N) where N is the total number of keys in all databases
    @inlinable
    public func flushall(flushType: FLUSHALL.FlushType? = nil) async throws {
        _ = try await execute(FLUSHALL(flushType: flushType))
    }

    /// Remove all keys from the current database.
    ///
    /// - Documentation: [FLUSHDB](https://valkey.io/commands/flushdb)
    /// - Available: 1.0.0
    /// - History:
    ///     * 4.0.0: Added the `ASYNC` flushing mode modifier.
    ///     * 6.2.0: Added the `SYNC` flushing mode modifier.
    /// - Complexity: O(N) where N is the number of keys in the selected database
    @inlinable
    public func flushdb(flushType: FLUSHDB.FlushType? = nil) async throws {
        _ = try await execute(FLUSHDB(flushType: flushType))
    }

    /// Returns information and statistics about the server.
    ///
    /// - Documentation: [INFO](https://valkey.io/commands/info)
    /// - Available: 1.0.0
    /// - History:
    ///     * 7.0.0: Added support for taking multiple section arguments.
    /// - Complexity: O(1)
    /// - Response: [String]: A map of info fields, one field per line in the form of <field>:<value> where the value can be a comma separated map like <key>=<val>. Also contains section header lines starting with `#` and blank lines.
    @inlinable
    @discardableResult
    public func info(sections: [String] = []) async throws -> ByteBuffer {
        try await execute(INFO(sections: sections))
    }

    /// Returns the Unix timestamp of the last successful save to disk.
    ///
    /// - Documentation: [LASTSAVE](https://valkey.io/commands/lastsave)
    /// - Available: 1.0.0
    /// - Complexity: O(1)
    /// - Response: [Integer]: UNIX TIME of the last DB save executed with success.
    @inlinable
    @discardableResult
    public func lastsave() async throws -> Int {
        try await execute(LASTSAVE())
    }

    /// Returns a human-readable latency analysis report.
    ///
    /// - Documentation: [LATENCY DOCTOR](https://valkey.io/commands/latency-doctor)
    /// - Available: 2.8.13
    /// - Complexity: O(1)
    /// - Response: [String]: A human readable latency analysis report.
    @inlinable
    @discardableResult
    public func latencyDoctor() async throws -> ByteBuffer {
        try await execute(LATENCY.DOCTOR())
    }

    /// Returns a latency graph for an event.
    ///
    /// - Documentation: [LATENCY GRAPH](https://valkey.io/commands/latency-graph)
    /// - Available: 2.8.13
    /// - Complexity: O(1)
    /// - Response: [String]: Latency graph
    @inlinable
    @discardableResult
    public func latencyGraph<Event: RESPStringRenderable>(event: Event) async throws -> ByteBuffer {
        try await execute(LATENCY.GRAPH(event: event))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [LATENCY HELP](https://valkey.io/commands/latency-help)
    /// - Available: 2.8.13
    /// - Complexity: O(1)
    /// - Response: [Array]: Helpful text about subcommands.
    @inlinable
    @discardableResult
    public func latencyHelp() async throws -> RESPToken.Array {
        try await execute(LATENCY.HELP())
    }

    /// Returns the cumulative distribution of latencies of a subset or all commands.
    ///
    /// - Documentation: [LATENCY HISTOGRAM](https://valkey.io/commands/latency-histogram)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the number of commands with latency information being retrieved.
    /// - Response: [Map]: A map where each key is a command name, and each value is a map with the total calls, and an inner map of the histogram time buckets.
    @inlinable
    @discardableResult
    public func latencyHistogram(commands: [String] = []) async throws -> RESPToken.Map {
        try await execute(LATENCY.HISTOGRAM(commands: commands))
    }

    /// Returns timestamp-latency samples for an event.
    ///
    /// - Documentation: [LATENCY HISTORY](https://valkey.io/commands/latency-history)
    /// - Available: 2.8.13
    /// - Complexity: O(1)
    /// - Response: [Array]: An array where each element is a two elements array representing the timestamp and the latency of the event.
    @inlinable
    @discardableResult
    public func latencyHistory<Event: RESPStringRenderable>(event: Event) async throws -> RESPToken.Array {
        try await execute(LATENCY.HISTORY(event: event))
    }

    /// Returns the latest latency samples for all events.
    ///
    /// - Documentation: [LATENCY LATEST](https://valkey.io/commands/latency-latest)
    /// - Available: 2.8.13
    /// - Complexity: O(1)
    /// - Response: [Array]: An array where each element is an array representing the event name, timestamp, latest and all-time latency measurements.
    @inlinable
    @discardableResult
    public func latencyLatest() async throws -> RESPToken.Array {
        try await execute(LATENCY.LATEST())
    }

    /// Resets the latency data for one or more events.
    ///
    /// - Documentation: [LATENCY RESET](https://valkey.io/commands/latency-reset)
    /// - Available: 2.8.13
    /// - Complexity: O(1)
    /// - Response: [Integer]: Number of event time series that were reset.
    @inlinable
    @discardableResult
    public func latencyReset(events: [String] = []) async throws -> Int {
        try await execute(LATENCY.RESET(events: events))
    }

    /// Displays computer art and the server version
    ///
    /// - Documentation: [LOLWUT](https://valkey.io/commands/lolwut)
    /// - Available: 5.0.0
    /// - Response: [String]: String containing the generative computer art, and a text with the server version.
    @inlinable
    public func lolwut(version: Int? = nil) async throws -> ByteBuffer {
        try await execute(LOLWUT(version: version))
    }

    /// Outputs a memory problems report.
    ///
    /// - Documentation: [MEMORY DOCTOR](https://valkey.io/commands/memory-doctor)
    /// - Available: 4.0.0
    /// - Complexity: O(1)
    /// - Response: [String]: Memory problems report.
    @inlinable
    @discardableResult
    public func memoryDoctor() async throws -> ByteBuffer {
        try await execute(MEMORY.DOCTOR())
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [MEMORY HELP](https://valkey.io/commands/memory-help)
    /// - Available: 4.0.0
    /// - Complexity: O(1)
    /// - Response: [Array]: Helpful text about subcommands.
    @inlinable
    @discardableResult
    public func memoryHelp() async throws -> RESPToken.Array {
        try await execute(MEMORY.HELP())
    }

    /// Returns the allocator statistics.
    ///
    /// - Documentation: [MEMORY MALLOC-STATS](https://valkey.io/commands/memory-malloc-stats)
    /// - Available: 4.0.0
    /// - Complexity: Depends on how much memory is allocated, could be slow
    /// - Response: [String]: The memory allocator's internal statistics report.
    @inlinable
    @discardableResult
    public func memoryMallocStats() async throws -> ByteBuffer {
        try await execute(MEMORY.MALLOCSTATS())
    }

    /// Asks the allocator to release memory.
    ///
    /// - Documentation: [MEMORY PURGE](https://valkey.io/commands/memory-purge)
    /// - Available: 4.0.0
    /// - Complexity: Depends on how much memory is allocated, could be slow
    @inlinable
    public func memoryPurge() async throws {
        _ = try await execute(MEMORY.PURGE())
    }

    /// Returns details about memory usage.
    ///
    /// - Documentation: [MEMORY STATS](https://valkey.io/commands/memory-stats)
    /// - Available: 4.0.0
    /// - Complexity: O(1)
    /// - Response: [Map]: Memory usage details.
    @inlinable
    @discardableResult
    public func memoryStats() async throws -> RESPToken.Map {
        try await execute(MEMORY.STATS())
    }

    /// Estimates the memory usage of a key.
    ///
    /// - Documentation: [MEMORY USAGE](https://valkey.io/commands/memory-usage)
    /// - Available: 4.0.0
    /// - Complexity: O(N) where N is the number of samples.
    /// - Response: One of the following
    ///     * [Integer]: Number of bytes that a key and its value require to be stored in RAM.
    ///     * [Null]: Key does not exist.
    @inlinable
    public func memoryUsage(_ key: ValkeyKey, count: Int? = nil) async throws -> Int? {
        try await execute(MEMORY.USAGE(key, count: count))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [MODULE HELP](https://valkey.io/commands/module-help)
    /// - Available: 5.0.0
    /// - Complexity: O(1)
    /// - Response: [Array]: Helpful text about subcommands.
    @inlinable
    @discardableResult
    public func moduleHelp() async throws -> RESPToken.Array {
        try await execute(MODULE.HELP())
    }

    /// Returns all loaded modules.
    ///
    /// - Documentation: [MODULE LIST](https://valkey.io/commands/module-list)
    /// - Available: 4.0.0
    /// - Complexity: O(N) where N is the number of loaded modules.
    /// - Response: [Array]: Returns information about the modules loaded to the server.
    @inlinable
    @discardableResult
    public func moduleList() async throws -> RESPToken.Array {
        try await execute(MODULE.LIST())
    }

    /// Loads a module.
    ///
    /// - Documentation: [MODULE LOAD](https://valkey.io/commands/module-load)
    /// - Available: 4.0.0
    /// - Complexity: O(1)
    @inlinable
    public func moduleLoad<Path: RESPStringRenderable>(path: Path, args: [String] = []) async throws {
        _ = try await execute(MODULE.LOAD(path: path, args: args))
    }

    /// Loads a module using extended parameters.
    ///
    /// - Documentation: [MODULE LOADEX](https://valkey.io/commands/module-loadex)
    /// - Available: 7.0.0
    /// - Complexity: O(1)
    @inlinable
    public func moduleLoadex<Path: RESPStringRenderable>(path: Path, configs: [MODULE.LOADEX<Path>.Configs] = [], args: [String] = []) async throws {
        _ = try await execute(MODULE.LOADEX(path: path, configs: configs, args: args))
    }

    /// Unloads a module.
    ///
    /// - Documentation: [MODULE UNLOAD](https://valkey.io/commands/module-unload)
    /// - Available: 4.0.0
    /// - Complexity: O(1)
    @inlinable
    public func moduleUnload<Name: RESPStringRenderable>(name: Name) async throws {
        _ = try await execute(MODULE.UNLOAD(name: name))
    }

    /// Listens for all requests received by the server in real-time.
    ///
    /// - Documentation: [MONITOR](https://valkey.io/commands/monitor)
    /// - Available: 1.0.0
    @inlinable
    @discardableResult
    public func monitor() async throws -> MONITOR.Response {
        try await execute(MONITOR())
    }

    /// An internal command used in replication.
    ///
    /// - Documentation: [PSYNC](https://valkey.io/commands/psync)
    /// - Available: 2.8.0
    @inlinable
    @discardableResult
    public func psync<Replicationid: RESPStringRenderable>(replicationid: Replicationid, offset: Int) async throws -> RESPToken {
        try await execute(PSYNC(replicationid: replicationid, offset: offset))
    }

    /// Configures a server as replica of another, or promotes it to a primary.
    ///
    /// - Documentation: [REPLICAOF](https://valkey.io/commands/replicaof)
    /// - Available: 5.0.0
    /// - Complexity: O(1)
    /// - Response: [String]: ReplicaOf status.
    @inlinable
    @discardableResult
    public func replicaof(args: REPLICAOF.Args) async throws -> ByteBuffer {
        try await execute(REPLICAOF(args: args))
    }

    /// Returns the replication role.
    ///
    /// - Documentation: [ROLE](https://valkey.io/commands/role)
    /// - Available: 2.8.12
    /// - Complexity: O(1)
    @inlinable
    @discardableResult
    public func role() async throws -> ROLE.Response {
        try await execute(ROLE())
    }

    /// Synchronously saves the database(s) to disk.
    ///
    /// - Documentation: [SAVE](https://valkey.io/commands/save)
    /// - Available: 1.0.0
    /// - Complexity: O(N) where N is the total number of keys in all databases
    @inlinable
    public func save() async throws {
        _ = try await execute(SAVE())
    }

    /// Synchronously saves the database(s) to disk and shuts down the server.
    ///
    /// - Documentation: [SHUTDOWN](https://valkey.io/commands/shutdown)
    /// - Available: 1.0.0
    /// - History:
    ///     * 7.0.0: Added the `NOW`, `FORCE` and `ABORT` modifiers.
    /// - Complexity: O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)
    /// - Response: "OK": OK if ABORT was specified and shutdown was aborted. On successful shutdown, nothing is returned since the server quits and the connection is closed. On failure, an error is returned.
    @inlinable
    public func shutdown(abortSelector: SHUTDOWN.AbortSelector? = nil) async throws {
        _ = try await execute(SHUTDOWN(abortSelector: abortSelector))
    }

    /// Sets a server as a replica of another, or promotes it to being a primary.
    ///
    /// - Documentation: [SLAVEOF](https://valkey.io/commands/slaveof)
    /// - Available: 1.0.0
    /// - Deprecated since: 5.0.0. Replaced by `REPLICAOF`.
    /// - Complexity: O(1)
    /// - Response: [String]: SlaveOf status.
    @inlinable
    @discardableResult
    public func slaveof(args: SLAVEOF.Args) async throws -> ByteBuffer {
        try await execute(SLAVEOF(args: args))
    }

    /// Returns the slow log's entries.
    ///
    /// - Documentation: [SLOWLOG GET](https://valkey.io/commands/slowlog-get)
    /// - Available: 2.2.12
    /// - History:
    ///     * 4.0.0: Added client IP address, port and name to the reply.
    /// - Deprecated since: 8.1.0. Replaced by `COMMANDLOG GET <count> SLOW`.
    /// - Complexity: O(N) where N is the number of entries returned
    /// - Response: [Array]: Entries from the slow log in chronological order.
    @inlinable
    @discardableResult
    public func slowlogGet(count: Int? = nil) async throws -> RESPToken.Array {
        try await execute(SLOWLOG.GET(count: count))
    }

    /// Show helpful text about the different subcommands
    ///
    /// - Documentation: [SLOWLOG HELP](https://valkey.io/commands/slowlog-help)
    /// - Available: 6.2.0
    /// - Deprecated since: 8.1.0. Replaced by `COMMANDLOG HELP`.
    /// - Complexity: O(1)
    /// - Response: [Array]: Helpful text about subcommands.
    @inlinable
    @discardableResult
    public func slowlogHelp() async throws -> RESPToken.Array {
        try await execute(SLOWLOG.HELP())
    }

    /// Returns the number of entries in the slow log.
    ///
    /// - Documentation: [SLOWLOG LEN](https://valkey.io/commands/slowlog-len)
    /// - Available: 2.2.12
    /// - Deprecated since: 8.1.0. Replaced by `COMMANDLOG LEN SLOW`.
    /// - Complexity: O(1)
    /// - Response: [Integer]: Number of entries in the slow log.
    @inlinable
    @discardableResult
    public func slowlogLen() async throws -> Int {
        try await execute(SLOWLOG.LEN())
    }

    /// Clears all entries from the slow log.
    ///
    /// - Documentation: [SLOWLOG RESET](https://valkey.io/commands/slowlog-reset)
    /// - Available: 2.2.12
    /// - Deprecated since: 8.1.0. Replaced by `COMMANDLOG RESET SLOW`.
    /// - Complexity: O(N) where N is the number of entries in the slowlog
    @inlinable
    public func slowlogReset() async throws {
        _ = try await execute(SLOWLOG.RESET())
    }

    /// Swaps two databases.
    ///
    /// - Documentation: [SWAPDB](https://valkey.io/commands/swapdb)
    /// - Available: 4.0.0
    /// - Complexity: O(N) where N is the count of clients watching or blocking on keys from both databases.
    @inlinable
    public func swapdb(index1: Int, index2: Int) async throws {
        _ = try await execute(SWAPDB(index1: index1, index2: index2))
    }

    /// An internal command used in replication.
    ///
    /// - Documentation: [SYNC](https://valkey.io/commands/sync)
    /// - Available: 1.0.0
    @inlinable
    @discardableResult
    public func sync() async throws -> SYNC.Response {
        try await execute(SYNC())
    }

    /// Returns the server time.
    ///
    /// - Documentation: [TIME](https://valkey.io/commands/time)
    /// - Available: 2.6.0
    /// - Complexity: O(1)
    /// - Response: [Array]: Array containing two elements: Unix time in seconds and microseconds.
    @inlinable
    @discardableResult
    public func time() async throws -> RESPToken.Array {
        try await execute(TIME())
    }

}
