//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-valkey open source project
//
// Copyright (c) 2025 Apple Inc. and the swift-valkey project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-valkey project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// A container for Valkey Cluster commands.
public enum CLUSTER {
    /// Assigns new hash slots to a node.
    public struct ADDSLOTS: ValkeyCommand {
        public var slot: [Int]

        @inlinable public init(slot: [Int]) {
            self.slot = slot
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "ADDSLOTS", slot)
        }
    }

    /// Assigns new hash slot ranges to a node.
    public struct ADDSLOTSRANGE: ValkeyCommand {
        public struct Range: RESPRenderable, Sendable {
            @usableFromInline let startSlot: Int
            @usableFromInline let endSlot: Int


            @inlinable public init(startSlot: Int, endSlot: Int) {
                self.startSlot = startSlot
                self.endSlot = endSlot
            }

            @inlinable
            public var respEntries: Int {
                startSlot.respEntries + endSlot.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                startSlot.encode(into: &commandEncoder)
                endSlot.encode(into: &commandEncoder)
            }
        }
        public var range: [Range]

        @inlinable public init(range: [Range]) {
            self.range = range
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "ADDSLOTSRANGE", range)
        }
    }

    /// Advances the cluster config epoch.
    public struct BUMPEPOCH: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "BUMPEPOCH")
        }
    }

    /// Returns the number of active failure reports active for a node.
    public struct COUNTFAILUREREPORTS<NodeId: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = Int

        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "COUNT-FAILURE-REPORTS", RESPBulkString(nodeId))
        }
    }

    /// Returns the number of keys in a hash slot.
    public struct COUNTKEYSINSLOT: ValkeyCommand {
        public typealias Response = Int

        public var slot: Int

        @inlinable public init(slot: Int) {
            self.slot = slot
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "COUNTKEYSINSLOT", slot)
        }
    }

    /// Sets hash slots as unbound for a node.
    public struct DELSLOTS: ValkeyCommand {
        public var slot: [Int]

        @inlinable public init(slot: [Int]) {
            self.slot = slot
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "DELSLOTS", slot)
        }
    }

    /// Sets hash slot ranges as unbound for a node.
    public struct DELSLOTSRANGE: ValkeyCommand {
        public struct Range: RESPRenderable, Sendable {
            @usableFromInline let startSlot: Int
            @usableFromInline let endSlot: Int


            @inlinable public init(startSlot: Int, endSlot: Int) {
                self.startSlot = startSlot
                self.endSlot = endSlot
            }

            @inlinable
            public var respEntries: Int {
                startSlot.respEntries + endSlot.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                startSlot.encode(into: &commandEncoder)
                endSlot.encode(into: &commandEncoder)
            }
        }
        public var range: [Range]

        @inlinable public init(range: [Range]) {
            self.range = range
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "DELSLOTSRANGE", range)
        }
    }

    /// Forces a replica to perform a manual failover of its master.
    public struct FAILOVER: ValkeyCommand {
        public enum Options: RESPRenderable, Sendable {
            case force
            case takeover

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .force: "FORCE".encode(into: &commandEncoder)
                case .takeover: "TAKEOVER".encode(into: &commandEncoder)
                }
            }
        }
        public var options: Options?

        @inlinable public init(options: Options? = nil) {
            self.options = options
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "FAILOVER", options)
        }
    }

    /// Deletes all slots information from a node.
    public struct FLUSHSLOTS: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "FLUSHSLOTS")
        }
    }

    /// Removes a node from the nodes table.
    public struct FORGET<NodeId: RESPStringRenderable>: ValkeyCommand {
        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "FORGET", RESPBulkString(nodeId))
        }
    }

    /// Returns the key names in a hash slot.
    public struct GETKEYSINSLOT: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var slot: Int
        public var count: Int

        @inlinable public init(slot: Int, count: Int) {
            self.slot = slot
            self.count = count
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "GETKEYSINSLOT", slot, count)
        }
    }

    /// Returns helpful text about the different subcommands.
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "HELP")
        }
    }

    /// Returns information about the state of a node.
    public struct INFO: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "INFO")
        }
    }

    /// Returns the hash slot for a key.
    public struct KEYSLOT<Key: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = Int

        public var key: Key

        @inlinable public init(key: Key) {
            self.key = key
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "KEYSLOT", RESPBulkString(key))
        }
    }

    /// Returns a list of all TCP links to and from peer nodes.
    public struct LINKS: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "LINKS")
        }
    }

    /// Forces a node to handshake with another node.
    public struct MEET<Ip: RESPStringRenderable>: ValkeyCommand {
        public var ip: Ip
        public var port: Int
        public var clusterBusPort: Int?

        @inlinable public init(ip: Ip, port: Int, clusterBusPort: Int? = nil) {
            self.ip = ip
            self.port = port
            self.clusterBusPort = clusterBusPort
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "MEET", RESPBulkString(ip), port, clusterBusPort)
        }
    }

    /// Returns the ID of a node.
    public struct MYID: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "MYID")
        }
    }

    /// Returns the shard ID of a node.
    public struct MYSHARDID: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "MYSHARDID")
        }
    }

    /// Returns the cluster configuration for a node.
    public struct NODES: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "NODES")
        }
    }

    /// Lists the replica nodes of a master node.
    public struct REPLICAS<NodeId: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "REPLICAS", RESPBulkString(nodeId))
        }
    }

    /// Configure a node as replica of a master node.
    public struct REPLICATE<NodeId: RESPStringRenderable>: ValkeyCommand {
        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "REPLICATE", RESPBulkString(nodeId))
        }
    }

    /// Resets a node.
    public struct RESET: ValkeyCommand {
        public enum ResetType: RESPRenderable, Sendable {
            case hard
            case soft

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .hard: "HARD".encode(into: &commandEncoder)
                case .soft: "SOFT".encode(into: &commandEncoder)
                }
            }
        }
        public var resetType: ResetType?

        @inlinable public init(resetType: ResetType? = nil) {
            self.resetType = resetType
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "RESET", resetType)
        }
    }

    /// Forces a node to save the cluster configuration to disk.
    public struct SAVECONFIG: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SAVECONFIG")
        }
    }

    /// Sets the configuration epoch for a new node.
    public struct SETCONFIGEPOCH: ValkeyCommand {
        public var configEpoch: Int

        @inlinable public init(configEpoch: Int) {
            self.configEpoch = configEpoch
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SET-CONFIG-EPOCH", configEpoch)
        }
    }

    /// Binds a hash slot to a node.
    public struct SETSLOT: ValkeyCommand {
        public enum Subcommand: RESPRenderable, Sendable {
            case importing(String)
            case migrating(String)
            case node(String)
            case stable

            @inlinable
            public var respEntries: Int {
                switch self {
                case .importing(let importing): RESPWithToken("IMPORTING", importing).respEntries
                case .migrating(let migrating): RESPWithToken("MIGRATING", migrating).respEntries
                case .node(let node): RESPWithToken("NODE", node).respEntries
                case .stable: "STABLE".respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .importing(let importing): RESPWithToken("IMPORTING", importing).encode(into: &commandEncoder)
                case .migrating(let migrating): RESPWithToken("MIGRATING", migrating).encode(into: &commandEncoder)
                case .node(let node): RESPWithToken("NODE", node).encode(into: &commandEncoder)
                case .stable: "STABLE".encode(into: &commandEncoder)
                }
            }
        }
        public var slot: Int
        public var subcommand: Subcommand

        @inlinable public init(slot: Int, subcommand: Subcommand) {
            self.slot = slot
            self.subcommand = subcommand
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SETSLOT", slot, subcommand)
        }
    }

    /// Returns the mapping of cluster slots to shards.
    public struct SHARDS: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SHARDS")
        }
    }

    /// Lists the replica nodes of a master node.
    @available(*, deprecated, message: "Since 5.0.0. Replaced by `CLUSTER REPLICAS`.")
    public struct SLAVES<NodeId: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SLAVES", RESPBulkString(nodeId))
        }
    }

    /// Returns the mapping of cluster slots to nodes.
    @available(*, deprecated, message: "Since 7.0.0. Replaced by `CLUSTER SHARDS`.")
    public struct SLOTS: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SLOTS")
        }
    }

}

/// Signals that a cluster client is following an -ASK redirect.
public struct ASKING: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ASKING")
    }
}

/// Enables read-only queries for a connection to a Valkey Cluster replica node.
public struct READONLY: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("READONLY")
    }
}

/// Enables read-write queries for a connection to a Reids Cluster replica node.
public struct READWRITE: ValkeyCommand {
    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("READWRITE")
    }
}

extension ValkeyConnection {
    /// Signals that a cluster client is following an -ASK redirect.
    ///
    /// - Documentation: [ASKING](https:/valkey.io/commands/asking)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func asking() async throws {
        _ = try await send(command: ASKING())
    }

    /// Assigns new hash slots to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTS](https:/valkey.io/commands/cluster-addslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterAddslots(slot: [Int]) async throws {
        _ = try await send(command: CLUSTER.ADDSLOTS(slot: slot))
    }

    /// Assigns new hash slot ranges to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTSRANGE](https:/valkey.io/commands/cluster-addslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterAddslotsrange(range: [CLUSTER.ADDSLOTSRANGE.Range]) async throws {
        _ = try await send(command: CLUSTER.ADDSLOTSRANGE(range: range))
    }

    /// Advances the cluster config epoch.
    ///
    /// - Documentation: [CLUSTER BUMPEPOCH](https:/valkey.io/commands/cluster-bumpepoch)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: One of the following:
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): `BUMPED` if the epoch was incremented.
    ///     * [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): `STILL` if the node already has the greatest configured epoch in the cluster.
    @inlinable
    public func clusterBumpepoch() async throws -> CLUSTER.BUMPEPOCH.Response {
        try await send(command: CLUSTER.BUMPEPOCH())
    }

    /// Returns the number of active failure reports active for a node.
    ///
    /// - Documentation: [CLUSTER COUNT-FAILURE-REPORTS](https:/valkey.io/commands/cluster-count-failure-reports)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of failure reports
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): the number of active failure reports for the node.
    @inlinable
    public func clusterCountFailureReports<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws -> Int {
        try await send(command: CLUSTER.COUNTFAILUREREPORTS(nodeId: nodeId))
    }

    /// Returns the number of keys in a hash slot.
    ///
    /// - Documentation: [CLUSTER COUNTKEYSINSLOT](https:/valkey.io/commands/cluster-countkeysinslot)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): The number of keys in the specified hash slot, or an error if the hash slot is invalid.
    @inlinable
    public func clusterCountkeysinslot(slot: Int) async throws -> Int {
        try await send(command: CLUSTER.COUNTKEYSINSLOT(slot: slot))
    }

    /// Sets hash slots as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTS](https:/valkey.io/commands/cluster-delslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterDelslots(slot: [Int]) async throws {
        _ = try await send(command: CLUSTER.DELSLOTS(slot: slot))
    }

    /// Sets hash slot ranges as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTSRANGE](https:/valkey.io/commands/cluster-delslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterDelslotsrange(range: [CLUSTER.DELSLOTSRANGE.Range]) async throws {
        _ = try await send(command: CLUSTER.DELSLOTSRANGE(range: range))
    }

    /// Forces a replica to perform a manual failover of its master.
    ///
    /// - Documentation: [CLUSTER FAILOVER](https:/valkey.io/commands/cluster-failover)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was accepted and a manual failover is going to be attempted. An error if the operation cannot be executed, for example if the client is connected to a node that is already a primary.
    @inlinable
    public func clusterFailover(options: CLUSTER.FAILOVER.Options? = nil) async throws {
        _ = try await send(command: CLUSTER.FAILOVER(options: options))
    }

    /// Deletes all slots information from a node.
    ///
    /// - Documentation: [CLUSTER FLUSHSLOTS](https:/valkey.io/commands/cluster-flushslots)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func clusterFlushslots() async throws {
        _ = try await send(command: CLUSTER.FLUSHSLOTS())
    }

    /// Removes a node from the nodes table.
    ///
    /// - Documentation: [CLUSTER FORGET](https:/valkey.io/commands/cluster-forget)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was executed successfully. Otherwise an error is returned.
    @inlinable
    public func clusterForget<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws {
        _ = try await send(command: CLUSTER.FORGET(nodeId: nodeId))
    }

    /// Returns the key names in a hash slot.
    ///
    /// - Documentation: [CLUSTER GETKEYSINSLOT](https:/valkey.io/commands/cluster-getkeysinslot)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of requested keys
    /// - Categories: @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): an array with up to count elements.
    @inlinable
    public func clusterGetkeysinslot(slot: Int, count: Int) async throws -> RESPToken.Array {
        try await send(command: CLUSTER.GETKEYSINSLOT(slot: slot, count: count))
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [CLUSTER HELP](https:/valkey.io/commands/cluster-help)
    /// - Version: 5.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of subcommands and their descriptions.
    @inlinable
    public func clusterHelp() async throws -> RESPToken.Array {
        try await send(command: CLUSTER.HELP())
    }

    /// Returns information about the state of a node.
    ///
    /// - Documentation: [CLUSTER INFO](https:/valkey.io/commands/cluster-info)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): A map between named fields and values in the form of `<field>:<value>` lines separated by newlines composed by the two bytes `CRLF`.
    @inlinable
    public func clusterInfo() async throws -> CLUSTER.INFO.Response {
        try await send(command: CLUSTER.INFO())
    }

    /// Returns the hash slot for a key.
    ///
    /// - Documentation: [CLUSTER KEYSLOT](https:/valkey.io/commands/cluster-keyslot)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of bytes in the key
    /// - Categories: @slow
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): The hash slot number for the specified key
    @inlinable
    public func clusterKeyslot<Key: RESPStringRenderable>(key: Key) async throws -> Int {
        try await send(command: CLUSTER.KEYSLOT(key: key))
    }

    /// Returns a list of all TCP links to and from peer nodes.
    ///
    /// - Documentation: [CLUSTER LINKS](https:/valkey.io/commands/cluster-links)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): an array of [Map](https:/valkey.io/topics/protocol/#maps) where each map contains various attributes and their values of a cluster link.
    @inlinable
    public func clusterLinks() async throws -> RESPToken.Array {
        try await send(command: CLUSTER.LINKS())
    }

    /// Forces a node to handshake with another node.
    ///
    /// - Documentation: [CLUSTER MEET](https:/valkey.io/commands/cluster-meet)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. If the port or cluster bus port number is out of range, or if an invalid address is specified, an error is returned.
    @inlinable
    public func clusterMeet<Ip: RESPStringRenderable>(ip: Ip, port: Int, clusterBusPort: Int? = nil) async throws {
        _ = try await send(command: CLUSTER.MEET(ip: ip, port: port, clusterBusPort: clusterBusPort))
    }

    /// Returns the ID of a node.
    ///
    /// - Documentation: [CLUSTER MYID](https:/valkey.io/commands/cluster-myid)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the node ID.
    @inlinable
    public func clusterMyid() async throws -> CLUSTER.MYID.Response {
        try await send(command: CLUSTER.MYID())
    }

    /// Returns the shard ID of a node.
    ///
    /// - Documentation: [CLUSTER MYSHARDID](https:/valkey.io/commands/cluster-myshardid)
    /// - Version: 7.2.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the node's shard ID.
    @inlinable
    public func clusterMyshardid() async throws -> CLUSTER.MYSHARDID.Response {
        try await send(command: CLUSTER.MYSHARDID())
    }

    /// Returns the cluster configuration for a node.
    ///
    /// - Documentation: [CLUSTER NODES](https:/valkey.io/commands/cluster-nodes)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): the serialized cluster configuration.
    @inlinable
    public func clusterNodes() async throws -> CLUSTER.NODES.Response {
        try await send(command: CLUSTER.NODES())
    }

    /// Lists the replica nodes of a master node.
    ///
    /// - Documentation: [CLUSTER REPLICAS](https:/valkey.io/commands/cluster-replicas)
    /// - Version: 5.0.0
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of replica nodes replicating from the specified primary node provided in the same format used by `CLUSTER NODES`.
    @inlinable
    public func clusterReplicas<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws -> RESPToken.Array {
        try await send(command: CLUSTER.REPLICAS(nodeId: nodeId))
    }

    /// Configure a node as replica of a master node.
    ///
    /// - Documentation: [CLUSTER REPLICATE](https:/valkey.io/commands/cluster-replicate)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterReplicate<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws {
        _ = try await send(command: CLUSTER.REPLICATE(nodeId: nodeId))
    }

    /// Resets a node.
    ///
    /// - Documentation: [CLUSTER RESET](https:/valkey.io/commands/cluster-reset)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterReset(resetType: CLUSTER.RESET.ResetType? = nil) async throws {
        _ = try await send(command: CLUSTER.RESET(resetType: resetType))
    }

    /// Forces a node to save the cluster configuration to disk.
    ///
    /// - Documentation: [CLUSTER SAVECONFIG](https:/valkey.io/commands/cluster-saveconfig)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterSaveconfig() async throws {
        _ = try await send(command: CLUSTER.SAVECONFIG())
    }

    /// Sets the configuration epoch for a new node.
    ///
    /// - Documentation: [CLUSTER SET-CONFIG-EPOCH](https:/valkey.io/commands/cluster-set-config-epoch)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterSetConfigEpoch(configEpoch: Int) async throws {
        _ = try await send(command: CLUSTER.SETCONFIGEPOCH(configEpoch: configEpoch))
    }

    /// Binds a hash slot to a node.
    ///
    /// - Documentation: [CLUSTER SETSLOT](https:/valkey.io/commands/cluster-setslot)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): all the sub-commands return `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterSetslot(slot: Int, subcommand: CLUSTER.SETSLOT.Subcommand) async throws {
        _ = try await send(command: CLUSTER.SETSLOT(slot: slot, subcommand: subcommand))
    }

    /// Returns the mapping of cluster slots to shards.
    ///
    /// - Documentation: [CLUSTER SHARDS](https:/valkey.io/commands/cluster-shards)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of cluster nodes
    /// - Categories: @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a nested list of [Map](https:/valkey.io/topics/protocol/#maps) of hash ranges and shard nodes describing individual shards.
    @inlinable
    public func clusterShards() async throws -> CLUSTER.SHARDS.Response {
        try await send(command: CLUSTER.SHARDS())
    }

    /// Lists the replica nodes of a master node.
    ///
    /// - Documentation: [CLUSTER SLAVES](https:/valkey.io/commands/cluster-slaves)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): a list of replica nodes replicating from the specified primary node provided in the same format used by `CLUSTER NODES`.
    @inlinable
    @available(*, deprecated, message: "Since 5.0.0. Replaced by `CLUSTER REPLICAS`.")
    public func clusterSlaves<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws -> RESPToken.Array {
        try await send(command: CLUSTER.SLAVES(nodeId: nodeId))
    }

    /// Returns the mapping of cluster slots to nodes.
    ///
    /// - Documentation: [CLUSTER SLOTS](https:/valkey.io/commands/cluster-slots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): nested list of slot ranges with networking information.
    @inlinable
    @available(*, deprecated, message: "Since 7.0.0. Replaced by `CLUSTER SHARDS`.")
    public func clusterSlots() async throws -> RESPToken.Array {
        try await send(command: CLUSTER.SLOTS())
    }

    /// Enables read-only queries for a connection to a Valkey Cluster replica node.
    ///
    /// - Documentation: [READONLY](https:/valkey.io/commands/readonly)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func readonly() async throws {
        _ = try await send(command: READONLY())
    }

    /// Enables read-write queries for a connection to a Reids Cluster replica node.
    ///
    /// - Documentation: [READWRITE](https:/valkey.io/commands/readwrite)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func readwrite() async throws {
        _ = try await send(command: READWRITE())
    }

}
