//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// A container for Cluster commands.
@_documentation(visibility: internal)
public enum CLUSTER {
    /// Assigns new hash slots to a node.
    @_documentation(visibility: internal)
    public struct ADDSLOTS: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER ADDSLOTS" }

        public var slots: [Int]

        @inlinable public init(slots: [Int]) {
            self.slots = slots
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "ADDSLOTS", slots)
        }
    }

    /// Assigns new hash slot ranges to a node.
    @_documentation(visibility: internal)
    public struct ADDSLOTSRANGE: ValkeyCommand {
        public struct Range: RESPRenderable, Sendable, Hashable {
            public var startSlot: Int
            public var endSlot: Int

            @inlinable
            public init(startSlot: Int, endSlot: Int) {
                self.startSlot = startSlot
                self.endSlot = endSlot
            }

            @inlinable
            public var respEntries: Int {
                startSlot.respEntries + endSlot.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                startSlot.encode(into: &commandEncoder)
                endSlot.encode(into: &commandEncoder)
            }
        }
        @inlinable public static var name: String { "CLUSTER ADDSLOTSRANGE" }

        public var ranges: [Range]

        @inlinable public init(ranges: [Range]) {
            self.ranges = ranges
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "ADDSLOTSRANGE", ranges)
        }
    }

    /// Advances the cluster config epoch.
    @_documentation(visibility: internal)
    public struct BUMPEPOCH: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public static var name: String { "CLUSTER BUMPEPOCH" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "BUMPEPOCH")
        }
    }

    /// Cancel all current ongoing slot migration operations.
    @_documentation(visibility: internal)
    public struct CANCELSLOTMIGRATIONS: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER CANCELSLOTMIGRATIONS" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "CANCELSLOTMIGRATIONS")
        }
    }

    /// Returns the number of active failure reports active for a node.
    @_documentation(visibility: internal)
    public struct COUNTFAILUREREPORTS<NodeId: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = Int

        @inlinable public static var name: String { "CLUSTER COUNT-FAILURE-REPORTS" }

        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "COUNT-FAILURE-REPORTS", RESPBulkString(nodeId))
        }
    }

    /// Returns the number of keys in a hash slot.
    @_documentation(visibility: internal)
    public struct COUNTKEYSINSLOT: ValkeyCommand {
        public typealias Response = Int

        @inlinable public static var name: String { "CLUSTER COUNTKEYSINSLOT" }

        public var slot: Int

        @inlinable public init(slot: Int) {
            self.slot = slot
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "COUNTKEYSINSLOT", slot)
        }
    }

    /// Sets hash slots as unbound for a node.
    @_documentation(visibility: internal)
    public struct DELSLOTS: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER DELSLOTS" }

        public var slots: [Int]

        @inlinable public init(slots: [Int]) {
            self.slots = slots
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "DELSLOTS", slots)
        }
    }

    /// Sets hash slot ranges as unbound for a node.
    @_documentation(visibility: internal)
    public struct DELSLOTSRANGE: ValkeyCommand {
        public struct Range: RESPRenderable, Sendable, Hashable {
            public var startSlot: Int
            public var endSlot: Int

            @inlinable
            public init(startSlot: Int, endSlot: Int) {
                self.startSlot = startSlot
                self.endSlot = endSlot
            }

            @inlinable
            public var respEntries: Int {
                startSlot.respEntries + endSlot.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                startSlot.encode(into: &commandEncoder)
                endSlot.encode(into: &commandEncoder)
            }
        }
        @inlinable public static var name: String { "CLUSTER DELSLOTSRANGE" }

        public var ranges: [Range]

        @inlinable public init(ranges: [Range]) {
            self.ranges = ranges
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "DELSLOTSRANGE", ranges)
        }
    }

    /// Forces a replica to perform a manual failover of its primary.
    @_documentation(visibility: internal)
    public struct FAILOVER: ValkeyCommand {
        public enum Options: RESPRenderable, Sendable, Hashable {
            case force
            case takeover

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .force: "FORCE".encode(into: &commandEncoder)
                case .takeover: "TAKEOVER".encode(into: &commandEncoder)
                }
            }
        }
        @inlinable public static var name: String { "CLUSTER FAILOVER" }

        public var options: Options?

        @inlinable public init(options: Options? = nil) {
            self.options = options
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "FAILOVER", options)
        }
    }

    /// Remove all keys from the target slot.
    @_documentation(visibility: internal)
    public struct FLUSHSLOT: ValkeyCommand {
        public enum FlushType: RESPRenderable, Sendable, Hashable {
            case async
            case sync

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .async: "ASYNC".encode(into: &commandEncoder)
                case .sync: "SYNC".encode(into: &commandEncoder)
                }
            }
        }
        @inlinable public static var name: String { "CLUSTER FLUSHSLOT" }

        public var slot: Int
        public var flushType: FlushType?

        @inlinable public init(slot: Int, flushType: FlushType? = nil) {
            self.slot = slot
            self.flushType = flushType
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "FLUSHSLOT", slot, flushType)
        }
    }

    /// Deletes all slots information from a node.
    @_documentation(visibility: internal)
    public struct FLUSHSLOTS: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER FLUSHSLOTS" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "FLUSHSLOTS")
        }
    }

    /// Removes a node from the nodes table.
    @_documentation(visibility: internal)
    public struct FORGET<NodeId: RESPStringRenderable>: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER FORGET" }

        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "FORGET", RESPBulkString(nodeId))
        }
    }

    /// Returns the key names in a hash slot.
    @_documentation(visibility: internal)
    public struct GETKEYSINSLOT: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public static var name: String { "CLUSTER GETKEYSINSLOT" }

        public var slot: Int
        public var count: Int

        @inlinable public init(slot: Int, count: Int) {
            self.slot = slot
            self.count = count
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "GETKEYSINSLOT", slot, count)
        }
    }

    /// Get the status of ongoing and recently finished slot import and export operations.
    @_documentation(visibility: internal)
    public struct GETSLOTMIGRATIONS: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public static var name: String { "CLUSTER GETSLOTMIGRATIONS" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "GETSLOTMIGRATIONS")
        }
    }

    /// Returns helpful text about the different subcommands.
    @_documentation(visibility: internal)
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public static var name: String { "CLUSTER HELP" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "HELP")
        }
    }

    /// Returns information about the state of a node.
    @_documentation(visibility: internal)
    public struct INFO: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public static var name: String { "CLUSTER INFO" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "INFO")
        }
    }

    /// Returns the hash slot for a key.
    @_documentation(visibility: internal)
    public struct KEYSLOT<Key: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = Int

        @inlinable public static var name: String { "CLUSTER KEYSLOT" }

        public var key: Key

        @inlinable public init(_ key: Key) {
            self.key = key
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "KEYSLOT", RESPBulkString(key))
        }
    }

    /// Returns a list of all TCP links to and from peer nodes.
    @_documentation(visibility: internal)
    public struct LINKS: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public static var name: String { "CLUSTER LINKS" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "LINKS")
        }
    }

    /// Forces a node to handshake with another node.
    @_documentation(visibility: internal)
    public struct MEET<Ip: RESPStringRenderable>: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER MEET" }

        public var ip: Ip
        public var port: Int
        public var clusterBusPort: Int?

        @inlinable public init(ip: Ip, port: Int, clusterBusPort: Int? = nil) {
            self.ip = ip
            self.port = port
            self.clusterBusPort = clusterBusPort
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "MEET", RESPBulkString(ip), port, clusterBusPort)
        }
    }

    /// Migrate the given slots from this node to the specified nodes.
    @_documentation(visibility: internal)
    public struct MIGRATESLOTS<NodeId: RESPStringRenderable>: ValkeyCommand {
        public struct MigrationGroupRange: RESPRenderable, Sendable, Hashable {
            public var startSlot: Int
            public var endSlot: Int

            @inlinable
            public init(startSlot: Int, endSlot: Int) {
                self.startSlot = startSlot
                self.endSlot = endSlot
            }

            @inlinable
            public var respEntries: Int {
                startSlot.respEntries + endSlot.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                startSlot.encode(into: &commandEncoder)
                endSlot.encode(into: &commandEncoder)
            }
        }
        public struct MigrationGroup: RESPRenderable, Sendable, Hashable {
            public var ranges: [MigrationGroupRange]
            public var nodeId: NodeId

            @inlinable
            public init(ranges: [MigrationGroupRange], nodeId: NodeId) {
                self.ranges = ranges
                self.nodeId = nodeId
            }

            @inlinable
            public var respEntries: Int {
                "SLOTSRANGE".respEntries + ranges.respEntries + "NODE".respEntries + RESPBulkString(nodeId).respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                "SLOTSRANGE".encode(into: &commandEncoder)
                ranges.encode(into: &commandEncoder)
                "NODE".encode(into: &commandEncoder)
                RESPBulkString(nodeId).encode(into: &commandEncoder)
            }
        }
        @inlinable public static var name: String { "CLUSTER MIGRATESLOTS" }

        public var migrationGroups: [MigrationGroup]

        @inlinable public init(migrationGroups: [MigrationGroup]) {
            self.migrationGroups = migrationGroups
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "MIGRATESLOTS", migrationGroups)
        }
    }

    /// Returns the ID of a node.
    @_documentation(visibility: internal)
    public struct MYID: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public static var name: String { "CLUSTER MYID" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "MYID")
        }
    }

    /// Returns the shard ID of a node.
    @_documentation(visibility: internal)
    public struct MYSHARDID: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public static var name: String { "CLUSTER MYSHARDID" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "MYSHARDID")
        }
    }

    /// Returns the cluster configuration for a node.
    @_documentation(visibility: internal)
    public struct NODES: ValkeyCommand {
        public typealias Response = ByteBuffer

        @inlinable public static var name: String { "CLUSTER NODES" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "NODES")
        }
    }

    /// Lists the replica nodes of a primary node.
    @_documentation(visibility: internal)
    public struct REPLICAS<NodeId: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public static var name: String { "CLUSTER REPLICAS" }

        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "REPLICAS", RESPBulkString(nodeId))
        }
    }

    /// Configure a node as replica of a primary node or detach a replica from its primary.
    @_documentation(visibility: internal)
    public struct REPLICATE: ValkeyCommand {
        public struct ArgsNoOne: RESPRenderable, Sendable, Hashable {

            @inlinable
            public init() {
            }

            @inlinable
            public var respEntries: Int {
                "NO".respEntries + "ONE".respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                "NO".encode(into: &commandEncoder)
                "ONE".encode(into: &commandEncoder)
            }
        }
        public enum Args: RESPRenderable, Sendable, Hashable {
            case nodeId(String)
            case noOne

            @inlinable
            public var respEntries: Int {
                switch self {
                case .nodeId(let nodeId): nodeId.respEntries
                case .noOne: ArgsNoOne().respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .nodeId(let nodeId): nodeId.encode(into: &commandEncoder)
                case .noOne: ArgsNoOne().encode(into: &commandEncoder)
                }
            }
        }
        @inlinable public static var name: String { "CLUSTER REPLICATE" }

        public var args: Args

        @inlinable public init(args: Args) {
            self.args = args
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "REPLICATE", args)
        }
    }

    /// Resets a node.
    @_documentation(visibility: internal)
    public struct RESET: ValkeyCommand {
        public enum ResetType: RESPRenderable, Sendable, Hashable {
            case hard
            case soft

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .hard: "HARD".encode(into: &commandEncoder)
                case .soft: "SOFT".encode(into: &commandEncoder)
                }
            }
        }
        @inlinable public static var name: String { "CLUSTER RESET" }

        public var resetType: ResetType?

        @inlinable public init(resetType: ResetType? = nil) {
            self.resetType = resetType
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "RESET", resetType)
        }
    }

    /// Forces a node to save the cluster configuration to disk.
    @_documentation(visibility: internal)
    public struct SAVECONFIG: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER SAVECONFIG" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SAVECONFIG")
        }
    }

    /// Sets the configuration epoch for a new node.
    @_documentation(visibility: internal)
    public struct SETCONFIGEPOCH: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER SET-CONFIG-EPOCH" }

        public var configEpoch: Int

        @inlinable public init(configEpoch: Int) {
            self.configEpoch = configEpoch
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SET-CONFIG-EPOCH", configEpoch)
        }
    }

    /// Binds a hash slot to a node.
    @_documentation(visibility: internal)
    public struct SETSLOT: ValkeyCommand {
        public enum Subcommand: RESPRenderable, Sendable, Hashable {
            case importing(String)
            case migrating(String)
            case node(String)
            case stable

            @inlinable
            public var respEntries: Int {
                switch self {
                case .importing(let importing): RESPWithToken("IMPORTING", importing).respEntries
                case .migrating(let migrating): RESPWithToken("MIGRATING", migrating).respEntries
                case .node(let node): RESPWithToken("NODE", node).respEntries
                case .stable: "STABLE".respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .importing(let importing): RESPWithToken("IMPORTING", importing).encode(into: &commandEncoder)
                case .migrating(let migrating): RESPWithToken("MIGRATING", migrating).encode(into: &commandEncoder)
                case .node(let node): RESPWithToken("NODE", node).encode(into: &commandEncoder)
                case .stable: "STABLE".encode(into: &commandEncoder)
                }
            }
        }
        @inlinable public static var name: String { "CLUSTER SETSLOT" }

        public var slot: Int
        public var subcommand: Subcommand
        public var timeout: Int?

        @inlinable public init(slot: Int, subcommand: Subcommand, timeout: Int? = nil) {
            self.slot = slot
            self.subcommand = subcommand
            self.timeout = timeout
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SETSLOT", slot, subcommand, RESPWithToken("TIMEOUT", timeout))
        }
    }

    /// Returns the mapping of cluster slots to shards.
    @_documentation(visibility: internal)
    public struct SHARDS: ValkeyCommand {
        @inlinable public static var name: String { "CLUSTER SHARDS" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SHARDS")
        }
    }

    /// Lists the replica nodes of a primary node.
    @_documentation(visibility: internal)
    public struct SLAVES<NodeId: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public static var name: String { "CLUSTER SLAVES" }

        public var nodeId: NodeId

        @inlinable public init(nodeId: NodeId) {
            self.nodeId = nodeId
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SLAVES", RESPBulkString(nodeId))
        }
    }

    /// Return an array of slot usage statistics for slots assigned to the current node.
    @_documentation(visibility: internal)
    public struct SLOTSTATS: ValkeyCommand {
        public struct FilterSlotsrange: RESPRenderable, Sendable, Hashable {
            public var startSlot: Int
            public var endSlot: Int

            @inlinable
            public init(startSlot: Int, endSlot: Int) {
                self.startSlot = startSlot
                self.endSlot = endSlot
            }

            @inlinable
            public var respEntries: Int {
                startSlot.respEntries + endSlot.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                startSlot.encode(into: &commandEncoder)
                endSlot.encode(into: &commandEncoder)
            }
        }
        public enum FilterOrderbyOrder: RESPRenderable, Sendable, Hashable {
            case asc
            case desc

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .asc: "ASC".encode(into: &commandEncoder)
                case .desc: "DESC".encode(into: &commandEncoder)
                }
            }
        }
        public struct FilterOrderby: RESPRenderable, Sendable, Hashable {
            public var metric: String
            public var limit: Int?
            public var order: FilterOrderbyOrder?

            @inlinable
            public init(metric: String, limit: Int? = nil, order: FilterOrderbyOrder? = nil) {
                self.metric = metric
                self.limit = limit
                self.order = order
            }

            @inlinable
            public var respEntries: Int {
                metric.respEntries + RESPWithToken("LIMIT", limit).respEntries + order.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                metric.encode(into: &commandEncoder)
                RESPWithToken("LIMIT", limit).encode(into: &commandEncoder)
                order.encode(into: &commandEncoder)
            }
        }
        public enum Filter: RESPRenderable, Sendable, Hashable {
            case slotsrange(FilterSlotsrange)
            case orderby(FilterOrderby)

            @inlinable
            public var respEntries: Int {
                switch self {
                case .slotsrange(let slotsrange): RESPWithToken("SLOTSRANGE", slotsrange).respEntries
                case .orderby(let orderby): RESPWithToken("ORDERBY", orderby).respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .slotsrange(let slotsrange): RESPWithToken("SLOTSRANGE", slotsrange).encode(into: &commandEncoder)
                case .orderby(let orderby): RESPWithToken("ORDERBY", orderby).encode(into: &commandEncoder)
                }
            }
        }
        public typealias Response = RESPToken.Array

        @inlinable public static var name: String { "CLUSTER SLOT-STATS" }

        public var filter: Filter

        @inlinable public init(filter: Filter) {
            self.filter = filter
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SLOT-STATS", filter)
        }
    }

    /// Returns the mapping of cluster slots to nodes.
    @_documentation(visibility: internal)
    public struct SLOTS: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public static var name: String { "CLUSTER SLOTS" }

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("CLUSTER", "SLOTS")
        }
    }

}

/// Signals that a cluster client is following an -ASK redirect.
@_documentation(visibility: internal)
public struct ASKING: ValkeyCommand {
    @inlinable public static var name: String { "ASKING" }

    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("ASKING")
    }
}

/// Enables read-only queries for a connection to a Valkey replica node.
@_documentation(visibility: internal)
public struct READONLY: ValkeyCommand {
    @inlinable public static var name: String { "READONLY" }

    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("READONLY")
    }
}

/// Enables read-write queries for a connection to a Valkey replica node.
@_documentation(visibility: internal)
public struct READWRITE: ValkeyCommand {
    @inlinable public static var name: String { "READWRITE" }

    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
        commandEncoder.encodeArray("READWRITE")
    }
}

extension ValkeyClientProtocol {
    /// Signals that a cluster client is following an -ASK redirect.
    ///
    /// - Documentation: [ASKING](https://valkey.io/commands/asking)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    @inlinable
    public func asking() async throws {
        _ = try await execute(ASKING())
    }

    /// Assigns new hash slots to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTS](https://valkey.io/commands/cluster-addslots)
    /// - Available: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    @inlinable
    public func clusterAddslots(slots: [Int]) async throws {
        _ = try await execute(CLUSTER.ADDSLOTS(slots: slots))
    }

    /// Assigns new hash slot ranges to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTSRANGE](https://valkey.io/commands/cluster-addslotsrange)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    @inlinable
    public func clusterAddslotsrange(ranges: [CLUSTER.ADDSLOTSRANGE.Range]) async throws {
        _ = try await execute(CLUSTER.ADDSLOTSRANGE(ranges: ranges))
    }

    /// Advances the cluster config epoch.
    ///
    /// - Documentation: [CLUSTER BUMPEPOCH](https://valkey.io/commands/cluster-bumpepoch)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    /// - Response: One of the following
    ///     * [String]: If the epoch was incremented.
    ///     * [String]: If the node already has the greatest config epoch in the cluster.
    @inlinable
    @discardableResult
    public func clusterBumpepoch() async throws -> ByteBuffer {
        try await execute(CLUSTER.BUMPEPOCH())
    }

    /// Cancel all current ongoing slot migration operations.
    ///
    /// - Documentation: [CLUSTER CANCELSLOTMIGRATIONS](https://valkey.io/commands/cluster-cancelslotmigrations)
    /// - Available: 9.0.0
    /// - Complexity: O(N), where N is the number of slot migration operations being cancelled.
    @inlinable
    public func clusterCancelslotmigrations() async throws {
        _ = try await execute(CLUSTER.CANCELSLOTMIGRATIONS())
    }

    /// Returns the number of active failure reports active for a node.
    ///
    /// - Documentation: [CLUSTER COUNT-FAILURE-REPORTS](https://valkey.io/commands/cluster-count-failure-reports)
    /// - Available: 3.0.0
    /// - Complexity: O(N) where N is the number of failure reports
    /// - Response: [Integer]: The number of active failure reports for the node.
    @inlinable
    @discardableResult
    public func clusterCountFailureReports<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws -> Int {
        try await execute(CLUSTER.COUNTFAILUREREPORTS(nodeId: nodeId))
    }

    /// Returns the number of keys in a hash slot.
    ///
    /// - Documentation: [CLUSTER COUNTKEYSINSLOT](https://valkey.io/commands/cluster-countkeysinslot)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    /// - Response: [Integer]: The number of keys in the specified hash slot.
    @inlinable
    @discardableResult
    public func clusterCountkeysinslot(slot: Int) async throws -> Int {
        try await execute(CLUSTER.COUNTKEYSINSLOT(slot: slot))
    }

    /// Sets hash slots as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTS](https://valkey.io/commands/cluster-delslots)
    /// - Available: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    @inlinable
    public func clusterDelslots(slots: [Int]) async throws {
        _ = try await execute(CLUSTER.DELSLOTS(slots: slots))
    }

    /// Sets hash slot ranges as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTSRANGE](https://valkey.io/commands/cluster-delslotsrange)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    @inlinable
    public func clusterDelslotsrange(ranges: [CLUSTER.DELSLOTSRANGE.Range]) async throws {
        _ = try await execute(CLUSTER.DELSLOTSRANGE(ranges: ranges))
    }

    /// Forces a replica to perform a manual failover of its primary.
    ///
    /// - Documentation: [CLUSTER FAILOVER](https://valkey.io/commands/cluster-failover)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    @inlinable
    public func clusterFailover(options: CLUSTER.FAILOVER.Options? = nil) async throws {
        _ = try await execute(CLUSTER.FAILOVER(options: options))
    }

    /// Remove all keys from the target slot.
    ///
    /// - Documentation: [CLUSTER FLUSHSLOT](https://valkey.io/commands/cluster-flushslot)
    /// - Available: 9.0.0
    /// - Complexity: O(N) where N is the number of keys in the target slot
    @inlinable
    public func clusterFlushslot(slot: Int, flushType: CLUSTER.FLUSHSLOT.FlushType? = nil) async throws {
        _ = try await execute(CLUSTER.FLUSHSLOT(slot: slot, flushType: flushType))
    }

    /// Deletes all slots information from a node.
    ///
    /// - Documentation: [CLUSTER FLUSHSLOTS](https://valkey.io/commands/cluster-flushslots)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    @inlinable
    public func clusterFlushslots() async throws {
        _ = try await execute(CLUSTER.FLUSHSLOTS())
    }

    /// Removes a node from the nodes table.
    ///
    /// - Documentation: [CLUSTER FORGET](https://valkey.io/commands/cluster-forget)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    @inlinable
    public func clusterForget<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws {
        _ = try await execute(CLUSTER.FORGET(nodeId: nodeId))
    }

    /// Returns the key names in a hash slot.
    ///
    /// - Documentation: [CLUSTER GETKEYSINSLOT](https://valkey.io/commands/cluster-getkeysinslot)
    /// - Available: 3.0.0
    /// - Complexity: O(N) where N is the number of requested keys
    /// - Response: [Array]: An array with up to count elements.
    @inlinable
    @discardableResult
    public func clusterGetkeysinslot(slot: Int, count: Int) async throws -> RESPToken.Array {
        try await execute(CLUSTER.GETKEYSINSLOT(slot: slot, count: count))
    }

    /// Get the status of ongoing and recently finished slot import and export operations.
    ///
    /// - Documentation: [CLUSTER GETSLOTMIGRATIONS](https://valkey.io/commands/cluster-getslotmigrations)
    /// - Available: 9.0.0
    /// - Complexity: O(N), where N is the number of active slot import and export jobs.
    /// - Response: [Array]: A nested list of maps, one for each migration, with keys and values representing migration fields.
    @inlinable
    @discardableResult
    public func clusterGetslotmigrations() async throws -> RESPToken.Array {
        try await execute(CLUSTER.GETSLOTMIGRATIONS())
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [CLUSTER HELP](https://valkey.io/commands/cluster-help)
    /// - Available: 5.0.0
    /// - Complexity: O(1)
    /// - Response: [Array]: Helpful text about subcommands.
    @inlinable
    @discardableResult
    public func clusterHelp() async throws -> RESPToken.Array {
        try await execute(CLUSTER.HELP())
    }

    /// Returns information about the state of a node.
    ///
    /// - Documentation: [CLUSTER INFO](https://valkey.io/commands/cluster-info)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    /// - Response: [String]: A map between named fields and values in the form of <field>:<value> lines separated by newlines composed by the two bytes CRLF
    @inlinable
    @discardableResult
    public func clusterInfo() async throws -> ByteBuffer {
        try await execute(CLUSTER.INFO())
    }

    /// Returns the hash slot for a key.
    ///
    /// - Documentation: [CLUSTER KEYSLOT](https://valkey.io/commands/cluster-keyslot)
    /// - Available: 3.0.0
    /// - Complexity: O(N) where N is the number of bytes in the key
    /// - Response: [Integer]: The hash slot number for the specified key
    @inlinable
    @discardableResult
    public func clusterKeyslot<Key: RESPStringRenderable>(_ key: Key) async throws -> Int {
        try await execute(CLUSTER.KEYSLOT(key))
    }

    /// Returns a list of all TCP links to and from peer nodes.
    ///
    /// - Documentation: [CLUSTER LINKS](https://valkey.io/commands/cluster-links)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Response: [Array]: An array of cluster links and their attributes.
    @inlinable
    @discardableResult
    public func clusterLinks() async throws -> RESPToken.Array {
        try await execute(CLUSTER.LINKS())
    }

    /// Forces a node to handshake with another node.
    ///
    /// - Documentation: [CLUSTER MEET](https://valkey.io/commands/cluster-meet)
    /// - Available: 3.0.0
    /// - History:
    ///     * 4.0.0: Added the optional `cluster_bus_port` argument.
    /// - Complexity: O(1)
    @inlinable
    public func clusterMeet<Ip: RESPStringRenderable>(ip: Ip, port: Int, clusterBusPort: Int? = nil) async throws {
        _ = try await execute(CLUSTER.MEET(ip: ip, port: port, clusterBusPort: clusterBusPort))
    }

    /// Migrate the given slots from this node to the specified nodes.
    ///
    /// - Documentation: [CLUSTER MIGRATESLOTS](https://valkey.io/commands/cluster-migrateslots)
    /// - Available: 9.0.0
    /// - Complexity: O(N) where N is the total number of the slots between all start slot and end slot arguments.
    @inlinable
    public func clusterMigrateslots<NodeId: RESPStringRenderable>(migrationGroups: [CLUSTER.MIGRATESLOTS<NodeId>.MigrationGroup]) async throws {
        _ = try await execute(CLUSTER.MIGRATESLOTS(migrationGroups: migrationGroups))
    }

    /// Returns the ID of a node.
    ///
    /// - Documentation: [CLUSTER MYID](https://valkey.io/commands/cluster-myid)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    /// - Response: [String]: The node id.
    @inlinable
    @discardableResult
    public func clusterMyid() async throws -> ByteBuffer {
        try await execute(CLUSTER.MYID())
    }

    /// Returns the shard ID of a node.
    ///
    /// - Documentation: [CLUSTER MYSHARDID](https://valkey.io/commands/cluster-myshardid)
    /// - Available: 7.2.0
    /// - Complexity: O(1)
    /// - Response: [String]: The node's shard id.
    @inlinable
    @discardableResult
    public func clusterMyshardid() async throws -> ByteBuffer {
        try await execute(CLUSTER.MYSHARDID())
    }

    /// Returns the cluster configuration for a node.
    ///
    /// - Documentation: [CLUSTER NODES](https://valkey.io/commands/cluster-nodes)
    /// - Available: 3.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Response: [String]: The serialized cluster configuration.
    @inlinable
    @discardableResult
    public func clusterNodes() async throws -> ByteBuffer {
        try await execute(CLUSTER.NODES())
    }

    /// Lists the replica nodes of a primary node.
    ///
    /// - Documentation: [CLUSTER REPLICAS](https://valkey.io/commands/cluster-replicas)
    /// - Available: 5.0.0
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Response: [Array]: A list of replica nodes replicating from the specified primary node provided in the same format used by CLUSTER NODES.
    @inlinable
    @discardableResult
    public func clusterReplicas<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws -> RESPToken.Array {
        try await execute(CLUSTER.REPLICAS(nodeId: nodeId))
    }

    /// Configure a node as replica of a primary node or detach a replica from its primary.
    ///
    /// - Documentation: [CLUSTER REPLICATE](https://valkey.io/commands/cluster-replicate)
    /// - Available: 3.0.0
    /// - History:
    ///     * 9.0.0: Added support of 'NO ONE' arg instead of <node-id> resulting into detaching replica from primary node.
    /// - Complexity: O(1)
    @inlinable
    public func clusterReplicate(args: CLUSTER.REPLICATE.Args) async throws {
        _ = try await execute(CLUSTER.REPLICATE(args: args))
    }

    /// Resets a node.
    ///
    /// - Documentation: [CLUSTER RESET](https://valkey.io/commands/cluster-reset)
    /// - Available: 3.0.0
    /// - Complexity: O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.
    @inlinable
    public func clusterReset(resetType: CLUSTER.RESET.ResetType? = nil) async throws {
        _ = try await execute(CLUSTER.RESET(resetType: resetType))
    }

    /// Forces a node to save the cluster configuration to disk.
    ///
    /// - Documentation: [CLUSTER SAVECONFIG](https://valkey.io/commands/cluster-saveconfig)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    @inlinable
    public func clusterSaveconfig() async throws {
        _ = try await execute(CLUSTER.SAVECONFIG())
    }

    /// Sets the configuration epoch for a new node.
    ///
    /// - Documentation: [CLUSTER SET-CONFIG-EPOCH](https://valkey.io/commands/cluster-set-config-epoch)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    @inlinable
    public func clusterSetConfigEpoch(configEpoch: Int) async throws {
        _ = try await execute(CLUSTER.SETCONFIGEPOCH(configEpoch: configEpoch))
    }

    /// Binds a hash slot to a node.
    ///
    /// - Documentation: [CLUSTER SETSLOT](https://valkey.io/commands/cluster-setslot)
    /// - Available: 3.0.0
    /// - History:
    ///     * 8.0.0: Added the `TIMEOUT` option.
    /// - Complexity: O(1)
    @inlinable
    public func clusterSetslot(slot: Int, subcommand: CLUSTER.SETSLOT.Subcommand, timeout: Int? = nil) async throws {
        _ = try await execute(CLUSTER.SETSLOT(slot: slot, subcommand: subcommand, timeout: timeout))
    }

    /// Returns the mapping of cluster slots to shards.
    ///
    /// - Documentation: [CLUSTER SHARDS](https://valkey.io/commands/cluster-shards)
    /// - Available: 7.0.0
    /// - Complexity: O(N) where N is the total number of cluster nodes
    /// - Response: [Array]: A nested list of a map of hash ranges and shard nodes describing individual shards.
    @inlinable
    @discardableResult
    public func clusterShards() async throws -> CLUSTER.SHARDS.Response {
        try await execute(CLUSTER.SHARDS())
    }

    /// Lists the replica nodes of a primary node.
    ///
    /// - Documentation: [CLUSTER SLAVES](https://valkey.io/commands/cluster-slaves)
    /// - Available: 3.0.0
    /// - Deprecated since: 5.0.0. Replaced by `CLUSTER REPLICAS`.
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Response: [Array]: A list of replica nodes replicating from the specified primary node provided in the same format used by CLUSTER NODES.
    @inlinable
    @discardableResult
    public func clusterSlaves<NodeId: RESPStringRenderable>(nodeId: NodeId) async throws -> RESPToken.Array {
        try await execute(CLUSTER.SLAVES(nodeId: nodeId))
    }

    /// Return an array of slot usage statistics for slots assigned to the current node.
    ///
    /// - Documentation: [CLUSTER SLOT-STATS](https://valkey.io/commands/cluster-slot-stats)
    /// - Available: 8.0.0
    /// - Complexity: O(N) where N is the total number of slots based on arguments. O(N*log(N)) with ORDERBY subcommand.
    /// - Response: [Array]: Array of nested arrays, where the inner array element represents a slot and its respective usage statistics.
    @inlinable
    @discardableResult
    public func clusterSlotStats(filter: CLUSTER.SLOTSTATS.Filter) async throws -> RESPToken.Array {
        try await execute(CLUSTER.SLOTSTATS(filter: filter))
    }

    /// Returns the mapping of cluster slots to nodes.
    ///
    /// - Documentation: [CLUSTER SLOTS](https://valkey.io/commands/cluster-slots)
    /// - Available: 3.0.0
    /// - History:
    ///     * 4.0.0: Added node IDs.
    ///     * 7.0.0: Added additional networking metadata field.
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Response: [Array]: Nested list of slot ranges with networking information.
    @inlinable
    @discardableResult
    public func clusterSlots() async throws -> RESPToken.Array {
        try await execute(CLUSTER.SLOTS())
    }

    /// Enables read-only queries for a connection to a Valkey replica node.
    ///
    /// - Documentation: [READONLY](https://valkey.io/commands/readonly)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    @inlinable
    public func readonly() async throws {
        _ = try await execute(READONLY())
    }

    /// Enables read-write queries for a connection to a Valkey replica node.
    ///
    /// - Documentation: [READWRITE](https://valkey.io/commands/readwrite)
    /// - Available: 3.0.0
    /// - Complexity: O(1)
    @inlinable
    public func readwrite() async throws {
        _ = try await execute(READWRITE())
    }

}
