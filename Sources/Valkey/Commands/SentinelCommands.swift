//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-valkey open source project
//
// Copyright (c) 2025 Apple Inc. and the swift-valkey project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-valkey project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// A container for Sentinel commands.
public enum SENTINEL {
    /// Checks for a Sentinel quorum.
    public struct CKQUORUM<PrimaryName: RESPStringRenderable>: ValkeyCommand {
        public var primaryName: PrimaryName

        @inlinable public init(primaryName: PrimaryName) {
            self.primaryName = primaryName
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "CKQUORUM", RESPBulkString(primaryName))
        }
    }

    /// Configures Sentinel.
    public struct CONFIG: ValkeyCommand {
        public struct ActionSet: RESPRenderable, Sendable {
            @usableFromInline let parameter: String
            @usableFromInline let value: String


            @inlinable public init(parameter: String, value: String) {
                self.parameter = parameter
                self.value = value
            }

            @inlinable
            public var respEntries: Int {
                parameter.respEntries + value.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                parameter.encode(into: &commandEncoder)
                value.encode(into: &commandEncoder)
            }
        }
        public enum Action: RESPRenderable, Sendable {
            case set([ActionSet])
            case parameter([String])

            @inlinable
            public var respEntries: Int {
                switch self {
                case .set(let set): RESPWithToken("SET", set).respEntries
                case .parameter(let parameter): RESPWithToken("GET", parameter).respEntries
                }
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .set(let set): RESPWithToken("SET", set).encode(into: &commandEncoder)
                case .parameter(let parameter): RESPWithToken("GET", parameter).encode(into: &commandEncoder)
                }
            }
        }
        public typealias Response = RESPToken.Map?

        public var action: Action

        @inlinable public init(action: Action) {
            self.action = action
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "CONFIG", action)
        }
    }

    /// Lists or updates the current configurable parameters of Sentinel.
    public struct DEBUG: ValkeyCommand {
        public struct Data: RESPRenderable, Sendable {
            @usableFromInline let parameter: String
            @usableFromInline let value: String


            @inlinable public init(parameter: String, value: String) {
                self.parameter = parameter
                self.value = value
            }

            @inlinable
            public var respEntries: Int {
                parameter.respEntries + value.respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                parameter.encode(into: &commandEncoder)
                value.encode(into: &commandEncoder)
            }
        }
        public typealias Response = RESPToken.Map?

        public var data: [Data]

        @inlinable public init(data: [Data] = []) {
            self.data = data
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "DEBUG", data)
        }
    }

    /// Forces a Sentinel failover.
    public struct FAILOVER<PrimaryName: RESPStringRenderable>: ValkeyCommand {
        public var primaryName: PrimaryName

        @inlinable public init(primaryName: PrimaryName) {
            self.primaryName = primaryName
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "FAILOVER", RESPBulkString(primaryName))
        }
    }

    /// Rewrites the Sentinel configuration file.
    public struct FLUSHCONFIG: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "FLUSHCONFIG")
        }
    }

    /// Returns helpful text about the different subcommands.
    public struct HELP: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "HELP")
        }
    }

    /// Starts monitoring.
    public struct MONITOR<Name: RESPStringRenderable, Ip: RESPStringRenderable>: ValkeyCommand {
        public var name: Name
        public var ip: Ip
        public var port: Int
        public var quorum: Int

        @inlinable public init(name: Name, ip: Ip, port: Int, quorum: Int) {
            self.name = name
            self.ip = ip
            self.port = port
            self.quorum = quorum
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "MONITOR", RESPBulkString(name), RESPBulkString(ip), port, quorum)
        }
    }

    /// Returns the Sentinel instance ID.
    public struct MYID: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "MYID")
        }
    }

    /// Returns a list of monitored primaries.
    public struct PRIMARIES: ValkeyCommand {
        public typealias Response = RESPToken.Array

        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "PRIMARIES")
        }
    }

    /// Returns the state of a primary instance.
    public struct PRIMARY<PrimaryName: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Map

        public var primaryName: PrimaryName

        @inlinable public init(primaryName: PrimaryName) {
            self.primaryName = primaryName
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "PRIMARY", RESPBulkString(primaryName))
        }
    }

    /// Stops monitoring.
    public struct REMOVE<PrimaryName: RESPStringRenderable>: ValkeyCommand {
        public var primaryName: PrimaryName

        @inlinable public init(primaryName: PrimaryName) {
            self.primaryName = primaryName
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "REMOVE", RESPBulkString(primaryName))
        }
    }

    /// Returns a list of the monitored replicas.
    public struct REPLICAS<PrimaryName: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var primaryName: PrimaryName

        @inlinable public init(primaryName: PrimaryName) {
            self.primaryName = primaryName
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "REPLICAS", RESPBulkString(primaryName))
        }
    }

    /// Resets primaries by name matching a pattern.
    public struct RESET: ValkeyCommand {
        public typealias Response = Int

        public var pattern: String

        @inlinable public init(pattern: String) {
            self.pattern = pattern
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "RESET", pattern)
        }
    }

    /// Returns a list of Sentinel instances.
    public struct SENTINELS<PrimaryName: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var primaryName: PrimaryName

        @inlinable public init(primaryName: PrimaryName) {
            self.primaryName = primaryName
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "SENTINELS", RESPBulkString(primaryName))
        }
    }

    /// Changes the configuration of a monitored primary.
    public struct SET<PrimaryName: RESPStringRenderable, Option: RESPStringRenderable, Value: RESPStringRenderable>: ValkeyCommand {
        public struct Data: RESPRenderable, Sendable {
            @usableFromInline let option: Option
            @usableFromInline let value: Value


            @inlinable public init(option: Option, value: Value) {
                self.option = option
                self.value = value
            }

            @inlinable
            public var respEntries: Int {
                RESPBulkString(option).respEntries + RESPBulkString(value).respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                RESPBulkString(option).encode(into: &commandEncoder)
                RESPBulkString(value).encode(into: &commandEncoder)
            }
        }
        public var primaryName: PrimaryName
        public var data: [Data]

        @inlinable public init(primaryName: PrimaryName, data: [Data]) {
            self.primaryName = primaryName
            self.data = data
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "SET", RESPBulkString(primaryName), data)
        }
    }

    /// Returns a list of the monitored replicas.
    @available(*, deprecated, message: "Since 5.0.0. Replaced by `SENTINEL REPLICAS`.")
    public struct SLAVES<PrimaryName: RESPStringRenderable>: ValkeyCommand {
        public typealias Response = RESPToken.Array

        public var primaryName: PrimaryName

        @inlinable public init(primaryName: PrimaryName) {
            self.primaryName = primaryName
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("SENTINEL", "SLAVES", RESPBulkString(primaryName))
        }
    }

}

extension ValkeyConnection {
    /// Checks for a Sentinel quorum.
    ///
    /// - Documentation: [SENTINEL CKQUORUM](https:/valkey.io/commands/sentinel-ckquorum)
    /// - Version: 2.8.4
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): Returns OK if the current Sentinel configuration is able to reach the quorum needed to failover a primary, and the majority needed to authorize the failover.
    @inlinable
    public func sentinelCkquorum<PrimaryName: RESPStringRenderable>(primaryName: PrimaryName) async throws -> SENTINEL.CKQUORUM.Response {
        try await send(command: SENTINEL.CKQUORUM(primaryName: primaryName))
    }

    /// Configures Sentinel.
    ///
    /// - Documentation: [SENTINEL CONFIG](https:/valkey.io/commands/sentinel-config)
    /// - Version: 6.2.0
    /// - Complexity: O(N) when N is the number of configuration parameters provided
    /// - Returns: One of the following:
    ///     * [Map](https:/valkey.io/topics/protocol/#maps): When 'SENTINEL-CONFIG GET' is called, returns a map.
    ///     * [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`. When 'SENTINEL-CONFIG SET' is called, returns OK on success.
    @inlinable
    public func sentinelConfig(action: SENTINEL.CONFIG.Action) async throws -> RESPToken.Map? {
        try await send(command: SENTINEL.CONFIG(action: action))
    }

    /// Lists or updates the current configurable parameters of Sentinel.
    ///
    /// - Documentation: [SENTINEL DEBUG](https:/valkey.io/commands/sentinel-debug)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of configurable parameters
    /// - Returns: One of the following:
    ///     * [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`. The configuration update was successful.
    ///     * [Map](https:/valkey.io/topics/protocol/#maps): List of configurable time parameters and their values (milliseconds).
    @inlinable
    public func sentinelDebug(data: [SENTINEL.DEBUG.Data] = []) async throws -> RESPToken.Map? {
        try await send(command: SENTINEL.DEBUG(data: data))
    }

    /// Forces a Sentinel failover.
    ///
    /// - Documentation: [SENTINEL FAILOVER](https:/valkey.io/commands/sentinel-failover)
    /// - Version: 2.8.4
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`. Force a fail over as if the primary was not reachable, and without asking for agreement to other Sentinels.
    @inlinable
    public func sentinelFailover<PrimaryName: RESPStringRenderable>(primaryName: PrimaryName) async throws {
        _ = try await send(command: SENTINEL.FAILOVER(primaryName: primaryName))
    }

    /// Rewrites the Sentinel configuration file.
    ///
    /// - Documentation: [SENTINEL FLUSHCONFIG](https:/valkey.io/commands/sentinel-flushconfig)
    /// - Version: 2.8.4
    /// - Complexity: O(1)
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`. Force Sentinel to rewrite its configuration on disk, including the current Sentinel state.
    @inlinable
    public func sentinelFlushconfig() async throws {
        _ = try await send(command: SENTINEL.FLUSHCONFIG())
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [SENTINEL HELP](https:/valkey.io/commands/sentinel-help)
    /// - Version: 6.2.0
    /// - Complexity: O(1)
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): Helpful text about subcommands.
    @inlinable
    public func sentinelHelp() async throws -> RESPToken.Array {
        try await send(command: SENTINEL.HELP())
    }

    /// Starts monitoring.
    ///
    /// - Documentation: [SENTINEL MONITOR](https:/valkey.io/commands/sentinel-monitor)
    /// - Version: 2.8.4
    /// - Complexity: O(1)
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func sentinelMonitor<Name: RESPStringRenderable, Ip: RESPStringRenderable>(name: Name, ip: Ip, port: Int, quorum: Int) async throws {
        _ = try await send(command: SENTINEL.MONITOR(name: name, ip: ip, port: port, quorum: quorum))
    }

    /// Returns the Sentinel instance ID.
    ///
    /// - Documentation: [SENTINEL MYID](https:/valkey.io/commands/sentinel-myid)
    /// - Version: 6.2.0
    /// - Complexity: O(1)
    /// - Returns: [Bulk string](https:/valkey.io/topics/protocol/#bulk-strings): Node ID of the sentinel instance.
    @inlinable
    public func sentinelMyid() async throws -> SENTINEL.MYID.Response {
        try await send(command: SENTINEL.MYID())
    }

    /// Returns a list of monitored primaries.
    ///
    /// - Documentation: [SENTINEL PRIMARIES](https:/valkey.io/commands/sentinel-primaries)
    /// - Version: 8.0.0
    /// - Complexity: O(N) where N is the number of primaries
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): List of monitored Valkey primaries, and their state.
    @inlinable
    public func sentinelPrimaries() async throws -> RESPToken.Array {
        try await send(command: SENTINEL.PRIMARIES())
    }

    /// Returns the state of a primary instance.
    ///
    /// - Documentation: [SENTINEL PRIMARY](https:/valkey.io/commands/sentinel-primary)
    /// - Version: 8.0.0
    /// - Complexity: O(1)
    /// - Returns: [Map](https:/valkey.io/topics/protocol/#maps): The state and info of the specified primary.
    @inlinable
    public func sentinelPrimary<PrimaryName: RESPStringRenderable>(primaryName: PrimaryName) async throws -> RESPToken.Map {
        try await send(command: SENTINEL.PRIMARY(primaryName: primaryName))
    }

    /// Stops monitoring.
    ///
    /// - Documentation: [SENTINEL REMOVE](https:/valkey.io/commands/sentinel-remove)
    /// - Version: 2.8.4
    /// - Complexity: O(1)
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func sentinelRemove<PrimaryName: RESPStringRenderable>(primaryName: PrimaryName) async throws {
        _ = try await send(command: SENTINEL.REMOVE(primaryName: primaryName))
    }

    /// Returns a list of the monitored replicas.
    ///
    /// - Documentation: [SENTINEL REPLICAS](https:/valkey.io/commands/sentinel-replicas)
    /// - Version: 5.0.0
    /// - Complexity: O(N) where N is the number of replicas
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): List of replicas for this primary, and their state.
    @inlinable
    public func sentinelReplicas<PrimaryName: RESPStringRenderable>(primaryName: PrimaryName) async throws -> RESPToken.Array {
        try await send(command: SENTINEL.REPLICAS(primaryName: primaryName))
    }

    /// Resets primaries by name matching a pattern.
    ///
    /// - Documentation: [SENTINEL RESET](https:/valkey.io/commands/sentinel-reset)
    /// - Version: 2.8.4
    /// - Complexity: O(N) where N is the number of monitored primaries
    /// - Returns: [Integer](https:/valkey.io/topics/protocol/#integers): The number of primaries that were reset.
    @inlinable
    public func sentinelReset(pattern: String) async throws -> Int {
        try await send(command: SENTINEL.RESET(pattern: pattern))
    }

    /// Returns a list of Sentinel instances.
    ///
    /// - Documentation: [SENTINEL SENTINELS](https:/valkey.io/commands/sentinel-sentinels)
    /// - Version: 2.8.4
    /// - Complexity: O(N) where N is the number of Sentinels
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): List of sentinel instances, and their state.
    @inlinable
    public func sentinelSentinels<PrimaryName: RESPStringRenderable>(primaryName: PrimaryName) async throws -> RESPToken.Array {
        try await send(command: SENTINEL.SENTINELS(primaryName: primaryName))
    }

    /// Changes the configuration of a monitored primary.
    ///
    /// - Documentation: [SENTINEL SET](https:/valkey.io/commands/sentinel-set)
    /// - Version: 2.8.4
    /// - Complexity: O(1)
    /// - Returns: [Simple string](https:/valkey.io/topics/protocol/#simple-strings): `OK`.
    @inlinable
    public func sentinelSet<PrimaryName: RESPStringRenderable, Option: RESPStringRenderable, Value: RESPStringRenderable>(primaryName: PrimaryName, data: [SENTINEL.SET<PrimaryName, Option, Value>.Data]) async throws {
        _ = try await send(command: SENTINEL.SET(primaryName: primaryName, data: data))
    }

    /// Returns a list of the monitored replicas.
    ///
    /// - Documentation: [SENTINEL SLAVES](https:/valkey.io/commands/sentinel-slaves)
    /// - Version: 2.8.0
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Returns: [Array](https:/valkey.io/topics/protocol/#arrays): List of monitored replicas, and their state.
    @inlinable
    @available(*, deprecated, message: "Since 5.0.0. Replaced by `SENTINEL REPLICAS`.")
    public func sentinelSlaves<PrimaryName: RESPStringRenderable>(primaryName: PrimaryName) async throws -> RESPToken.Array {
        try await send(command: SENTINEL.SLAVES(primaryName: primaryName))
    }

}
