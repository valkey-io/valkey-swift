/// NOTE: THIS FILE IS AUTO-GENERATED BY dev/generate-transaction-commands.sh

import NIOCore

extension ValkeyConnection {
    /// Generic command used to disable conversion to a command Response type
    @usableFromInline
    struct TransactionCommand<Command: RESPCommand>: RESPCommand {
        @usableFromInline
        let command: Command
        @usableFromInline
        init(_ command: Command) {
            self.command = command
        }
        @usableFromInline
        func encode(into commandEncoder: inout RESPCommandEncoder) {
            self.command.encode(into: &commandEncoder)
        }
    }

    @inlinable
    public func transaction<C0: RESPCommand>(_ c0: C0) async throws -> (Result<C0.Response, Error>) {
        guard let responses = try await self.pipeline(MULTI(), TransactionCommand(c0), EXEC()).2.get() else {
            throw ValkeyClientError(.transactionAborted)
        }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: RESPCommand, C1: RESPCommand>(
        _ c0: C0,
        _ c1: C1
    ) async throws -> (Result<C0.Response, Error>, Result<C1.Response, Error>) {
        guard let responses = try await self.pipeline(MULTI(), TransactionCommand(c0), TransactionCommand(c1), EXEC()).3.get() else {
            throw ValkeyClientError(.transactionAborted)
        }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: RESPCommand, C1: RESPCommand, C2: RESPCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2
    ) async throws -> (Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>) {
        guard let responses = try await self.pipeline(MULTI(), TransactionCommand(c0), TransactionCommand(c1), TransactionCommand(c2), EXEC()).4.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: RESPCommand, C1: RESPCommand, C2: RESPCommand, C3: RESPCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3
    ) async throws -> (Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                TransactionCommand(c0),
                TransactionCommand(c1),
                TransactionCommand(c2),
                TransactionCommand(c3),
                EXEC()
            ).5.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: RESPCommand, C1: RESPCommand, C2: RESPCommand, C3: RESPCommand, C4: RESPCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                TransactionCommand(c0),
                TransactionCommand(c1),
                TransactionCommand(c2),
                TransactionCommand(c3),
                TransactionCommand(c4),
                EXEC()
            ).6.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: RESPCommand, C1: RESPCommand, C2: RESPCommand, C3: RESPCommand, C4: RESPCommand, C5: RESPCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                TransactionCommand(c0),
                TransactionCommand(c1),
                TransactionCommand(c2),
                TransactionCommand(c3),
                TransactionCommand(c4),
                TransactionCommand(c5),
                EXEC()
            ).7.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: RESPCommand, C1: RESPCommand, C2: RESPCommand, C3: RESPCommand, C4: RESPCommand, C5: RESPCommand, C6: RESPCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5,
        _ c6: C6
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>, Result<C6.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                TransactionCommand(c0),
                TransactionCommand(c1),
                TransactionCommand(c2),
                TransactionCommand(c3),
                TransactionCommand(c4),
                TransactionCommand(c5),
                TransactionCommand(c6),
                EXEC()
            ).8.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<
        C0: RESPCommand,
        C1: RESPCommand,
        C2: RESPCommand,
        C3: RESPCommand,
        C4: RESPCommand,
        C5: RESPCommand,
        C6: RESPCommand,
        C7: RESPCommand
    >(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5,
        _ c6: C6,
        _ c7: C7
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>, Result<C6.Response, Error>, Result<C7.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                TransactionCommand(c0),
                TransactionCommand(c1),
                TransactionCommand(c2),
                TransactionCommand(c3),
                TransactionCommand(c4),
                TransactionCommand(c5),
                TransactionCommand(c6),
                TransactionCommand(c7),
                EXEC()
            ).9.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<
        C0: RESPCommand,
        C1: RESPCommand,
        C2: RESPCommand,
        C3: RESPCommand,
        C4: RESPCommand,
        C5: RESPCommand,
        C6: RESPCommand,
        C7: RESPCommand,
        C8: RESPCommand
    >(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5,
        _ c6: C6,
        _ c7: C7,
        _ c8: C8
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>, Result<C6.Response, Error>, Result<C7.Response, Error>, Result<C8.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                TransactionCommand(c0),
                TransactionCommand(c1),
                TransactionCommand(c2),
                TransactionCommand(c3),
                TransactionCommand(c4),
                TransactionCommand(c5),
                TransactionCommand(c6),
                TransactionCommand(c7),
                TransactionCommand(c8),
                EXEC()
            ).10.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<
        C0: RESPCommand,
        C1: RESPCommand,
        C2: RESPCommand,
        C3: RESPCommand,
        C4: RESPCommand,
        C5: RESPCommand,
        C6: RESPCommand,
        C7: RESPCommand,
        C8: RESPCommand,
        C9: RESPCommand
    >(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5,
        _ c6: C6,
        _ c7: C7,
        _ c8: C8,
        _ c9: C9
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>, Result<C6.Response, Error>, Result<C7.Response, Error>, Result<C8.Response, Error>, Result<C9.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                TransactionCommand(c0),
                TransactionCommand(c1),
                TransactionCommand(c2),
                TransactionCommand(c3),
                TransactionCommand(c4),
                TransactionCommand(c5),
                TransactionCommand(c6),
                TransactionCommand(c7),
                TransactionCommand(c8),
                TransactionCommand(c9),
                EXEC()
            ).11.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }
}
