/// NOTE: THIS FILE IS AUTO-GENERATED BY dev/generate-transaction-commands.sh

import NIOCore

@available(valkeySwift 1.0, *)
extension ValkeyConnection {

    @inlinable
    public func transaction<C0: ValkeyCommand>(_ c0: C0) async throws -> (Result<C0.Response, Error>) {
        guard let responses = try await self.pipeline(MULTI(), ValkeyRawResponseCommand(c0), EXEC()).2.get() else {
            throw ValkeyClientError(.transactionAborted)
        }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: ValkeyCommand, C1: ValkeyCommand>(
        _ c0: C0,
        _ c1: C1
    ) async throws -> (Result<C0.Response, Error>, Result<C1.Response, Error>) {
        guard let responses = try await self.pipeline(MULTI(), ValkeyRawResponseCommand(c0), ValkeyRawResponseCommand(c1), EXEC()).3.get() else {
            throw ValkeyClientError(.transactionAborted)
        }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: ValkeyCommand, C1: ValkeyCommand, C2: ValkeyCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2
    ) async throws -> (Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                ValkeyRawResponseCommand(c0),
                ValkeyRawResponseCommand(c1),
                ValkeyRawResponseCommand(c2),
                EXEC()
            ).4.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: ValkeyCommand, C1: ValkeyCommand, C2: ValkeyCommand, C3: ValkeyCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3
    ) async throws -> (Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                ValkeyRawResponseCommand(c0),
                ValkeyRawResponseCommand(c1),
                ValkeyRawResponseCommand(c2),
                ValkeyRawResponseCommand(c3),
                EXEC()
            ).5.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: ValkeyCommand, C1: ValkeyCommand, C2: ValkeyCommand, C3: ValkeyCommand, C4: ValkeyCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                ValkeyRawResponseCommand(c0),
                ValkeyRawResponseCommand(c1),
                ValkeyRawResponseCommand(c2),
                ValkeyRawResponseCommand(c3),
                ValkeyRawResponseCommand(c4),
                EXEC()
            ).6.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<C0: ValkeyCommand, C1: ValkeyCommand, C2: ValkeyCommand, C3: ValkeyCommand, C4: ValkeyCommand, C5: ValkeyCommand>(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                ValkeyRawResponseCommand(c0),
                ValkeyRawResponseCommand(c1),
                ValkeyRawResponseCommand(c2),
                ValkeyRawResponseCommand(c3),
                ValkeyRawResponseCommand(c4),
                ValkeyRawResponseCommand(c5),
                EXEC()
            ).7.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<
        C0: ValkeyCommand,
        C1: ValkeyCommand,
        C2: ValkeyCommand,
        C3: ValkeyCommand,
        C4: ValkeyCommand,
        C5: ValkeyCommand,
        C6: ValkeyCommand
    >(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5,
        _ c6: C6
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>, Result<C6.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                ValkeyRawResponseCommand(c0),
                ValkeyRawResponseCommand(c1),
                ValkeyRawResponseCommand(c2),
                ValkeyRawResponseCommand(c3),
                ValkeyRawResponseCommand(c4),
                ValkeyRawResponseCommand(c5),
                ValkeyRawResponseCommand(c6),
                EXEC()
            ).8.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<
        C0: ValkeyCommand,
        C1: ValkeyCommand,
        C2: ValkeyCommand,
        C3: ValkeyCommand,
        C4: ValkeyCommand,
        C5: ValkeyCommand,
        C6: ValkeyCommand,
        C7: ValkeyCommand
    >(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5,
        _ c6: C6,
        _ c7: C7
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>, Result<C6.Response, Error>, Result<C7.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                ValkeyRawResponseCommand(c0),
                ValkeyRawResponseCommand(c1),
                ValkeyRawResponseCommand(c2),
                ValkeyRawResponseCommand(c3),
                ValkeyRawResponseCommand(c4),
                ValkeyRawResponseCommand(c5),
                ValkeyRawResponseCommand(c6),
                ValkeyRawResponseCommand(c7),
                EXEC()
            ).9.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<
        C0: ValkeyCommand,
        C1: ValkeyCommand,
        C2: ValkeyCommand,
        C3: ValkeyCommand,
        C4: ValkeyCommand,
        C5: ValkeyCommand,
        C6: ValkeyCommand,
        C7: ValkeyCommand,
        C8: ValkeyCommand
    >(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5,
        _ c6: C6,
        _ c7: C7,
        _ c8: C8
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>, Result<C6.Response, Error>, Result<C7.Response, Error>, Result<C8.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                ValkeyRawResponseCommand(c0),
                ValkeyRawResponseCommand(c1),
                ValkeyRawResponseCommand(c2),
                ValkeyRawResponseCommand(c3),
                ValkeyRawResponseCommand(c4),
                ValkeyRawResponseCommand(c5),
                ValkeyRawResponseCommand(c6),
                ValkeyRawResponseCommand(c7),
                ValkeyRawResponseCommand(c8),
                EXEC()
            ).10.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }

    @inlinable
    public func transaction<
        C0: ValkeyCommand,
        C1: ValkeyCommand,
        C2: ValkeyCommand,
        C3: ValkeyCommand,
        C4: ValkeyCommand,
        C5: ValkeyCommand,
        C6: ValkeyCommand,
        C7: ValkeyCommand,
        C8: ValkeyCommand,
        C9: ValkeyCommand
    >(
        _ c0: C0,
        _ c1: C1,
        _ c2: C2,
        _ c3: C3,
        _ c4: C4,
        _ c5: C5,
        _ c6: C6,
        _ c7: C7,
        _ c8: C8,
        _ c9: C9
    ) async throws -> (
        Result<C0.Response, Error>, Result<C1.Response, Error>, Result<C2.Response, Error>, Result<C3.Response, Error>, Result<C4.Response, Error>,
        Result<C5.Response, Error>, Result<C6.Response, Error>, Result<C7.Response, Error>, Result<C8.Response, Error>, Result<C9.Response, Error>
    ) {
        guard
            let responses = try await self.pipeline(
                MULTI(),
                ValkeyRawResponseCommand(c0),
                ValkeyRawResponseCommand(c1),
                ValkeyRawResponseCommand(c2),
                ValkeyRawResponseCommand(c3),
                ValkeyRawResponseCommand(c4),
                ValkeyRawResponseCommand(c5),
                ValkeyRawResponseCommand(c6),
                ValkeyRawResponseCommand(c7),
                ValkeyRawResponseCommand(c8),
                ValkeyRawResponseCommand(c9),
                EXEC()
            ).11.get()
        else { throw ValkeyClientError(.transactionAborted) }
        return responses.decodeElementResults()
    }
}
