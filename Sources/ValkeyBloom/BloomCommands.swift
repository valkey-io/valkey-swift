//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore
import Valkey

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

@_documentation(visibility: internal)
public enum BF {
    /// Add a single item to a bloom filter. The bloom filter is created if it doesn't exist
    @_documentation(visibility: internal)
    public struct ADD<Value: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var value: Value

        @inlinable public init(_ key: ValkeyKey, value: Value) {
            self.key = key
            self.value = value
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("BF.ADD", key, RESPBulkString(value))
        }
    }

    /// Returns the cardinality of a bloom filter
    @_documentation(visibility: internal)
    public struct CARD: ValkeyCommand {
        public var key: ValkeyKey

        @inlinable public init(_ key: ValkeyKey) {
            self.key = key
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("BF.CARD", key)
        }
    }

    /// Determines if the bloom filter contains the specified item
    @_documentation(visibility: internal)
    public struct EXISTS<Value: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var value: Value

        @inlinable public init(_ key: ValkeyKey, value: Value) {
            self.key = key
            self.value = value
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("BF.EXISTS", key, RESPBulkString(value))
        }
    }

    /// Returns usage information and properties of a specific bloom filter
    @_documentation(visibility: internal)
    public struct INFO: ValkeyCommand {
        public enum Sortby: RESPRenderable, Sendable, Hashable {
            case capacity
            case size
            case filters
            case expansion
            case error
            case tightening
            case maxscaledcapacity

            @inlinable
            public var respEntries: Int { 1 }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                switch self {
                case .capacity: "CAPACITY".encode(into: &commandEncoder)
                case .size: "SIZE".encode(into: &commandEncoder)
                case .filters: "FILTERS".encode(into: &commandEncoder)
                case .expansion: "EXPANSION".encode(into: &commandEncoder)
                case .error: "ERROR".encode(into: &commandEncoder)
                case .tightening: "TIGHTENTING".encode(into: &commandEncoder)
                case .maxscaledcapacity: "MAXSCALEDCAPACITY".encode(into: &commandEncoder)
                }
            }
        }
        public var key: ValkeyKey
        public var sortby: Sortby?

        @inlinable public init(_ key: ValkeyKey, sortby: Sortby? = nil) {
            self.key = key
            self.sortby = sortby
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("BF.INFO", key, sortby)
        }
    }

    /// Creates a bloom filter with 0 or more items or adds items to an existing bloom filter
    @_documentation(visibility: internal)
    public struct INSERT: ValkeyCommand {
        public var key: ValkeyKey
        public var capacity: Int?
        public var error: Double?
        public var expansion: Int?
        public var seed: String?
        public var tightening: Double?
        public var validatescaleto: Int?
        public var nonscaling: Bool
        public var nocreate: Bool
        public var values: [String]

        @inlinable public init(
            _ key: ValkeyKey,
            capacity: Int? = nil,
            error: Double? = nil,
            expansion: Int? = nil,
            seed: String? = nil,
            tightening: Double? = nil,
            validatescaleto: Int? = nil,
            nonscaling: Bool = false,
            nocreate: Bool = false,
            values: [String] = []
        ) {
            self.key = key
            self.capacity = capacity
            self.error = error
            self.expansion = expansion
            self.seed = seed
            self.tightening = tightening
            self.validatescaleto = validatescaleto
            self.nonscaling = nonscaling
            self.nocreate = nocreate
            self.values = values
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray(
                "BF.INSERT",
                key,
                RESPWithToken("CAPACITY", capacity),
                RESPWithToken("ERROR", error),
                RESPWithToken("EXPANSION", expansion),
                RESPWithToken("SEED", seed),
                RESPWithToken("TIGHTENING", tightening),
                RESPWithToken("VALIDATESCALETO", validatescaleto),
                RESPPureToken("NONSCALING", nonscaling),
                RESPPureToken("NOCREATE", nocreate),
                RESPWithToken("ITEMS", values)
            )
        }
    }

    /// Restores a bloom filter in a single operation. The command is only generated during AOF Rewrite of bloom filters
    @_documentation(visibility: internal)
    public struct LOAD<Dump: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var dump: Dump

        @inlinable public init(_ key: ValkeyKey, dump: Dump) {
            self.key = key
            self.dump = dump
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("BF.LOAD", key, RESPBulkString(dump))
        }
    }

    /// Adds one or more items to a bloom filter. The bloom filter is created if it doesn't exist
    @_documentation(visibility: internal)
    public struct MADD<Value: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var values: [Value]

        @inlinable public init(_ key: ValkeyKey, values: [Value]) {
            self.key = key
            self.values = values
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("BF.MADD", key, values.map { RESPBulkString($0) })
        }
    }

    /// Determines if the bloom filter contains one or more items
    @_documentation(visibility: internal)
    public struct MEXISTS<Value: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var values: [Value]

        @inlinable public init(_ key: ValkeyKey, values: [Value]) {
            self.key = key
            self.values = values
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("BF.MEXISTS", key, values.map { RESPBulkString($0) })
        }
    }

    /// Creates an empty bloom filter with the specified properties
    @_documentation(visibility: internal)
    public struct RESERVE: ValkeyCommand {
        public var key: ValkeyKey
        public var errorRate: Double
        public var capacity: Int
        public var expansion: Int?
        public var nonscaling: Bool

        @inlinable public init(_ key: ValkeyKey, errorRate: Double, capacity: Int, expansion: Int? = nil, nonscaling: Bool = false) {
            self.key = key
            self.errorRate = errorRate
            self.capacity = capacity
            self.expansion = expansion
            self.nonscaling = nonscaling
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray(
                "BF.RESERVE",
                key,
                errorRate,
                capacity,
                RESPWithToken("EXPANSION", expansion),
                RESPPureToken("NONSCALING", nonscaling)
            )
        }
    }

}

extension ValkeyConnectionProtocol {
    /// Add a single item to a bloom filter. The bloom filter is created if it doesn't exist
    ///
    /// - Documentation: [BF.ADD](https://valkey.io/commands/bf.add)
    /// - Complexity: O(N), where N is the number of hash functions used by the bloom filter.
    @inlinable
    @discardableResult
    public func bfAdd<Value: RESPStringRenderable>(_ key: ValkeyKey, value: Value) async throws -> RESPToken {
        try await send(command: BF.ADD(key, value: value))
    }

    /// Returns the cardinality of a bloom filter
    ///
    /// - Documentation: [BF.CARD](https://valkey.io/commands/bf.card)
    /// - Complexity: O(1)
    @inlinable
    @discardableResult
    public func bfCard(_ key: ValkeyKey) async throws -> BF.CARD.Response {
        try await send(command: BF.CARD(key))
    }

    /// Determines if the bloom filter contains the specified item
    ///
    /// - Documentation: [BF.EXISTS](https://valkey.io/commands/bf.exists)
    /// - Complexity: O(N), where N is the number of hash functions used by the bloom filter.
    @inlinable
    @discardableResult
    public func bfExists<Value: RESPStringRenderable>(_ key: ValkeyKey, value: Value) async throws -> RESPToken {
        try await send(command: BF.EXISTS(key, value: value))
    }

    /// Returns usage information and properties of a specific bloom filter
    ///
    /// - Documentation: [BF.INFO](https://valkey.io/commands/bf.info)
    /// - Complexity: O(1)
    @inlinable
    @discardableResult
    public func bfInfo(_ key: ValkeyKey, sortby: BF.INFO.Sortby? = nil) async throws -> BF.INFO.Response {
        try await send(command: BF.INFO(key, sortby: sortby))
    }

    /// Creates a bloom filter with 0 or more items or adds items to an existing bloom filter
    ///
    /// - Documentation: [BF.INSERT](https://valkey.io/commands/bf.insert)
    /// - Complexity: O(N * K), where N is the number of hash functions used by the bloom filter and K is the number of items being added
    @inlinable
    @discardableResult
    public func bfInsert(
        _ key: ValkeyKey,
        capacity: Int? = nil,
        error: Double? = nil,
        expansion: Int? = nil,
        seed: String? = nil,
        tightening: Double? = nil,
        validatescaleto: Int? = nil,
        nonscaling: Bool = false,
        nocreate: Bool = false,
        values: [String] = []
    ) async throws -> BF.INSERT.Response {
        try await send(
            command: BF.INSERT(
                key,
                capacity: capacity,
                error: error,
                expansion: expansion,
                seed: seed,
                tightening: tightening,
                validatescaleto: validatescaleto,
                nonscaling: nonscaling,
                nocreate: nocreate,
                values: values
            )
        )
    }

    /// Restores a bloom filter in a single operation. The command is only generated during AOF Rewrite of bloom filters
    ///
    /// - Documentation: [BF.LOAD](https://valkey.io/commands/bf.load)
    /// - Complexity: O(N), where N is the capacity
    @inlinable
    @discardableResult
    public func bfLoad<Dump: RESPStringRenderable>(_ key: ValkeyKey, dump: Dump) async throws -> RESPToken {
        try await send(command: BF.LOAD(key, dump: dump))
    }

    /// Adds one or more items to a bloom filter. The bloom filter is created if it doesn't exist
    ///
    /// - Documentation: [BF.MADD](https://valkey.io/commands/bf.madd)
    /// - Complexity: O(N * K), where N is the number of hash functions used by the bloom filter and K is the number of items being added
    @inlinable
    @discardableResult
    public func bfMadd<Value: RESPStringRenderable>(_ key: ValkeyKey, values: [Value]) async throws -> RESPToken {
        try await send(command: BF.MADD(key, values: values))
    }

    /// Determines if the bloom filter contains one or more items
    ///
    /// - Documentation: [BF.MEXISTS](https://valkey.io/commands/bf.mexists)
    /// - Complexity: O(K * N), where N is the number of hash functions used by the bloom filter and K is the number of items
    @inlinable
    @discardableResult
    public func bfMexists<Value: RESPStringRenderable>(_ key: ValkeyKey, values: [Value]) async throws -> RESPToken {
        try await send(command: BF.MEXISTS(key, values: values))
    }

    /// Creates an empty bloom filter with the specified properties
    ///
    /// - Documentation: [BF.RESERVE](https://valkey.io/commands/bf.reserve)
    /// - Complexity: O(1)
    @inlinable
    @discardableResult
    public func bfReserve(
        _ key: ValkeyKey,
        errorRate: Double,
        capacity: Int,
        expansion: Int? = nil,
        nonscaling: Bool = false
    ) async throws -> BF.RESERVE.Response {
        try await send(command: BF.RESERVE(key, errorRate: errorRate, capacity: capacity, expansion: expansion, nonscaling: nonscaling))
    }

}
