{
  "ACL CAT": {
    "summary": "Lists the ACL categories, or the commands inside a category.",
    "complexity": "O(1) since the categories and commands are a fixed set.",
    "group": "server",
    "since": "6.0.0",
    "arity": -2,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "anyOf": [
        {
          "type": "array",
          "description": "In case `category` was not given, a list of existing ACL categories",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "array",
          "description": "In case `category` was given, list of commands that fall under the provided ACL category.",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "category",
        "type": "string",
        "optional": true
      }
    ]
  },
  "ACL DELUSER": {
    "summary": "Deletes ACL users, and terminates their connections.",
    "complexity": "O(1) amortized time considering the typical user.",
    "group": "server",
    "since": "6.0.0",
    "arity": -3,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The number of users that were deleted."
    },
    "arguments": [
      {
        "name": "username",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "ACL DRYRUN": {
    "summary": "Simulates the execution of a command by a user, without executing the command.",
    "complexity": "O(1).",
    "group": "server",
    "since": "7.0.0",
    "arity": -4,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "anyOf": [
        {
          "const": "OK",
          "description": "The given user may successfully execute the given command."
        },
        {
          "type": "string",
          "description": "The description of the problem, in case the user is not allowed to run the given command."
        }
      ]
    },
    "arguments": [
      {
        "name": "username",
        "type": "string"
      },
      {
        "name": "command",
        "type": "string"
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "ACL GENPASS": {
    "summary": "Generates a pseudorandom, secure password that can be used to identify ACL users.",
    "complexity": "O(1)",
    "group": "server",
    "since": "6.0.0",
    "arity": -2,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "type": "string",
      "description": "Pseudorandom data. By default it contains 64 bytes, representing 256 bits of data. If `bits` was given, the output string length is the number of specified bits (rounded to the next multiple of 4) divided by 4."
    },
    "arguments": [
      {
        "name": "bits",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "ACL GETUSER": {
    "summary": "Lists the ACL rules of a user.",
    "complexity": "O(N). Where N is the number of password, command and pattern rules that the user has.",
    "group": "server",
    "since": "6.0.0",
    "arity": 3,
    "container": "ACL",
    "function": "aclCommand",
    "history": [
      [
        "6.2.0",
        "Added Pub/Sub channel patterns."
      ],
      [
        "7.0.0",
        "Added selectors and changed the format of key and channel patterns from a list to their rule representation."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "arguments": [
      {
        "name": "username",
        "type": "string"
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "A set of ACL rule definitions for the user.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "flags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "passwords": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "commands": {
              "description": "Root selector's commands.",
              "type": "string"
            },
            "keys": {
              "description": "Root selector's keys.",
              "type": "string"
            },
            "channels": {
              "description": "Root selector's channels.",
              "type": "string"
            },
            "selectors": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "commands": {
                    "type": "string"
                  },
                  "keys": {
                    "type": "string"
                  },
                  "channels": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        {
          "description": "If user does not exist",
          "type": "null"
        }
      ]
    }
  },
  "ACL HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "server",
    "since": "6.0.0",
    "arity": 2,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "A list of subcommands and their description.",
      "items": {
        "type": "string"
      }
    }
  },
  "ACL LIST": {
    "summary": "Dumps the effective rules in ACL file format.",
    "complexity": "O(N). Where N is the number of configured users.",
    "group": "server",
    "since": "6.0.0",
    "arity": 2,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "A list of currently active ACL rules.",
      "items": {
        "type": "string"
      }
    }
  },
  "ACL LOAD": {
    "summary": "Reloads the rules from the configured ACL file.",
    "complexity": "O(N). Where N is the number of configured users.",
    "group": "server",
    "since": "6.0.0",
    "arity": 2,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "ACL LOG": {
    "summary": "Lists recent security events generated due to ACL rules.",
    "complexity": "O(N) with N being the number of entries shown.",
    "group": "server",
    "since": "6.0.0",
    "arity": -2,
    "container": "ACL",
    "function": "aclCommand",
    "history": [
      [
        "7.2.0",
        "Added entry ID, timestamp created, and timestamp last updated."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "In case `RESET` was not given, a list of recent ACL security events.",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "count": {
                "type": "integer"
              },
              "reason": {
                "type": "string"
              },
              "context": {
                "type": "string"
              },
              "object": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "age-seconds": {
                "type": "number"
              },
              "client-info": {
                "type": "string"
              },
              "entry-id": {
                "type": "integer"
              },
              "timestamp-created": {
                "type": "integer"
              },
              "timestamp-last-updated": {
                "type": "integer"
              }
            }
          }
        },
        {
          "const": "OK",
          "description": "In case `RESET` was given, OK indicates ACL log was cleared."
        }
      ]
    },
    "arguments": [
      {
        "name": "operation",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "count",
            "type": "integer"
          },
          {
            "name": "reset",
            "type": "pure-token",
            "token": "RESET"
          }
        ]
      }
    ]
  },
  "ACL SAVE": {
    "summary": "Saves the effective ACL rules in the configured ACL file.",
    "complexity": "O(N). Where N is the number of configured users.",
    "group": "server",
    "since": "6.0.0",
    "arity": 2,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "ACL SETUSER": {
    "summary": "Creates and modifies an ACL user and its rules.",
    "complexity": "O(N). Where N is the number of rules provided.",
    "group": "server",
    "since": "6.0.0",
    "arity": -3,
    "container": "ACL",
    "function": "aclCommand",
    "history": [
      [
        "6.2.0",
        "Added Pub/Sub channel patterns."
      ],
      [
        "7.0.0",
        "Added selectors and key based permissions."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "username",
        "type": "string"
      },
      {
        "name": "rule",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "ACL USERS": {
    "summary": "Lists all ACL users.",
    "complexity": "O(N). Where N is the number of configured users.",
    "group": "server",
    "since": "6.0.0",
    "arity": 2,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of existing ACL users.",
      "items": {
        "type": "string"
      }
    }
  },
  "ACL WHOAMI": {
    "summary": "Returns the authenticated username of the current connection.",
    "complexity": "O(1)",
    "group": "server",
    "since": "6.0.0",
    "arity": 2,
    "container": "ACL",
    "function": "aclCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "reply_schema": {
      "type": "string",
      "description": "The username of the current connection."
    }
  },
  "ACL": {
    "summary": "A container for Access List Control commands.",
    "complexity": "Depends on subcommand.",
    "group": "server",
    "since": "6.0.0",
    "arity": -2,
    "command_flags": [
      "SENTINEL"
    ]
  },
  "APPEND": {
    "summary": "Appends a string to the value of a key. Creates the key if it doesn't exist.",
    "complexity": "O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by the server will double the free space available on every reallocation.",
    "group": "string",
    "since": "2.0.0",
    "arity": 3,
    "function": "appendCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The length of the string after the append operation."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "value",
        "type": "string"
      }
    ]
  },
  "ASKING": {
    "summary": "Signals that a cluster client is following an -ASK redirect.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 1,
    "function": "askingCommand",
    "command_flags": [
      "FAST"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "AUTH": {
    "summary": "Authenticates the connection.",
    "complexity": "O(N) where N is the number of passwords defined for the user",
    "group": "connection",
    "since": "1.0.0",
    "arity": -2,
    "function": "authCommand",
    "history": [
      [
        "6.0.0",
        "Added ACL style (username and password)."
      ]
    ],
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "NO_AUTH",
      "SENTINEL",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "username",
        "type": "string",
        "optional": true,
        "since": "6.0.0"
      },
      {
        "name": "password",
        "type": "string"
      }
    ]
  },
  "BGREWRITEAOF": {
    "summary": "Asynchronously rewrites the append-only file to disk.",
    "complexity": "O(1)",
    "group": "server",
    "since": "1.0.0",
    "arity": 1,
    "function": "bgrewriteaofCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NOSCRIPT"
    ],
    "reply_schema": {
      "description": "A simple string reply indicating that the rewriting started or is about to start ASAP",
      "type": "string"
    }
  },
  "BGSAVE": {
    "summary": "Asynchronously saves the database(s) to disk.",
    "complexity": "O(1)",
    "group": "server",
    "since": "1.0.0",
    "arity": -1,
    "function": "bgsaveCommand",
    "history": [
      [
        "3.2.2",
        "Added the `SCHEDULE` option."
      ],
      [
        "8.1.0",
        "Added the `CANCEL` option."
      ]
    ],
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NOSCRIPT"
    ],
    "arguments": [
      {
        "name": "operation",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "schedule",
            "token": "SCHEDULE",
            "type": "pure-token",
            "since": "3.2.2"
          },
          {
            "name": "cancel",
            "token": "CANCEL",
            "type": "pure-token",
            "since": "8.1.0"
          }
        ]
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": "Background saving started"
        },
        {
          "const": "Background saving scheduled"
        },
        {
          "const": "Background saving cancelled"
        },
        {
          "const": "Scheduled background saving cancelled"
        }
      ]
    }
  },
  "BITCOUNT": {
    "summary": "Counts the number of set bits (population counting) in a string.",
    "complexity": "O(N)",
    "group": "bitmap",
    "since": "2.6.0",
    "arity": -2,
    "function": "bitcountCommand",
    "history": [
      [
        "7.0.0",
        "Added the `BYTE|BIT` option."
      ],
      [
        "8.0.0",
        "`end` made optional; when called without argument the command reports the last BYTE."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "BITMAP"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "range",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "start",
            "type": "integer"
          },
          {
            "name": "end-unit-block",
            "type": "block",
            "optional": true,
            "arguments": [
              {
                "name": "end",
                "type": "integer"
              },
              {
                "name": "unit",
                "type": "oneof",
                "optional": true,
                "since": "7.0.0",
                "arguments": [
                  {
                    "name": "byte",
                    "type": "pure-token",
                    "token": "BYTE"
                  },
                  {
                    "name": "bit",
                    "type": "pure-token",
                    "token": "BIT"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "The number of bits set to 1.",
      "type": "integer",
      "minimum": 0
    }
  },
  "BITFIELD_RO": {
    "summary": "Performs arbitrary read-only bitfield integer operations on strings.",
    "complexity": "O(1) for each subcommand specified",
    "group": "bitmap",
    "since": "6.0.0",
    "arity": -2,
    "function": "bitfieldroCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "BITMAP"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "token": "GET",
        "name": "get-block",
        "type": "block",
        "optional": true,
        "multiple": true,
        "multiple_token": true,
        "arguments": [
          {
            "name": "encoding",
            "type": "string"
          },
          {
            "name": "offset",
            "type": "integer"
          }
        ]
      }
    ],
    "reply_schema": {
      "type": "array",
      "items": {
        "description": "The result of the subcommand at the same position",
        "type": "integer"
      }
    }
  },
  "BITFIELD": {
    "summary": "Performs arbitrary bitfield integer operations on strings.",
    "complexity": "O(1) for each subcommand specified",
    "group": "bitmap",
    "since": "3.2.0",
    "arity": -2,
    "function": "bitfieldCommand",
    "get_keys_function": "bitfieldGetKeys",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "BITMAP"
    ],
    "key_specs": [
      {
        "notes": "This command allows both access and modification of the key",
        "flags": [
          "RW",
          "UPDATE",
          "ACCESS",
          "VARIABLE_FLAGS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "operation",
        "type": "oneof",
        "multiple": true,
        "optional": true,
        "arguments": [
          {
            "token": "GET",
            "name": "get-block",
            "type": "block",
            "arguments": [
              {
                "name": "encoding",
                "type": "string"
              },
              {
                "name": "offset",
                "type": "integer"
              }
            ]
          },
          {
            "name": "write",
            "type": "block",
            "arguments": [
              {
                "token": "OVERFLOW",
                "name": "overflow-block",
                "type": "oneof",
                "optional": true,
                "arguments": [
                  {
                    "name": "wrap",
                    "type": "pure-token",
                    "token": "WRAP"
                  },
                  {
                    "name": "sat",
                    "type": "pure-token",
                    "token": "SAT"
                  },
                  {
                    "name": "fail",
                    "type": "pure-token",
                    "token": "FAIL"
                  }
                ]
              },
              {
                "name": "write-operation",
                "type": "oneof",
                "arguments": [
                  {
                    "token": "SET",
                    "name": "set-block",
                    "type": "block",
                    "arguments": [
                      {
                        "name": "encoding",
                        "type": "string"
                      },
                      {
                        "name": "offset",
                        "type": "integer"
                      },
                      {
                        "name": "value",
                        "type": "integer"
                      }
                    ]
                  },
                  {
                    "token": "INCRBY",
                    "name": "incrby-block",
                    "type": "block",
                    "arguments": [
                      {
                        "name": "encoding",
                        "type": "string"
                      },
                      {
                        "name": "offset",
                        "type": "integer"
                      },
                      {
                        "name": "increment",
                        "type": "integer"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "reply_schema": {
      "type": "array",
      "items": {
        "oneOf": [
          {
            "description": "The result of the subcommand at the same position",
            "type": "integer"
          },
          {
            "description": "In case OVERFLOW FAIL was given and overflows or underflows detected",
            "type": "null"
          }
        ]
      }
    }
  },
  "BITOP": {
    "summary": "Performs bitwise operations on multiple strings, and stores the result.",
    "complexity": "O(N)",
    "group": "bitmap",
    "since": "2.6.0",
    "arity": -4,
    "function": "bitopCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "BITMAP"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 3
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "operation",
        "type": "oneof",
        "arguments": [
          {
            "name": "and",
            "type": "pure-token",
            "token": "AND"
          },
          {
            "name": "or",
            "type": "pure-token",
            "token": "OR"
          },
          {
            "name": "xor",
            "type": "pure-token",
            "token": "XOR"
          },
          {
            "name": "not",
            "type": "pure-token",
            "token": "NOT"
          }
        ]
      },
      {
        "name": "destkey",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 1,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "The size of the string stored in the destination key, that is equal to the size of the longest input string.",
      "type": "integer",
      "minimum": 0
    }
  },
  "BITPOS": {
    "summary": "Finds the first set (1) or clear (0) bit in a string.",
    "complexity": "O(N)",
    "group": "bitmap",
    "since": "2.8.7",
    "arity": -3,
    "function": "bitposCommand",
    "history": [
      [
        "7.0.0",
        "Added the `BYTE|BIT` option."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "BITMAP"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "bit",
        "type": "integer"
      },
      {
        "name": "range",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "start",
            "type": "integer"
          },
          {
            "name": "end-unit-block",
            "type": "block",
            "optional": true,
            "arguments": [
              {
                "name": "end",
                "type": "integer"
              },
              {
                "name": "unit",
                "type": "oneof",
                "optional": true,
                "since": "7.0.0",
                "arguments": [
                  {
                    "name": "byte",
                    "type": "pure-token",
                    "token": "BYTE"
                  },
                  {
                    "name": "bit",
                    "type": "pure-token",
                    "token": "BIT"
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The position of the first bit set to 1 or 0 according to the request.",
          "type": "integer",
          "minimum": 0
        },
        {
          "description": "In case the `bit` argument is 1 and the string is empty or composed of just zero bytes.",
          "const": -1
        }
      ]
    }
  },
  "BLMOVE": {
    "summary": "Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.",
    "complexity": "O(1)",
    "group": "list",
    "since": "6.2.0",
    "arity": 6,
    "function": "blmoveCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "BLOCKING"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The popped element.",
          "type": "string"
        },
        {
          "description": "Operation timed-out",
          "type": "null"
        }
      ]
    },
    "arguments": [
      {
        "name": "source",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 1
      },
      {
        "name": "wherefrom",
        "type": "oneof",
        "arguments": [
          {
            "name": "left",
            "type": "pure-token",
            "token": "LEFT"
          },
          {
            "name": "right",
            "type": "pure-token",
            "token": "RIGHT"
          }
        ]
      },
      {
        "name": "whereto",
        "type": "oneof",
        "arguments": [
          {
            "name": "left",
            "type": "pure-token",
            "token": "LEFT"
          },
          {
            "name": "right",
            "type": "pure-token",
            "token": "RIGHT"
          }
        ]
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ]
  },
  "BLMPOP": {
    "summary": "Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.",
    "complexity": "O(N+M) where N is the number of provided keys and M is the number of elements returned.",
    "group": "list",
    "since": "7.0.0",
    "arity": -5,
    "function": "blmpopCommand",
    "get_keys_function": "blmpopGetKeys",
    "command_flags": [
      "WRITE",
      "BLOCKING"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Operation timed-out",
          "type": "null"
        },
        {
          "description": "The key from which elements were popped and the popped elements",
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "description": "List key from which elements were popped.",
              "type": "string"
            },
            {
              "description": "Array of popped elements.",
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "timeout",
        "type": "double"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "where",
        "type": "oneof",
        "arguments": [
          {
            "name": "left",
            "type": "pure-token",
            "token": "LEFT"
          },
          {
            "name": "right",
            "type": "pure-token",
            "token": "RIGHT"
          }
        ]
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "BLPOP": {
    "summary": "Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.",
    "complexity": "O(N) where N is the number of provided keys.",
    "group": "list",
    "since": "2.0.0",
    "arity": -3,
    "function": "blpopCommand",
    "history": [
      [
        "6.0.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "command_flags": [
      "WRITE",
      "BLOCKING"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -2,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "null",
          "description": "No element could be popped and timeout expired"
        },
        {
          "description": "The key from which the element was popped and the value of the popped element",
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "description": "List key from which the element was popped.",
              "type": "string"
            },
            {
              "description": "Value of the popped element.",
              "type": "string"
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ]
  },
  "BRPOP": {
    "summary": "Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.",
    "complexity": "O(N) where N is the number of provided keys.",
    "group": "list",
    "since": "2.0.0",
    "arity": -3,
    "function": "brpopCommand",
    "history": [
      [
        "6.0.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "command_flags": [
      "WRITE",
      "BLOCKING"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -2,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "No element could be popped and the timeout expired.",
          "type": "null"
        },
        {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "description": "The name of the key where an element was popped ",
              "type": "string"
            },
            {
              "description": "The value of the popped element",
              "type": "string"
            }
          ]
        }
      ]
    }
  },
  "BRPOPLPUSH": {
    "summary": "Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.",
    "complexity": "O(1)",
    "group": "list",
    "since": "2.2.0",
    "arity": 4,
    "function": "brpoplpushCommand",
    "history": [
      [
        "6.0.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "deprecated_since": "6.2.0",
    "replaced_by": "`BLMOVE` with the `RIGHT` and `LEFT` arguments",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "BLOCKING"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "string",
          "description": "The element being popped from source and pushed to destination."
        },
        {
          "type": "null",
          "description": "Timeout is reached."
        }
      ]
    },
    "arguments": [
      {
        "name": "source",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 1
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ]
  },
  "BZMPOP": {
    "summary": "Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.",
    "complexity": "O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.",
    "group": "sorted_set",
    "since": "7.0.0",
    "arity": -5,
    "function": "bzmpopCommand",
    "get_keys_function": "blmpopGetKeys",
    "command_flags": [
      "WRITE",
      "BLOCKING"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Timeout reached and no elements were popped.",
          "type": "null"
        },
        {
          "description": "The keyname and the popped members.",
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "description": "Keyname",
              "type": "string"
            },
            {
              "description": "Popped members and their scores.",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "description": "Member",
                    "type": "string"
                  },
                  {
                    "description": "Score",
                    "type": "number"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "timeout",
        "type": "double"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "where",
        "type": "oneof",
        "arguments": [
          {
            "name": "min",
            "type": "pure-token",
            "token": "MIN"
          },
          {
            "name": "max",
            "type": "pure-token",
            "token": "MAX"
          }
        ]
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "BZPOPMAX": {
    "summary": "Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.",
    "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
    "group": "sorted_set",
    "since": "5.0.0",
    "arity": -3,
    "function": "bzpopmaxCommand",
    "history": [
      [
        "6.0.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST",
      "BLOCKING"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -2,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Timeout reached and no elements were popped.",
          "type": "null"
        },
        {
          "description": "The keyname, popped member, and its score.",
          "type": "array",
          "minItems": 3,
          "maxItems": 3,
          "items": [
            {
              "description": "Keyname",
              "type": "string"
            },
            {
              "description": "Member",
              "type": "string"
            },
            {
              "description": "Score",
              "type": "number"
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ]
  },
  "BZPOPMIN": {
    "summary": "Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.",
    "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
    "group": "sorted_set",
    "since": "5.0.0",
    "arity": -3,
    "function": "bzpopminCommand",
    "history": [
      [
        "6.0.0",
        "`timeout` is interpreted as a double instead of an integer."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST",
      "BLOCKING"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -2,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Timeout reached and no elements were popped.",
          "type": "null"
        },
        {
          "description": "The keyname, popped member, and its score.",
          "type": "array",
          "minItems": 3,
          "maxItems": 3,
          "items": [
            {
              "description": "Keyname",
              "type": "string"
            },
            {
              "description": "Member",
              "type": "string"
            },
            {
              "description": "Score",
              "type": "number"
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "timeout",
        "type": "double"
      }
    ]
  },
  "CLIENT CACHING": {
    "summary": "Instructs the server whether to track the keys in the next request.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "6.0.0",
    "arity": 3,
    "container": "CLIENT",
    "function": "clientCachingCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "mode",
        "type": "oneof",
        "arguments": [
          {
            "name": "yes",
            "type": "pure-token",
            "token": "YES"
          },
          {
            "name": "no",
            "type": "pure-token",
            "token": "NO"
          }
        ]
      }
    ]
  },
  "CLIENT CAPA": {
    "summary": "A client claims its capability.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "8.0.0",
    "arity": -3,
    "container": "CLIENT",
    "function": "clientCapaCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "multiple": "true",
        "name": "capability",
        "type": "string"
      }
    ]
  },
  "CLIENT GETNAME": {
    "summary": "Returns the name of the connection.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "2.6.9",
    "arity": 2,
    "container": "CLIENT",
    "function": "clientGetNameCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "string",
          "description": "The connection name of the current connection"
        },
        {
          "type": "null",
          "description": "Connection name was not set"
        }
      ]
    }
  },
  "CLIENT GETREDIR": {
    "summary": "Returns the client ID to which the connection's tracking notifications are redirected.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "6.0.0",
    "arity": 2,
    "container": "CLIENT",
    "function": "clientGetredirCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": 0,
          "description": "Not redirecting notifications to any client."
        },
        {
          "const": -1,
          "description": "Client tracking is not enabled."
        },
        {
          "type": "integer",
          "description": "ID of the client we are redirecting the notifications to.",
          "minimum": 1
        }
      ]
    }
  },
  "CLIENT HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "5.0.0",
    "arity": 2,
    "container": "CLIENT",
    "function": "clientHelpCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "CLIENT ID": {
    "summary": "Returns the unique client ID of the connection.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "5.0.0",
    "arity": 2,
    "container": "CLIENT",
    "function": "clientIDCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The id of the client"
    }
  },
  "CLIENT IMPORT-SOURCE": {
    "summary": "Mark this client as an import source when server is in import mode.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "8.1.0",
    "arity": 3,
    "container": "CLIENT",
    "function": "clientImportSourceCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "enabled",
        "type": "oneof",
        "arguments": [
          {
            "name": "on",
            "type": "pure-token",
            "token": "ON"
          },
          {
            "name": "off",
            "type": "pure-token",
            "token": "OFF"
          }
        ]
      }
    ]
  },
  "CLIENT INFO": {
    "summary": "Returns information about the connection.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "6.2.0",
    "arity": 2,
    "container": "CLIENT",
    "function": "clientInfoCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "description": "A unique string, as described at the CLIENT LIST page, for the current client.",
      "type": "string"
    }
  },
  "CLIENT KILL": {
    "summary": "Terminates open connections.",
    "complexity": "O(N) where N is the number of client connections",
    "group": "connection",
    "since": "2.4.0",
    "arity": -3,
    "container": "CLIENT",
    "function": "clientKillCommand",
    "history": [
      [
        "2.8.12",
        "Added new filter format."
      ],
      [
        "2.8.12",
        "`ID` option."
      ],
      [
        "3.2.0",
        "Added `master` type in for `TYPE` option."
      ],
      [
        "5.0.0",
        "Replaced `slave` `TYPE` with `replica`. `slave` still supported for backward compatibility."
      ],
      [
        "6.2.0",
        "`LADDR` option."
      ],
      [
        "8.0.0",
        "`MAXAGE` option."
      ],
      [
        "8.0.0",
        "Replaced `master` `TYPE` with `primary`. `master` still supported for backward compatibility."
      ],
      [
        "8.1.0",
        "`ID` option accepts multiple IDs."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "arguments": [
      {
        "name": "filter",
        "type": "oneof",
        "arguments": [
          {
            "name": "old-format",
            "display": "ip:port",
            "type": "string",
            "deprecated_since": "2.8.12"
          },
          {
            "name": "new-format",
            "type": "oneof",
            "multiple": true,
            "arguments": [
              {
                "token": "ID",
                "name": "client-id",
                "type": "integer",
                "optional": true,
                "multiple": true,
                "since": "2.8.12"
              },
              {
                "token": "TYPE",
                "name": "client-type",
                "type": "oneof",
                "optional": true,
                "since": "2.8.12",
                "arguments": [
                  {
                    "name": "normal",
                    "type": "pure-token",
                    "token": "normal"
                  },
                  {
                    "name": "master",
                    "type": "pure-token",
                    "token": "master",
                    "since": "3.2.0"
                  },
                  {
                    "name": "primary",
                    "type": "pure-token",
                    "token": "primary",
                    "since": "8.0.0"
                  },
                  {
                    "name": "slave",
                    "type": "pure-token",
                    "token": "slave"
                  },
                  {
                    "name": "replica",
                    "type": "pure-token",
                    "token": "replica",
                    "since": "5.0.0"
                  },
                  {
                    "name": "pubsub",
                    "type": "pure-token",
                    "token": "pubsub"
                  }
                ]
              },
              {
                "token": "USER",
                "name": "username",
                "type": "string",
                "optional": true
              },
              {
                "token": "ADDR",
                "name": "addr",
                "display": "ip:port",
                "type": "string",
                "optional": true
              },
              {
                "token": "LADDR",
                "name": "laddr",
                "display": "ip:port",
                "type": "string",
                "optional": true,
                "since": "6.2.0"
              },
              {
                "token": "SKIPME",
                "name": "skipme",
                "type": "oneof",
                "optional": true,
                "arguments": [
                  {
                    "name": "yes",
                    "type": "pure-token",
                    "token": "YES"
                  },
                  {
                    "name": "no",
                    "type": "pure-token",
                    "token": "NO"
                  }
                ]
              },
              {
                "token": "MAXAGE",
                "name": "maxage",
                "type": "integer",
                "optional": true,
                "since": "8.0.0"
              }
            ]
          }
        ]
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "When called in 3 argument format.",
          "const": "OK"
        },
        {
          "description": "When called in filter/value format, the number of clients killed.",
          "type": "integer",
          "minimum": 0
        }
      ]
    }
  },
  "CLIENT LIST": {
    "summary": "Lists open connections.",
    "complexity": "O(N) where N is the number of client connections",
    "group": "connection",
    "since": "2.4.0",
    "arity": -2,
    "container": "CLIENT",
    "function": "clientListCommand",
    "history": [
      [
        "2.8.12",
        "Added unique client `id` field."
      ],
      [
        "5.0.0",
        "Added optional `TYPE` filter."
      ],
      [
        "6.0.0",
        "Added `user` field."
      ],
      [
        "6.2.0",
        "Added `argv-mem`, `tot-mem`, `laddr` and `redir` fields and the optional `ID` filter."
      ],
      [
        "7.0.0",
        "Added `resp`, `multi-mem`, `rbs` and `rbp` fields."
      ],
      [
        "7.0.3",
        "Added `ssub` field."
      ],
      [
        "8.0.0",
        "Replaced `master` `TYPE` with `primary`. `master` still supported for backward compatibility."
      ],
      [
        "8.1.0",
        "Added filters USER, ADDR, LADDR, SKIPME, and MAXAGE"
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "type": "string",
      "description": "Information and statistics about client connections"
    },
    "arguments": [
      {
        "token": "TYPE",
        "name": "client-type",
        "type": "oneof",
        "optional": true,
        "since": "5.0.0",
        "arguments": [
          {
            "name": "normal",
            "type": "pure-token",
            "token": "normal"
          },
          {
            "name": "master",
            "type": "pure-token",
            "token": "master"
          },
          {
            "name": "replica",
            "type": "pure-token",
            "token": "replica"
          },
          {
            "name": "pubsub",
            "type": "pure-token",
            "token": "pubsub"
          }
        ]
      },
      {
        "name": "client-id",
        "token": "ID",
        "type": "integer",
        "optional": true,
        "multiple": true,
        "since": "6.2.0"
      },
      {
        "token": "USER",
        "name": "username",
        "type": "string",
        "optional": true,
        "since": "8.1.0"
      },
      {
        "token": "ADDR",
        "name": "addr",
        "display": "ip:port",
        "type": "string",
        "optional": true,
        "since": "8.1.0"
      },
      {
        "token": "LADDR",
        "name": "laddr",
        "display": "ip:port",
        "type": "string",
        "optional": true,
        "since": "8.1.0"
      },
      {
        "token": "SKIPME",
        "name": "skipme",
        "type": "oneof",
        "optional": true,
        "since": "8.1.0",
        "arguments": [
          {
            "name": "yes",
            "type": "pure-token",
            "token": "YES"
          },
          {
            "name": "no",
            "type": "pure-token",
            "token": "NO"
          }
        ]
      },
      {
        "token": "MAXAGE",
        "name": "maxage",
        "type": "integer",
        "optional": true,
        "since": "8.1.0"
      }
    ]
  },
  "CLIENT NO-EVICT": {
    "summary": "Sets the client eviction mode of the connection.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "7.0.0",
    "arity": 3,
    "container": "CLIENT",
    "function": "clientNoEvictCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "arguments": [
      {
        "name": "enabled",
        "type": "oneof",
        "arguments": [
          {
            "name": "on",
            "type": "pure-token",
            "token": "ON"
          },
          {
            "name": "off",
            "type": "pure-token",
            "token": "OFF"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLIENT NO-TOUCH": {
    "summary": "Controls whether commands sent by the client affect the LRU/LFU of accessed keys.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "7.2.0",
    "arity": 3,
    "container": "CLIENT",
    "function": "clientNoTouchCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "enabled",
        "type": "oneof",
        "arguments": [
          {
            "name": "on",
            "type": "pure-token",
            "token": "ON"
          },
          {
            "name": "off",
            "type": "pure-token",
            "token": "OFF"
          }
        ]
      }
    ]
  },
  "CLIENT PAUSE": {
    "summary": "Suspends commands processing.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "3.0.0",
    "arity": -3,
    "container": "CLIENT",
    "function": "clientPauseCommand",
    "history": [
      [
        "6.2.0",
        "`CLIENT PAUSE WRITE` mode added along with the `mode` option."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "arguments": [
      {
        "name": "timeout",
        "type": "integer"
      },
      {
        "name": "mode",
        "type": "oneof",
        "optional": true,
        "since": "6.2.0",
        "arguments": [
          {
            "name": "write",
            "type": "pure-token",
            "token": "WRITE"
          },
          {
            "name": "all",
            "type": "pure-token",
            "token": "ALL"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLIENT REPLY": {
    "summary": "Instructs the server whether to reply to commands.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "3.2.0",
    "arity": 3,
    "container": "CLIENT",
    "function": "clientReplyCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK",
      "description": "When called with either OFF or SKIP subcommands, no reply is made. When called with ON, reply is OK."
    },
    "arguments": [
      {
        "name": "action",
        "type": "oneof",
        "arguments": [
          {
            "name": "on",
            "type": "pure-token",
            "token": "ON"
          },
          {
            "name": "off",
            "type": "pure-token",
            "token": "OFF"
          },
          {
            "name": "skip",
            "type": "pure-token",
            "token": "SKIP"
          }
        ]
      }
    ]
  },
  "CLIENT SETINFO": {
    "summary": "Sets information specific to the client or connection.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "7.2.0",
    "arity": 4,
    "container": "CLIENT",
    "function": "clientSetinfoCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "attr",
        "type": "oneof",
        "arguments": [
          {
            "token": "lib-name",
            "name": "libname",
            "type": "string"
          },
          {
            "token": "lib-ver",
            "name": "libver",
            "type": "string"
          }
        ]
      }
    ]
  },
  "CLIENT SETNAME": {
    "summary": "Sets the connection name.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "2.6.9",
    "arity": 3,
    "container": "CLIENT",
    "function": "clientSetNameCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "arguments": [
      {
        "name": "connection-name",
        "type": "string"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLIENT TRACKING": {
    "summary": "Controls server-assisted client-side caching for the connection.",
    "complexity": "O(1). Some options may introduce additional complexity.",
    "group": "connection",
    "since": "6.0.0",
    "arity": -3,
    "container": "CLIENT",
    "function": "clientTrackingCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "arguments": [
      {
        "name": "status",
        "type": "oneof",
        "arguments": [
          {
            "name": "on",
            "type": "pure-token",
            "token": "ON"
          },
          {
            "name": "off",
            "type": "pure-token",
            "token": "OFF"
          }
        ]
      },
      {
        "token": "REDIRECT",
        "name": "client-id",
        "type": "integer",
        "optional": true
      },
      {
        "token": "PREFIX",
        "name": "prefix",
        "type": "string",
        "optional": true,
        "multiple": true,
        "multiple_token": true
      },
      {
        "name": "BCAST",
        "token": "BCAST",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "OPTIN",
        "token": "OPTIN",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "OPTOUT",
        "token": "OPTOUT",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "NOLOOP",
        "token": "NOLOOP",
        "type": "pure-token",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "If the client was successfully put into or taken out of tracking mode.",
      "const": "OK"
    }
  },
  "CLIENT TRACKINGINFO": {
    "summary": "Returns information about server-assisted client-side caching for the connection.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "6.2.0",
    "arity": 2,
    "container": "CLIENT",
    "function": "clientTrackingInfoCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "flags": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "const": "off",
                "description": "The connection isn't using server assisted client side caching."
              },
              {
                "const": "on",
                "description": "Server assisted client side caching is enabled for the connection."
              },
              {
                "const": "bcast",
                "description": "The client uses broadcasting mode."
              },
              {
                "const": "optin",
                "description": "The client does not cache keys by default."
              },
              {
                "const": "optout",
                "description": "The client caches keys by default."
              },
              {
                "const": "caching-yes",
                "description": "The next command will cache keys (exists only together with optin)."
              },
              {
                "const": "caching-no",
                "description": "The next command won't cache keys (exists only together with optout)."
              },
              {
                "const": "noloop",
                "description": "The client isn't notified about keys modified by itself."
              },
              {
                "const": "broken_redirect",
                "description": "The client ID used for redirection isn't valid anymore."
              }
            ]
          }
        },
        "redirect": {
          "type": "integer",
          "description": "The client ID used for notifications redirection, or -1 when none."
        },
        "prefixes": {
          "type": "array",
          "description": "List of key prefixes for which notifications are sent to the client.",
          "items": {
            "type": "string"
          }
        }
      }
    }
  },
  "CLIENT UNBLOCK": {
    "summary": "Unblocks a client blocked by a blocking command from a different connection.",
    "complexity": "O(log N) where N is the number of client connections",
    "group": "connection",
    "since": "5.0.0",
    "arity": -3,
    "container": "CLIENT",
    "function": "clientUnblockCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": 0,
          "description": "If the client was unblocked successfully."
        },
        {
          "const": 1,
          "description": "If the client wasn't unblocked."
        }
      ]
    },
    "arguments": [
      {
        "name": "client-id",
        "type": "integer"
      },
      {
        "name": "unblock-type",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "timeout",
            "type": "pure-token",
            "token": "TIMEOUT"
          },
          {
            "name": "error",
            "type": "pure-token",
            "token": "ERROR"
          }
        ]
      }
    ]
  },
  "CLIENT UNPAUSE": {
    "summary": "Resumes processing commands from paused clients.",
    "complexity": "O(N) Where N is the number of paused clients",
    "group": "connection",
    "since": "6.2.0",
    "arity": 2,
    "container": "CLIENT",
    "function": "clientUnpauseCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLIENT": {
    "summary": "A container for client connection commands.",
    "complexity": "Depends on subcommand.",
    "group": "connection",
    "since": "2.4.0",
    "function": "clientCommand",
    "arity": -2,
    "command_flags": [
      "SENTINEL"
    ]
  },
  "CLUSTER ADDSLOTS": {
    "summary": "Assigns new hash slots to a node.",
    "complexity": "O(N) where N is the total number of hash slot arguments",
    "group": "cluster",
    "since": "3.0.0",
    "arity": -3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "slot",
        "type": "integer",
        "multiple": true
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER ADDSLOTSRANGE": {
    "summary": "Assigns new hash slot ranges to a node.",
    "complexity": "O(N) where N is the total number of the slots between the start slot and end slot arguments.",
    "group": "cluster",
    "since": "7.0.0",
    "arity": -4,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "range",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "start-slot",
            "type": "integer"
          },
          {
            "name": "end-slot",
            "type": "integer"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER BUMPEPOCH": {
    "summary": "Advances the cluster config epoch.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "If the epoch was incremented.",
          "type": "string",
          "pattern": "^BUMPED [0-9]*$"
        },
        {
          "description": "If the node already has the greatest config epoch in the cluster.",
          "type": "string",
          "pattern": "^STILL [0-9]*$"
        }
      ]
    }
  },
  "CLUSTER COUNT-FAILURE-REPORTS": {
    "summary": "Returns the number of active failure reports active for a node.",
    "complexity": "O(N) where N is the number of failure reports",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "ADMIN",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "The number of active failure reports for the node.",
      "type": "integer",
      "minimum": 0
    }
  },
  "CLUSTER COUNTKEYSINSLOT": {
    "summary": "Returns the number of keys in a hash slot.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "STALE"
    ],
    "arguments": [
      {
        "name": "slot",
        "type": "integer"
      }
    ],
    "reply_schema": {
      "description": "The number of keys in the specified hash slot.",
      "type": "integer",
      "minimum": 0
    }
  },
  "CLUSTER DELSLOTS": {
    "summary": "Sets hash slots as unbound for a node.",
    "complexity": "O(N) where N is the total number of hash slot arguments",
    "group": "cluster",
    "since": "3.0.0",
    "arity": -3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "slot",
        "type": "integer",
        "multiple": true
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER DELSLOTSRANGE": {
    "summary": "Sets hash slot ranges as unbound for a node.",
    "complexity": "O(N) where N is the total number of the slots between the start slot and end slot arguments.",
    "group": "cluster",
    "since": "7.0.0",
    "arity": -4,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "range",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "start-slot",
            "type": "integer"
          },
          {
            "name": "end-slot",
            "type": "integer"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER FAILOVER": {
    "summary": "Forces a replica to perform a manual failover of its primary.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": -2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "options",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "force",
            "type": "pure-token",
            "token": "FORCE"
          },
          {
            "name": "takeover",
            "type": "pure-token",
            "token": "TAKEOVER"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER FLUSHSLOTS": {
    "summary": "Deletes all slots information from a node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER FORGET": {
    "summary": "Removes a node from the nodes table.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER GETKEYSINSLOT": {
    "summary": "Returns the key names in a hash slot.",
    "complexity": "O(N) where N is the number of requested keys",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 4,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "arguments": [
      {
        "name": "slot",
        "type": "integer"
      },
      {
        "name": "count",
        "type": "integer"
      }
    ],
    "reply_schema": {
      "description": "An array with up to count elements.",
      "type": "array",
      "items": {
        "description": "Key name.",
        "type": "string"
      }
    }
  },
  "CLUSTER HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "5.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "CLUSTER INFO": {
    "summary": "Returns information about the state of a node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "description": "A map between named fields and values in the form of <field>:<value> lines separated by newlines composed by the two bytes CRLF",
      "type": "string"
    }
  },
  "CLUSTER KEYSLOT": {
    "summary": "Returns the hash slot for a key.",
    "complexity": "O(N) where N is the number of bytes in the key",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "STALE"
    ],
    "arguments": [
      {
        "name": "key",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "The hash slot number for the specified key",
      "type": "integer",
      "minimum": 0
    }
  },
  "CLUSTER LINKS": {
    "summary": "Returns a list of all TCP links to and from peer nodes.",
    "complexity": "O(N) where N is the total number of Cluster nodes",
    "group": "cluster",
    "since": "7.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "description": "An array of cluster links and their attributes.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "direction": {
            "description": "This link is established by the local node _to_ the peer, or accepted by the local node _from_ the peer.",
            "oneOf": [
              {
                "description": "Connection initiated from peer.",
                "const": "from"
              },
              {
                "description": "Connection initiated to peer.",
                "const": "to"
              }
            ]
          },
          "node": {
            "description": "The node id of the peer.",
            "type": "string"
          },
          "create-time": {
            "description": "Unix time creation time of the link. (In the case of a _to_ link, this is the time when the TCP link is created by the local node, not the time when it is actually established.)",
            "type": "integer"
          },
          "events": {
            "description": "Events currently registered for the link. r means readable event, w means writable event.",
            "type": "string"
          },
          "send-buffer-allocated": {
            "description": "Allocated size of the link's send buffer, which is used to buffer outgoing messages toward the peer.",
            "type": "integer"
          },
          "send-buffer-used": {
            "description": "Size of the portion of the link's send buffer that is currently holding data(messages).",
            "type": "integer"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "CLUSTER MEET": {
    "summary": "Forces a node to handshake with another node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": -4,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "history": [
      [
        "4.0.0",
        "Added the optional `cluster_bus_port` argument."
      ]
    ],
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "ip",
        "type": "string"
      },
      {
        "name": "port",
        "type": "integer"
      },
      {
        "name": "cluster-bus-port",
        "type": "integer",
        "optional": true,
        "since": "4.0.0"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER MYID": {
    "summary": "Returns the ID of a node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "description": "The node id.",
      "type": "string"
    }
  },
  "CLUSTER MYSHARDID": {
    "summary": "Returns the shard ID of a node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "7.2.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "description": "The node's shard id.",
      "type": "string"
    }
  },
  "CLUSTER NODES": {
    "summary": "Returns the cluster configuration for a node.",
    "complexity": "O(N) where N is the total number of Cluster nodes",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "description": "The serialized cluster configuration.",
      "type": "string"
    }
  },
  "CLUSTER REPLICAS": {
    "summary": "Lists the replica nodes of a primary node.",
    "complexity": "O(N) where N is the number of replicas.",
    "group": "cluster",
    "since": "5.0.0",
    "arity": 3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "ADMIN",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "A list of replica nodes replicating from the specified primary node provided in the same format used by CLUSTER NODES.",
      "type": "array",
      "items": {
        "type": "string",
        "description": "The serialized cluster configuration."
      }
    }
  },
  "CLUSTER REPLICATE": {
    "summary": "Configure a node as replica of a primary node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER RESET": {
    "summary": "Resets a node.",
    "complexity": "O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.",
    "group": "cluster",
    "since": "3.0.0",
    "arity": -2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "ADMIN",
      "STALE",
      "NOSCRIPT"
    ],
    "arguments": [
      {
        "name": "reset-type",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "hard",
            "type": "pure-token",
            "token": "HARD"
          },
          {
            "name": "soft",
            "type": "pure-token",
            "token": "SOFT"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER SAVECONFIG": {
    "summary": "Forces a node to save the cluster configuration to disk.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER SET-CONFIG-EPOCH": {
    "summary": "Sets the configuration epoch for a new node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE"
    ],
    "arguments": [
      {
        "name": "config-epoch",
        "type": "integer"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER SETSLOT": {
    "summary": "Binds a hash slot to a node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": -4,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "history": [
      [
        "8.0.0",
        "Added the `TIMEOUT` option."
      ]
    ],
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "STALE",
      "MAY_REPLICATE"
    ],
    "arguments": [
      {
        "name": "slot",
        "type": "integer"
      },
      {
        "name": "subcommand",
        "type": "oneof",
        "arguments": [
          {
            "name": "importing",
            "display": "node-id",
            "type": "string",
            "token": "IMPORTING"
          },
          {
            "name": "migrating",
            "display": "node-id",
            "type": "string",
            "token": "MIGRATING"
          },
          {
            "name": "node",
            "display": "node-id",
            "type": "string",
            "token": "NODE"
          },
          {
            "name": "stable",
            "type": "pure-token",
            "token": "STABLE"
          }
        ]
      },
      {
        "name": "timeout",
        "display": "timeout",
        "type": "integer",
        "token": "TIMEOUT",
        "optional": true,
        "since": "8.0.0"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CLUSTER SHARDS": {
    "summary": "Returns the mapping of cluster slots to shards.",
    "complexity": "O(N) where N is the total number of cluster nodes",
    "group": "cluster",
    "since": "7.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "description": "A nested list of a map of hash ranges and shard nodes describing individual shards.",
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "slots": {
            "description": "An even number element array specifying the start and end slot numbers for slot ranges owned by this shard.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "nodes": {
            "description": "Nodes that handle these slot ranges.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string"
                },
                "port": {
                  "type": "integer"
                },
                "tls-port": {
                  "type": "integer"
                },
                "ip": {
                  "type": "string"
                },
                "endpoint": {
                  "type": "string"
                },
                "hostname": {
                  "type": "string"
                },
                "role": {
                  "oneOf": [
                    {
                      "const": "master"
                    },
                    {
                      "const": "replica"
                    }
                  ]
                },
                "replication-offset": {
                  "type": "integer"
                },
                "health": {
                  "oneOf": [
                    {
                      "const": "fail"
                    },
                    {
                      "const": "loading"
                    },
                    {
                      "const": "online"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "CLUSTER SLAVES": {
    "summary": "Lists the replica nodes of a primary node.",
    "complexity": "O(N) where N is the number of replicas.",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 3,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "deprecated_since": "5.0.0",
    "replaced_by": "`CLUSTER REPLICAS`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ADMIN",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "arguments": [
      {
        "name": "node-id",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "A list of replica nodes replicating from the specified primary node provided in the same format used by CLUSTER NODES.",
      "type": "array",
      "items": {
        "type": "string",
        "description": "The serialized cluster configuration."
      }
    }
  },
  "CLUSTER SLOT-STATS": {
    "summary": "Return an array of slot usage statistics for slots assigned to the current node.",
    "complexity": "O(N) where N is the total number of slots based on arguments. O(N*log(N)) with ORDERBY subcommand.",
    "group": "cluster",
    "since": "8.0.0",
    "arity": -4,
    "container": "CLUSTER",
    "function": "clusterSlotStatsCommand",
    "command_flags": [
      "STALE",
      "LOADING"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_SHARDS"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Array of nested arrays, where the inner array element represents a slot and its respective usage statistics.",
      "items": {
        "type": "array",
        "description": "Array of size 2, where 0th index represents (int) slot and 1st index represents (map) usage statistics.",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "description": "Slot Number.",
            "type": "integer"
          },
          {
            "type": "object",
            "description": "Map of slot usage statistics.",
            "additionalProperties": false,
            "properties": {
              "key-count": {
                "type": "integer"
              },
              "cpu-usec": {
                "type": "integer"
              },
              "network-bytes-in": {
                "type": "integer"
              },
              "network-bytes-out": {
                "type": "integer"
              }
            }
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "filter",
        "type": "oneof",
        "arguments": [
          {
            "token": "SLOTSRANGE",
            "name": "slotsrange",
            "type": "block",
            "arguments": [
              {
                "name": "start-slot",
                "type": "integer"
              },
              {
                "name": "end-slot",
                "type": "integer"
              }
            ]
          },
          {
            "token": "ORDERBY",
            "name": "orderby",
            "type": "block",
            "arguments": [
              {
                "name": "metric",
                "type": "string"
              },
              {
                "token": "LIMIT",
                "name": "limit",
                "type": "integer",
                "optional": true
              },
              {
                "name": "order",
                "type": "oneof",
                "optional": true,
                "arguments": [
                  {
                    "name": "asc",
                    "type": "pure-token",
                    "token": "ASC"
                  },
                  {
                    "name": "desc",
                    "type": "pure-token",
                    "token": "DESC"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "CLUSTER SLOTS": {
    "summary": "Returns the mapping of cluster slots to nodes.",
    "complexity": "O(N) where N is the total number of Cluster nodes",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 2,
    "container": "CLUSTER",
    "function": "clusterCommand",
    "history": [
      [
        "4.0.0",
        "Added node IDs."
      ],
      [
        "7.0.0",
        "Added additional networking metadata field."
      ]
    ],
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "description": "Nested list of slot ranges with networking information.",
      "type": "array",
      "items": {
        "type": "array",
        "minItems": 3,
        "maxItems": 4294967295,
        "items": [
          {
            "description": "Start slot number.",
            "type": "integer"
          },
          {
            "description": "End slot number.",
            "type": "integer"
          },
          {
            "type": "array",
            "description": "Primary node for the slot range.",
            "minItems": 4,
            "maxItems": 4,
            "items": [
              {
                "description": "Endpoint description.",
                "oneOf": [
                  {
                    "description": "Hostname or ip.",
                    "type": "string"
                  },
                  {
                    "description": "Unknown type.",
                    "type": "null"
                  }
                ]
              },
              {
                "description": "Port.",
                "type": "integer"
              },
              {
                "description": "Node name.",
                "type": "string"
              },
              {
                "description": "Array of node descriptions.",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "hostname": {
                    "type": "string"
                  },
                  "ip": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        ],
        "additionalItems": {
          "type": "array",
          "description": "Replica node for the slot range.",
          "minItems": 4,
          "maxItems": 4,
          "items": [
            {
              "description": "Endpoint description.",
              "oneOf": [
                {
                  "description": "Hostname or ip.",
                  "type": "string"
                },
                {
                  "description": "Unknown type.",
                  "type": "null"
                }
              ]
            },
            {
              "description": "Port.",
              "type": "integer"
            },
            {
              "description": "Node name.",
              "type": "string"
            },
            {
              "description": "Array of node descriptions.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "hostname": {
                  "type": "string"
                },
                "ip": {
                  "type": "string"
                }
              }
            }
          ]
        }
      }
    }
  },
  "CLUSTER": {
    "summary": "A container for Cluster commands.",
    "complexity": "Depends on subcommand.",
    "group": "cluster",
    "since": "3.0.0",
    "arity": -2
  },
  "COMMAND COUNT": {
    "summary": "Returns a count of commands.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.13",
    "arity": 2,
    "container": "COMMAND",
    "function": "commandCountCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "description": "Number of total commands in this server.",
      "type": "integer"
    }
  },
  "COMMAND DOCS": {
    "summary": "Returns documentary information about one, multiple or all commands.",
    "complexity": "O(N) where N is the number of commands to look up",
    "group": "server",
    "since": "7.0.0",
    "arity": -2,
    "container": "COMMAND",
    "function": "commandDocsCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "reply_schema": {
      "description": "A map where each key is a command name, and each value is the documentary information",
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^.*$": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "summary": {
              "description": "Short command description.",
              "type": "string"
            },
            "since": {
              "description": "The server version that added the command (or for module commands, the module version).",
              "type": "string"
            },
            "group": {
              "description": "The functional group to which the command belongs.",
              "oneOf": [
                {
                  "const": "bitmap"
                },
                {
                  "const": "cluster"
                },
                {
                  "const": "connection"
                },
                {
                  "const": "generic"
                },
                {
                  "const": "geo"
                },
                {
                  "const": "hash"
                },
                {
                  "const": "hyperloglog"
                },
                {
                  "const": "list"
                },
                {
                  "const": "module"
                },
                {
                  "const": "pubsub"
                },
                {
                  "const": "scripting"
                },
                {
                  "const": "sentinel"
                },
                {
                  "const": "server"
                },
                {
                  "const": "set"
                },
                {
                  "const": "sorted-set"
                },
                {
                  "const": "stream"
                },
                {
                  "const": "string"
                },
                {
                  "const": "transactions"
                }
              ]
            },
            "complexity": {
              "description": "A short explanation about the command's time complexity.",
              "type": "string"
            },
            "module": {
              "type": "string"
            },
            "doc_flags": {
              "description": "An array of documentation flags.",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "description": "The command is deprecated.",
                    "const": "deprecated"
                  },
                  {
                    "description": "A system command that isn't meant to be called by users.",
                    "const": "syscmd"
                  }
                ]
              }
            },
            "deprecated_since": {
              "description": "The server version that deprecated the command (or for module commands, the module version).",
              "type": "string"
            },
            "replaced_by": {
              "description": "The alternative for a deprecated command.",
              "type": "string"
            },
            "history": {
              "description": "An array of historical notes describing changes to the command's behavior or arguments.",
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "type": "string",
                    "description": "The server version that the entry applies to."
                  },
                  {
                    "type": "string",
                    "description": "The description of the change."
                  }
                ]
              }
            },
            "arguments": {
              "description": "An array of maps that describe the command's arguments.",
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "display_text": {
                    "type": "string"
                  },
                  "key_spec_index": {
                    "type": "integer"
                  },
                  "token": {
                    "type": "string"
                  },
                  "summary": {
                    "type": "string"
                  },
                  "since": {
                    "type": "string"
                  },
                  "deprecated_since": {
                    "type": "string"
                  },
                  "flags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "arguments": {
                    "type": "array"
                  }
                }
              }
            },
            "reply_schema": {
              "description": "Command reply schema.",
              "type": "object"
            },
            "subcommands": {
              "description": "A map where each key is a subcommand, and each value is the documentary information.",
              "$ref": "#"
            }
          }
        }
      }
    },
    "arguments": [
      {
        "name": "command-name",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "COMMAND GETKEYS": {
    "summary": "Extracts the key names from an arbitrary command.",
    "complexity": "O(N) where N is the number of arguments to the command",
    "group": "server",
    "since": "2.8.13",
    "arity": -3,
    "container": "COMMAND",
    "function": "commandGetKeysCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "description": "List of keys from the given command.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    },
    "arguments": [
      {
        "name": "command",
        "type": "string"
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "COMMAND GETKEYSANDFLAGS": {
    "summary": "Extracts the key names and access flags for an arbitrary command.",
    "complexity": "O(N) where N is the number of arguments to the command",
    "group": "server",
    "since": "7.0.0",
    "arity": -3,
    "container": "COMMAND",
    "function": "commandGetKeysAndFlagsCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "description": "List of keys from the given command and their usage flags.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "description": "Key name",
            "type": "string"
          },
          {
            "description": "Set of key flags",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "command",
        "type": "string"
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "COMMAND HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "server",
    "since": "5.0.0",
    "arity": 2,
    "container": "COMMAND",
    "function": "commandHelpCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "COMMAND INFO": {
    "summary": "Returns information about one, multiple or all commands.",
    "complexity": "O(N) where N is the number of commands to look up",
    "group": "server",
    "since": "2.8.13",
    "arity": -2,
    "container": "COMMAND",
    "function": "commandInfoCommand",
    "history": [
      [
        "7.0.0",
        "Allowed to be called with no argument to get info on all commands."
      ]
    ],
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "arguments": [
      {
        "name": "command-name",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "type": "array",
      "items": {
        "oneOf": [
          {
            "description": "Command does not exist.",
            "type": "null"
          },
          {
            "description": "Command info array output.",
            "type": "array",
            "minItems": 10,
            "maxItems": 10,
            "items": [
              {
                "description": "Command name.",
                "type": "string"
              },
              {
                "description": "Command arity.",
                "type": "integer"
              },
              {
                "description": "Command flags.",
                "type": "array",
                "items": {
                  "description": "Command flag.",
                  "type": "string"
                }
              },
              {
                "description": "Command first key index.",
                "type": "integer"
              },
              {
                "description": "Command last key index.",
                "type": "integer"
              },
              {
                "description": "Command key step index.",
                "type": "integer"
              },
              {
                "description": "Command categories.",
                "type": "array",
                "items": {
                  "description": "Command category.",
                  "type": "string"
                }
              },
              {
                "description": "Command tips.",
                "type": "array",
                "items": {
                  "description": "Command tip.",
                  "type": "string"
                }
              },
              {
                "description": "Command key specs.",
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "notes": {
                      "type": "string"
                    },
                    "flags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "begin_search": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "spec": {
                          "anyOf": [
                            {
                              "description": "Unknown type, empty map.",
                              "type": "object",
                              "additionalProperties": false
                            },
                            {
                              "description": "Index type.",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "index": {
                                  "type": "integer"
                                }
                              }
                            },
                            {
                              "description": "Keyword type.",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "keyword": {
                                  "type": "string"
                                },
                                "startfrom": {
                                  "type": "integer"
                                }
                              }
                            }
                          ]
                        }
                      }
                    },
                    "find_keys": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "spec": {
                          "anyOf": [
                            {
                              "description": "Unknown type.",
                              "type": "object",
                              "additionalProperties": false
                            },
                            {
                              "description": "Range type.",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "lastkey": {
                                  "type": "integer"
                                },
                                "keystep": {
                                  "type": "integer"
                                },
                                "limit": {
                                  "type": "integer"
                                }
                              }
                            },
                            {
                              "description": "Keynum type.",
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "keynumidx": {
                                  "type": "integer"
                                },
                                "firstkey": {
                                  "type": "integer"
                                },
                                "keystep": {
                                  "type": "integer"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "array",
                "description": "Subcommands."
              }
            ]
          }
        ]
      }
    }
  },
  "COMMAND LIST": {
    "summary": "Returns a list of command names.",
    "complexity": "O(N) where N is the total number of commands",
    "group": "server",
    "since": "7.0.0",
    "arity": -2,
    "container": "COMMAND",
    "function": "commandListCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "arguments": [
      {
        "name": "filterby",
        "token": "FILTERBY",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "module-name",
            "type": "string",
            "token": "MODULE"
          },
          {
            "name": "category",
            "type": "string",
            "token": "ACLCAT"
          },
          {
            "name": "pattern",
            "type": "pattern",
            "token": "PATTERN"
          }
        ]
      }
    ],
    "reply_schema": {
      "type": "array",
      "items": {
        "description": "Command name.",
        "type": "string"
      },
      "uniqueItems": true
    }
  },
  "COMMAND": {
    "summary": "Returns detailed information about all commands.",
    "complexity": "O(N) where N is the total number of commands",
    "group": "server",
    "since": "2.8.13",
    "arity": -1,
    "function": "commandCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ]
  },
  "COMMANDLOG GET": {
    "summary": "Returns the specified command log's entries.",
    "complexity": "O(N) where N is the number of entries returned",
    "group": "server",
    "since": "8.1.0",
    "arity": 4,
    "container": "COMMANDLOG",
    "function": "commandlogCommand",
    "command_flags": [
      "ADMIN",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Entries from the command log in chronological order.",
      "uniqueItems": true,
      "items": {
        "type": "array",
        "minItems": 6,
        "maxItems": 6,
        "items": [
          {
            "type": "integer",
            "description": "Command log entry ID."
          },
          {
            "type": "integer",
            "description": "The unix timestamp at which the logged command was processed.",
            "minimum": 0
          },
          {
            "type": "integer",
            "description": "Determined by the type parameter.",
            "minimum": 0
          },
          {
            "type": "array",
            "description": "The arguments of the command.",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "description": "Client IP address and port."
          },
          {
            "type": "string",
            "description": "Client name if set via the CLIENT SETNAME command."
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "count",
        "type": "integer"
      },
      {
        "name": "type",
        "type": "oneof",
        "arguments": [
          {
            "name": "slow",
            "type": "string"
          },
          {
            "name": "large-request",
            "type": "string"
          },
          {
            "name": "large-reply",
            "type": "string"
          }
        ]
      }
    ]
  },
  "COMMANDLOG HELP": {
    "summary": "Show helpful text about the different subcommands",
    "complexity": "O(1)",
    "group": "server",
    "since": "8.1.0",
    "arity": 2,
    "container": "COMMANDLOG",
    "function": "commandlogCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "COMMANDLOG LEN": {
    "summary": "Returns the number of entries in the specified type of command log.",
    "complexity": "O(1)",
    "group": "server",
    "since": "8.1.0",
    "arity": 3,
    "container": "COMMANDLOG",
    "function": "commandlogCommand",
    "command_flags": [
      "ADMIN",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:AGG_SUM",
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of entries in the command log.",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "type",
        "type": "oneof",
        "arguments": [
          {
            "name": "slow",
            "type": "string"
          },
          {
            "name": "large-request",
            "type": "string"
          },
          {
            "name": "large-reply",
            "type": "string"
          }
        ]
      }
    ]
  },
  "COMMANDLOG RESET": {
    "summary": "Clears all entries from the specified type of command log.",
    "complexity": "O(N) where N is the number of entries in the commandlog",
    "group": "server",
    "since": "8.1.0",
    "arity": 3,
    "container": "COMMANDLOG",
    "function": "commandlogCommand",
    "command_flags": [
      "ADMIN",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "type",
        "type": "oneof",
        "arguments": [
          {
            "name": "slow",
            "type": "string"
          },
          {
            "name": "large-request",
            "type": "string"
          },
          {
            "name": "large-reply",
            "type": "string"
          }
        ]
      }
    ]
  },
  "COMMANDLOG": {
    "summary": "A container for command log commands.",
    "complexity": "Depends on subcommand.",
    "group": "server",
    "since": "8.1.0",
    "arity": -2
  },
  "CONFIG GET": {
    "summary": "Returns the effective values of configuration parameters.",
    "complexity": "O(N) when N is the number of configuration parameters provided",
    "group": "server",
    "since": "2.0.0",
    "arity": -3,
    "container": "CONFIG",
    "function": "configGetCommand",
    "history": [
      [
        "7.0.0",
        "Added the ability to pass multiple pattern parameters in one call"
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "parameter",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "CONFIG HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "server",
    "since": "5.0.0",
    "arity": 2,
    "container": "CONFIG",
    "function": "configHelpCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "CONFIG RESETSTAT": {
    "summary": "Resets the server's statistics.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.0.0",
    "arity": 2,
    "container": "CONFIG",
    "function": "configResetStatCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CONFIG REWRITE": {
    "summary": "Persists the effective configuration to file.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.0",
    "arity": 2,
    "container": "CONFIG",
    "function": "configRewriteCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "CONFIG SET": {
    "summary": "Sets configuration parameters in-flight.",
    "complexity": "O(N) when N is the number of configuration parameters provided",
    "group": "server",
    "since": "2.0.0",
    "arity": -4,
    "container": "CONFIG",
    "function": "configSetCommand",
    "history": [
      [
        "7.0.0",
        "Added the ability to set multiple parameters in one call."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "parameter",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ]
  },
  "CONFIG": {
    "summary": "A container for server configuration commands.",
    "complexity": "Depends on subcommand.",
    "group": "server",
    "since": "2.0.0",
    "arity": -2
  },
  "COPY": {
    "summary": "Copies the value of a key to a new key.",
    "complexity": "O(N) worst case for collections, where N is the number of nested items. O(1) for string values.",
    "group": "generic",
    "since": "6.2.0",
    "arity": -3,
    "function": "copyCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "source",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 1
      },
      {
        "token": "DB",
        "name": "destination-db",
        "type": "integer",
        "optional": true
      },
      {
        "name": "replace",
        "token": "REPLACE",
        "type": "pure-token",
        "optional": true
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Source was copied.",
          "const": 1
        },
        {
          "description": "Source was not copied when the destination key already exists",
          "const": 0
        }
      ]
    }
  },
  "DBSIZE": {
    "summary": "Returns the number of keys in the database.",
    "complexity": "O(1)",
    "group": "server",
    "since": "1.0.0",
    "arity": 1,
    "function": "dbsizeCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:AGG_SUM"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The number of keys in the currently-selected database."
    }
  },
  "DEBUG": {
    "summary": "A container for debugging commands.",
    "complexity": "Depends on subcommand.",
    "group": "server",
    "since": "1.0.0",
    "arity": -2,
    "function": "debugCommand",
    "doc_flags": [
      "SYSCMD"
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "PROTECTED"
    ]
  },
  "DECR": {
    "summary": "Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "1.0.0",
    "arity": 2,
    "function": "decrCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The value of the key after decrementing it."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "DECRBY": {
    "summary": "Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "1.0.0",
    "arity": 3,
    "function": "decrbyCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The value of the key after decrementing it."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "decrement",
        "type": "integer"
      }
    ]
  },
  "DEL": {
    "summary": "Deletes one or more keys.",
    "complexity": "O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).",
    "group": "generic",
    "since": "1.0.0",
    "arity": -2,
    "function": "delCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "REQUEST_POLICY:MULTI_SHARD",
      "RESPONSE_POLICY:AGG_SUM"
    ],
    "key_specs": [
      {
        "flags": [
          "RM",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The number of keys that were removed.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ]
  },
  "DISCARD": {
    "summary": "Discards a transaction.",
    "complexity": "O(N), when N is the number of queued commands",
    "group": "transactions",
    "since": "2.0.0",
    "arity": 1,
    "function": "discardCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "TRANSACTION"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "DUMP": {
    "summary": "Returns a serialized representation of the value stored at a key.",
    "complexity": "O(1) to access the key and additional O(N*M) to serialize it, where N is the number of objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).",
    "group": "generic",
    "since": "2.6.0",
    "arity": 2,
    "function": "dumpCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The serialized value.",
          "type": "string"
        },
        {
          "description": "Key does not exist.",
          "type": "null"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "ECHO": {
    "summary": "Returns the given string.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "1.0.0",
    "arity": 2,
    "function": "echoCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "FAST"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "description": "The given string",
      "type": "string"
    },
    "arguments": [
      {
        "name": "message",
        "type": "string"
      }
    ]
  },
  "EVAL_RO": {
    "summary": "Executes a read-only server-side Lua script.",
    "complexity": "Depends on the script that is executed.",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -3,
    "function": "evalRoCommand",
    "get_keys_function": "evalGetKeys",
    "command_flags": [
      "NOSCRIPT",
      "SKIP_MONITOR",
      "NO_MANDATORY_KEYS",
      "STALE",
      "READONLY"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "key_specs": [
      {
        "notes": "We cannot tell how the keys will be used so we assume the worst, RO and ACCESS",
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "script",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "optional": true,
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "Return value depends on the script that is executed"
    }
  },
  "EVAL": {
    "summary": "Executes a server-side Lua script.",
    "complexity": "Depends on the script that is executed.",
    "group": "scripting",
    "since": "2.6.0",
    "arity": -3,
    "function": "evalCommand",
    "get_keys_function": "evalGetKeys",
    "command_flags": [
      "NOSCRIPT",
      "SKIP_MONITOR",
      "MAY_REPLICATE",
      "NO_MANDATORY_KEYS",
      "STALE"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "key_specs": [
      {
        "notes": "We cannot tell how the keys will be used so we assume the worst, RW and UPDATE",
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "script",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "optional": true,
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "Return value depends on the script that is executed"
    }
  },
  "EVALSHA_RO": {
    "summary": "Executes a read-only server-side Lua script by SHA1 digest.",
    "complexity": "Depends on the script that is executed.",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -3,
    "function": "evalShaRoCommand",
    "get_keys_function": "evalGetKeys",
    "command_flags": [
      "NOSCRIPT",
      "SKIP_MONITOR",
      "NO_MANDATORY_KEYS",
      "STALE",
      "READONLY"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "sha1",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "optional": true,
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "Return value depends on the script that is executed"
    }
  },
  "EVALSHA": {
    "summary": "Executes a server-side Lua script by SHA1 digest.",
    "complexity": "Depends on the script that is executed.",
    "group": "scripting",
    "since": "2.6.0",
    "arity": -3,
    "function": "evalShaCommand",
    "get_keys_function": "evalGetKeys",
    "command_flags": [
      "NOSCRIPT",
      "SKIP_MONITOR",
      "MAY_REPLICATE",
      "NO_MANDATORY_KEYS",
      "STALE"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "sha1",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "optional": true,
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "Return value depends on the script that is executed"
    }
  },
  "EXEC": {
    "summary": "Executes all commands in a transaction.",
    "complexity": "Depends on commands in the transaction",
    "group": "transactions",
    "since": "1.2.0",
    "arity": 1,
    "function": "execCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SKIP_COMMANDLOG"
    ],
    "acl_categories": [
      "TRANSACTION"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Each element being the reply to each of the commands in the atomic transaction.",
          "type": "array"
        },
        {
          "description": "The transaction was aborted because a `WATCH`ed key was touched",
          "type": "null"
        }
      ]
    }
  },
  "EXISTS": {
    "summary": "Determines whether one or more keys exist.",
    "complexity": "O(N) where N is the number of keys to check.",
    "group": "generic",
    "since": "1.0.0",
    "arity": -2,
    "function": "existsCommand",
    "history": [
      [
        "3.0.3",
        "Accepts multiple `key` arguments."
      ]
    ],
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "REQUEST_POLICY:MULTI_SHARD",
      "RESPONSE_POLICY:AGG_SUM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of keys that exist from those specified as arguments.",
      "type": "integer"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ]
  },
  "EXPIRE": {
    "summary": "Sets the expiration time of a key in seconds.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "1.0.0",
    "arity": -3,
    "function": "expireCommand",
    "history": [
      [
        "7.0.0",
        "Added options: `NX`, `XX`, `GT` and `LT`."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments.",
          "const": 0
        },
        {
          "description": "The timeout was set.",
          "const": 1
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "seconds",
        "type": "integer"
      },
      {
        "name": "condition",
        "type": "oneof",
        "optional": true,
        "since": "7.0.0",
        "arguments": [
          {
            "name": "nx",
            "type": "pure-token",
            "token": "NX"
          },
          {
            "name": "xx",
            "type": "pure-token",
            "token": "XX"
          },
          {
            "name": "gt",
            "type": "pure-token",
            "token": "GT"
          },
          {
            "name": "lt",
            "type": "pure-token",
            "token": "LT"
          }
        ]
      }
    ]
  },
  "EXPIREAT": {
    "summary": "Sets the expiration time of a key to a Unix timestamp.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "1.2.0",
    "arity": -3,
    "function": "expireatCommand",
    "history": [
      [
        "7.0.0",
        "Added options: `NX`, `XX`, `GT` and `LT`."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": 1,
          "description": "The timeout was set."
        },
        {
          "const": 0,
          "description": "The timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments."
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "unix-time-seconds",
        "type": "unix-time"
      },
      {
        "name": "condition",
        "type": "oneof",
        "optional": true,
        "since": "7.0.0",
        "arguments": [
          {
            "name": "nx",
            "type": "pure-token",
            "token": "NX"
          },
          {
            "name": "xx",
            "type": "pure-token",
            "token": "XX"
          },
          {
            "name": "gt",
            "type": "pure-token",
            "token": "GT"
          },
          {
            "name": "lt",
            "type": "pure-token",
            "token": "LT"
          }
        ]
      }
    ]
  },
  "EXPIRETIME": {
    "summary": "Returns the expiration time of a key as a Unix timestamp.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "7.0.0",
    "arity": 2,
    "function": "expiretimeCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "integer",
          "description": "Expiration Unix timestamp in seconds.",
          "minimum": 0
        },
        {
          "const": -1,
          "description": "The key exists but has no associated expiration time."
        },
        {
          "const": -2,
          "description": "The key does not exist."
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "FAILOVER": {
    "summary": "Starts a coordinated failover from a server to one of its replicas.",
    "complexity": "O(1)",
    "group": "server",
    "since": "6.2.0",
    "arity": -1,
    "function": "failoverCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "STALE"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "target",
        "token": "TO",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "host",
            "type": "string"
          },
          {
            "name": "port",
            "type": "integer"
          },
          {
            "token": "FORCE",
            "name": "force",
            "type": "pure-token",
            "optional": true
          }
        ]
      },
      {
        "token": "ABORT",
        "name": "abort",
        "type": "pure-token",
        "optional": true
      },
      {
        "token": "TIMEOUT",
        "name": "milliseconds",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "FCALL_RO": {
    "summary": "Invokes a read-only function.",
    "complexity": "Depends on the function that is executed.",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -3,
    "function": "fcallroCommand",
    "get_keys_function": "functionGetKeys",
    "command_flags": [
      "NOSCRIPT",
      "SKIP_MONITOR",
      "NO_MANDATORY_KEYS",
      "STALE",
      "READONLY"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "key_specs": [
      {
        "notes": "We cannot tell how the keys will be used so we assume the worst, RO and ACCESS",
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "function",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "optional": true,
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "Return value depends on the function that is executed"
    }
  },
  "FCALL": {
    "summary": "Invokes a function.",
    "complexity": "Depends on the function that is executed.",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -3,
    "function": "fcallCommand",
    "get_keys_function": "functionGetKeys",
    "command_flags": [
      "NOSCRIPT",
      "SKIP_MONITOR",
      "MAY_REPLICATE",
      "NO_MANDATORY_KEYS",
      "STALE"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "key_specs": [
      {
        "notes": "We cannot tell how the keys will be used so we assume the worst, RW and UPDATE",
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "function",
        "type": "string"
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "optional": true,
        "multiple": true
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "Return value depends on the function that is executed"
    }
  },
  "FLUSHALL": {
    "summary": "Removes all keys from all databases.",
    "complexity": "O(N) where N is the total number of keys in all databases",
    "group": "server",
    "since": "1.0.0",
    "arity": -1,
    "function": "flushallCommand",
    "history": [
      [
        "4.0.0",
        "Added the `ASYNC` flushing mode modifier."
      ],
      [
        "6.2.0",
        "Added the `SYNC` flushing mode modifier."
      ]
    ],
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "KEYSPACE",
      "DANGEROUS"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "flush-type",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "async",
            "type": "pure-token",
            "token": "ASYNC",
            "since": "4.0.0"
          },
          {
            "name": "sync",
            "type": "pure-token",
            "token": "SYNC",
            "since": "6.2.0"
          }
        ]
      }
    ]
  },
  "FLUSHDB": {
    "summary": "Remove all keys from the current database.",
    "complexity": "O(N) where N is the number of keys in the selected database",
    "group": "server",
    "since": "1.0.0",
    "arity": -1,
    "function": "flushdbCommand",
    "history": [
      [
        "4.0.0",
        "Added the `ASYNC` flushing mode modifier."
      ],
      [
        "6.2.0",
        "Added the `SYNC` flushing mode modifier."
      ]
    ],
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "KEYSPACE",
      "DANGEROUS"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "flush-type",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "async",
            "type": "pure-token",
            "token": "ASYNC",
            "since": "4.0.0"
          },
          {
            "name": "sync",
            "type": "pure-token",
            "token": "SYNC",
            "since": "6.2.0"
          }
        ]
      }
    ]
  },
  "FUNCTION DELETE": {
    "summary": "Deletes a library and its functions.",
    "complexity": "O(1)",
    "group": "scripting",
    "since": "7.0.0",
    "arity": 3,
    "container": "FUNCTION",
    "function": "functionDeleteCommand",
    "command_flags": [
      "NOSCRIPT",
      "WRITE"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "arguments": [
      {
        "name": "library-name",
        "type": "string"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "FUNCTION DUMP": {
    "summary": "Dumps all libraries into a serialized binary payload.",
    "complexity": "O(N) where N is the number of functions",
    "group": "scripting",
    "since": "7.0.0",
    "arity": 2,
    "container": "FUNCTION",
    "function": "functionDumpCommand",
    "command_flags": [
      "NOSCRIPT"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "reply_schema": {
      "description": "The serialized payload.",
      "type": "string"
    }
  },
  "FUNCTION FLUSH": {
    "summary": "Deletes all libraries and functions.",
    "complexity": "O(N) where N is the number of functions deleted",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -2,
    "container": "FUNCTION",
    "function": "functionFlushCommand",
    "command_flags": [
      "NOSCRIPT",
      "WRITE"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "arguments": [
      {
        "name": "flush-type",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "async",
            "type": "pure-token",
            "token": "ASYNC"
          },
          {
            "name": "sync",
            "type": "pure-token",
            "token": "SYNC"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "FUNCTION HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "scripting",
    "since": "7.0.0",
    "arity": 2,
    "container": "FUNCTION",
    "function": "functionHelpCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "FUNCTION KILL": {
    "summary": "Terminates a function during execution.",
    "complexity": "O(1)",
    "group": "scripting",
    "since": "7.0.0",
    "arity": 2,
    "container": "FUNCTION",
    "function": "functionKillCommand",
    "command_flags": [
      "NOSCRIPT",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ONE_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "FUNCTION LIST": {
    "summary": "Returns information about all libraries.",
    "complexity": "O(N) where N is the number of functions",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -2,
    "container": "FUNCTION",
    "function": "functionListCommand",
    "command_flags": [
      "NOSCRIPT"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "reply_schema": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "library_name": {
            "description": "The name of the library.",
            "type": "string"
          },
          "engine": {
            "description": "The engine of the library.",
            "type": "string"
          },
          "functions": {
            "description": "The list of functions in the library.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "description": "The name of the function.",
                  "type": "string"
                },
                "description": {
                  "description": "The function's description.",
                  "oneOf": [
                    {
                      "type": "null"
                    },
                    {
                      "type": "string"
                    }
                  ]
                },
                "flags": {
                  "description": "An array of function flags.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "library_code": {
            "description": "The library's source code (when given the WITHCODE modifier).",
            "type": "string"
          }
        }
      }
    },
    "arguments": [
      {
        "name": "library-name-pattern",
        "type": "string",
        "token": "LIBRARYNAME",
        "optional": true
      },
      {
        "name": "withcode",
        "type": "pure-token",
        "token": "WITHCODE",
        "optional": true
      }
    ]
  },
  "FUNCTION LOAD": {
    "summary": "Creates a library.",
    "complexity": "O(1) (considering compilation time is redundant)",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -3,
    "container": "FUNCTION",
    "function": "functionLoadCommand",
    "command_flags": [
      "NOSCRIPT",
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "arguments": [
      {
        "name": "replace",
        "type": "pure-token",
        "token": "REPLACE",
        "optional": true
      },
      {
        "name": "function-code",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "The library name that was loaded",
      "type": "string"
    }
  },
  "FUNCTION RESTORE": {
    "summary": "Restores all libraries from a payload.",
    "complexity": "O(N) where N is the number of functions on the payload",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -3,
    "container": "FUNCTION",
    "function": "functionRestoreCommand",
    "command_flags": [
      "NOSCRIPT",
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "arguments": [
      {
        "name": "serialized-value",
        "type": "string"
      },
      {
        "name": "policy",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "flush",
            "type": "pure-token",
            "token": "FLUSH"
          },
          {
            "name": "append",
            "type": "pure-token",
            "token": "APPEND"
          },
          {
            "name": "replace",
            "type": "pure-token",
            "token": "REPLACE"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "FUNCTION STATS": {
    "summary": "Returns information about a function during execution.",
    "complexity": "O(1)",
    "group": "scripting",
    "since": "7.0.0",
    "arity": 2,
    "container": "FUNCTION",
    "function": "functionStatsCommand",
    "command_flags": [
      "NOSCRIPT",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "reply_schema": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "running_script": {
          "description": "Information about the running script.",
          "oneOf": [
            {
              "description": "If there's no in-flight function.",
              "type": "null"
            },
            {
              "description": "A map with the information about the running script.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "description": "The name of the function.",
                  "type": "string"
                },
                "command": {
                  "description": "The command and arguments used for invoking the function.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "duration_ms": {
                  "description": "The function's runtime duration in milliseconds.",
                  "type": "integer"
                }
              }
            }
          ]
        },
        "engines": {
          "description": "A map when each entry in the map represent a single engine.",
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "description": "Engine map contains statistics about the engine.",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "libraries_count": {
                  "description": "Number of libraries.",
                  "type": "integer"
                },
                "functions_count": {
                  "description": "Number of functions.",
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    }
  },
  "FUNCTION": {
    "summary": "A container for function commands.",
    "complexity": "Depends on subcommand.",
    "group": "scripting",
    "since": "7.0.0",
    "arity": -2
  },
  "GEOADD": {
    "summary": "Adds one or more members to a geospatial index. The key is created if it doesn't exist.",
    "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
    "group": "geo",
    "since": "3.2.0",
    "arity": -5,
    "function": "geoaddCommand",
    "history": [
      [
        "6.2.0",
        "Added the `CH`, `NX` and `XX` options."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "condition",
        "type": "oneof",
        "optional": true,
        "since": "6.2.0",
        "arguments": [
          {
            "name": "nx",
            "type": "pure-token",
            "token": "NX"
          },
          {
            "name": "xx",
            "type": "pure-token",
            "token": "XX"
          }
        ]
      },
      {
        "name": "change",
        "token": "CH",
        "type": "pure-token",
        "optional": true,
        "since": "6.2.0"
      },
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "longitude",
            "type": "double"
          },
          {
            "name": "latitude",
            "type": "double"
          },
          {
            "name": "member",
            "type": "string"
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "When used without optional arguments, the number of elements added to the sorted set (excluding score updates).  If the CH option is specified, the number of elements that were changed (added or updated).",
      "type": "integer"
    }
  },
  "GEODIST": {
    "summary": "Returns the distance between two members of a geospatial index.",
    "complexity": "O(1)",
    "group": "geo",
    "since": "3.2.0",
    "arity": -4,
    "function": "geodistCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member1",
        "type": "string"
      },
      {
        "name": "member2",
        "type": "string"
      },
      {
        "name": "unit",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "m",
            "type": "pure-token",
            "token": "m"
          },
          {
            "name": "km",
            "type": "pure-token",
            "token": "km"
          },
          {
            "name": "ft",
            "type": "pure-token",
            "token": "ft"
          },
          {
            "name": "mi",
            "type": "pure-token",
            "token": "mi"
          }
        ]
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "One or both of elements are missing.",
          "type": "null"
        },
        {
          "description": "Distance as a double (represented as a string) in the specified units.",
          "type": "string",
          "pattern": "^[0-9]*(.[0-9]*)?$"
        }
      ]
    }
  },
  "GEOHASH": {
    "summary": "Returns members from a geospatial index as geohash strings.",
    "complexity": "O(1) for each member requested.",
    "group": "geo",
    "since": "3.2.0",
    "arity": -2,
    "function": "geohashCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true,
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "An array where each element is the Geohash corresponding to each member name passed as argument to the command.",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "GEOPOS": {
    "summary": "Returns the longitude and latitude of members from a geospatial index.",
    "complexity": "O(1) for each member requested.",
    "group": "geo",
    "since": "3.2.0",
    "arity": -2,
    "function": "geoposCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true,
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "An array where each element is a two elements array representing longitude and latitude (x,y) of each member name passed as argument to the command",
      "type": "array",
      "items": {
        "oneOf": [
          {
            "description": "Element does not exist",
            "type": "null"
          },
          {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Latitude (x)",
                "type": "number"
              },
              {
                "description": "Longitude (y)",
                "type": "number"
              }
            ]
          }
        ]
      }
    }
  },
  "GEORADIUS_RO": {
    "summary": "Returns members from a geospatial index that are within a distance from a coordinate.",
    "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
    "group": "geo",
    "since": "3.2.10",
    "arity": -6,
    "function": "georadiusroCommand",
    "history": [
      [
        "6.2.0",
        "Added the `ANY` option for `COUNT`."
      ],
      [
        "7.0.0",
        "Added support for uppercase unit names."
      ]
    ],
    "deprecated_since": "6.2.0",
    "replaced_by": "`GEOSEARCH` with the `BYRADIUS` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "longitude",
        "type": "double"
      },
      {
        "name": "latitude",
        "type": "double"
      },
      {
        "name": "radius",
        "type": "double"
      },
      {
        "name": "unit",
        "type": "oneof",
        "arguments": [
          {
            "name": "m",
            "type": "pure-token",
            "token": "m"
          },
          {
            "name": "km",
            "type": "pure-token",
            "token": "km"
          },
          {
            "name": "ft",
            "type": "pure-token",
            "token": "ft"
          },
          {
            "name": "mi",
            "type": "pure-token",
            "token": "mi"
          }
        ]
      },
      {
        "name": "withcoord",
        "token": "WITHCOORD",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withdist",
        "token": "WITHDIST",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withhash",
        "token": "WITHHASH",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "count-block",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "token": "COUNT",
            "name": "count",
            "type": "integer"
          },
          {
            "name": "any",
            "token": "ANY",
            "type": "pure-token",
            "optional": true,
            "since": "6.2.0"
          }
        ]
      },
      {
        "name": "order",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "asc",
            "type": "pure-token",
            "token": "ASC"
          },
          {
            "name": "desc",
            "type": "pure-token",
            "token": "DESC"
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "Array of matched members information.",
      "anyOf": [
        {
          "description": "If no WITH* option is specified, array of matched members names.",
          "type": "array",
          "items": {
            "description": "Name.",
            "type": "string"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 4,
            "items": [
              {
                "description": "Matched member name.",
                "type": "string"
              }
            ],
            "additionalItems": {
              "oneOf": [
                {
                  "description": "If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius.",
                  "type": "string"
                },
                {
                  "description": "If WITHHASH option is specified, the geohash integer.",
                  "type": "integer"
                },
                {
                  "description": "If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude).",
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": [
                    {
                      "description": "Latitude (x).",
                      "type": "number"
                    },
                    {
                      "description": "Longitude (y).",
                      "type": "number"
                    }
                  ]
                }
              ]
            }
          }
        }
      ]
    }
  },
  "GEORADIUS": {
    "summary": "Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.",
    "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
    "group": "geo",
    "since": "3.2.0",
    "arity": -6,
    "function": "georadiusCommand",
    "get_keys_function": "georadiusGetKeys",
    "history": [
      [
        "6.2.0",
        "Added the `ANY` option for `COUNT`."
      ],
      [
        "7.0.0",
        "Added support for uppercase unit names."
      ]
    ],
    "deprecated_since": "6.2.0",
    "replaced_by": "`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "keyword": {
            "keyword": "STORE",
            "startfrom": 6
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "keyword": {
            "keyword": "STOREDIST",
            "startfrom": 6
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "longitude",
        "type": "double"
      },
      {
        "name": "latitude",
        "type": "double"
      },
      {
        "name": "radius",
        "type": "double"
      },
      {
        "name": "unit",
        "type": "oneof",
        "arguments": [
          {
            "name": "m",
            "type": "pure-token",
            "token": "m"
          },
          {
            "name": "km",
            "type": "pure-token",
            "token": "km"
          },
          {
            "name": "ft",
            "type": "pure-token",
            "token": "ft"
          },
          {
            "name": "mi",
            "type": "pure-token",
            "token": "mi"
          }
        ]
      },
      {
        "name": "withcoord",
        "token": "WITHCOORD",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withdist",
        "token": "WITHDIST",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withhash",
        "token": "WITHHASH",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "count-block",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "token": "COUNT",
            "name": "count",
            "type": "integer"
          },
          {
            "name": "any",
            "token": "ANY",
            "type": "pure-token",
            "optional": true,
            "since": "6.2.0"
          }
        ]
      },
      {
        "name": "order",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "asc",
            "type": "pure-token",
            "token": "ASC"
          },
          {
            "name": "desc",
            "type": "pure-token",
            "token": "DESC"
          }
        ]
      },
      {
        "name": "store",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "token": "STORE",
            "name": "storekey",
            "display": "key",
            "type": "key",
            "key_spec_index": 1
          },
          {
            "token": "STOREDIST",
            "name": "storedistkey",
            "display": "key",
            "type": "key",
            "key_spec_index": 2
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "Array of matched members information.",
      "anyOf": [
        {
          "description": "If no WITH* option is specified, array of matched members names.",
          "type": "array",
          "items": {
            "description": "Name.",
            "type": "string"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 4,
            "items": [
              {
                "description": "Matched member name.",
                "type": "string"
              }
            ],
            "additionalItems": {
              "oneOf": [
                {
                  "description": "If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius.",
                  "type": "string"
                },
                {
                  "description": "If WITHHASH option is specified, the geohash integer.",
                  "type": "integer"
                },
                {
                  "description": "If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude).",
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": [
                    {
                      "description": "Latitude (x).",
                      "type": "number"
                    },
                    {
                      "description": "Longitude (y).",
                      "type": "number"
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "description": "Number of items stored in key.",
          "type": "integer"
        }
      ]
    }
  },
  "GEORADIUSBYMEMBER_RO": {
    "summary": "Returns members from a geospatial index that are within a distance from a member.",
    "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
    "group": "geo",
    "since": "3.2.10",
    "arity": -5,
    "function": "georadiusbymemberroCommand",
    "history": [
      [
        "6.2.0",
        "Added the `ANY` option for `COUNT`."
      ],
      [
        "7.0.0",
        "Added support for uppercase unit names."
      ]
    ],
    "deprecated_since": "6.2.0",
    "replaced_by": "`GEOSEARCH` with the `BYRADIUS` and `FROMMEMBER` arguments",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string"
      },
      {
        "name": "radius",
        "type": "double"
      },
      {
        "name": "unit",
        "type": "oneof",
        "arguments": [
          {
            "name": "m",
            "type": "pure-token",
            "token": "m"
          },
          {
            "name": "km",
            "type": "pure-token",
            "token": "km"
          },
          {
            "name": "ft",
            "type": "pure-token",
            "token": "ft"
          },
          {
            "name": "mi",
            "type": "pure-token",
            "token": "mi"
          }
        ]
      },
      {
        "name": "withcoord",
        "token": "WITHCOORD",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withdist",
        "token": "WITHDIST",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withhash",
        "token": "WITHHASH",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "count-block",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "token": "COUNT",
            "name": "count",
            "type": "integer"
          },
          {
            "name": "any",
            "token": "ANY",
            "type": "pure-token",
            "optional": true
          }
        ]
      },
      {
        "name": "order",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "asc",
            "type": "pure-token",
            "token": "ASC"
          },
          {
            "name": "desc",
            "type": "pure-token",
            "token": "DESC"
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "Array of matched members information.",
      "anyOf": [
        {
          "description": "If no WITH* option is specified, array of matched members names.",
          "type": "array",
          "items": {
            "description": "Name.",
            "type": "string"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 4,
            "items": [
              {
                "description": "Matched member name.",
                "type": "string"
              }
            ],
            "additionalItems": {
              "oneOf": [
                {
                  "description": "If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius.",
                  "type": "string"
                },
                {
                  "description": "If WITHHASH option is specified, the geohash integer.",
                  "type": "integer"
                },
                {
                  "description": "If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude).",
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": [
                    {
                      "description": "Latitude (x).",
                      "type": "number"
                    },
                    {
                      "description": "Longitude (y).",
                      "type": "number"
                    }
                  ]
                }
              ]
            }
          }
        }
      ]
    }
  },
  "GEORADIUSBYMEMBER": {
    "summary": "Queries a geospatial index for members within a distance from a member, optionally stores the result.",
    "complexity": "O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.",
    "group": "geo",
    "since": "3.2.0",
    "arity": -5,
    "function": "georadiusbymemberCommand",
    "get_keys_function": "georadiusGetKeys",
    "history": [
      [
        "6.2.0",
        "Added the `ANY` option for `COUNT`."
      ],
      [
        "7.0.0",
        "Added support for uppercase unit names."
      ]
    ],
    "deprecated_since": "6.2.0",
    "replaced_by": "`GEOSEARCH` and `GEOSEARCHSTORE` with the `BYRADIUS` and `FROMMEMBER` arguments",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "keyword": {
            "keyword": "STORE",
            "startfrom": 5
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "keyword": {
            "keyword": "STOREDIST",
            "startfrom": 5
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string"
      },
      {
        "name": "radius",
        "type": "double"
      },
      {
        "name": "unit",
        "type": "oneof",
        "arguments": [
          {
            "name": "m",
            "type": "pure-token",
            "token": "m"
          },
          {
            "name": "km",
            "type": "pure-token",
            "token": "km"
          },
          {
            "name": "ft",
            "type": "pure-token",
            "token": "ft"
          },
          {
            "name": "mi",
            "type": "pure-token",
            "token": "mi"
          }
        ]
      },
      {
        "name": "withcoord",
        "token": "WITHCOORD",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withdist",
        "token": "WITHDIST",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withhash",
        "token": "WITHHASH",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "count-block",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "token": "COUNT",
            "name": "count",
            "type": "integer"
          },
          {
            "name": "any",
            "token": "ANY",
            "type": "pure-token",
            "optional": true
          }
        ]
      },
      {
        "name": "order",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "asc",
            "type": "pure-token",
            "token": "ASC"
          },
          {
            "name": "desc",
            "type": "pure-token",
            "token": "DESC"
          }
        ]
      },
      {
        "name": "store",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "token": "STORE",
            "name": "storekey",
            "display": "key",
            "type": "key",
            "key_spec_index": 1
          },
          {
            "token": "STOREDIST",
            "name": "storedistkey",
            "display": "key",
            "type": "key",
            "key_spec_index": 2
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "Array of matched members information.",
      "anyOf": [
        {
          "description": "If no WITH* option is specified, array of matched members names.",
          "type": "array",
          "items": {
            "description": "Name",
            "type": "string"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 4,
            "items": [
              {
                "description": "Matched member name.",
                "type": "string"
              }
            ],
            "additionalItems": {
              "oneOf": [
                {
                  "description": "If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius.",
                  "type": "string"
                },
                {
                  "description": "If WITHHASH option is specified, the geohash integer.",
                  "type": "integer"
                },
                {
                  "description": "If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude).",
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": [
                    {
                      "description": "Latitude (x).",
                      "type": "number"
                    },
                    {
                      "description": "Longitude (y).",
                      "type": "number"
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "description": "Number of items stored in key.",
          "type": "integer"
        }
      ]
    }
  },
  "GEOSEARCH": {
    "summary": "Queries a geospatial index for members inside an area of a box or a circle.",
    "complexity": "O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape",
    "group": "geo",
    "since": "6.2.0",
    "arity": -7,
    "function": "geosearchCommand",
    "history": [
      [
        "7.0.0",
        "Added support for uppercase unit names."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "from",
        "type": "oneof",
        "arguments": [
          {
            "token": "FROMMEMBER",
            "name": "member",
            "type": "string"
          },
          {
            "token": "FROMLONLAT",
            "name": "fromlonlat",
            "type": "block",
            "arguments": [
              {
                "name": "longitude",
                "type": "double"
              },
              {
                "name": "latitude",
                "type": "double"
              }
            ]
          }
        ]
      },
      {
        "name": "by",
        "type": "oneof",
        "arguments": [
          {
            "name": "circle",
            "type": "block",
            "arguments": [
              {
                "token": "BYRADIUS",
                "name": "radius",
                "type": "double"
              },
              {
                "name": "unit",
                "type": "oneof",
                "arguments": [
                  {
                    "name": "m",
                    "type": "pure-token",
                    "token": "m"
                  },
                  {
                    "name": "km",
                    "type": "pure-token",
                    "token": "km"
                  },
                  {
                    "name": "ft",
                    "type": "pure-token",
                    "token": "ft"
                  },
                  {
                    "name": "mi",
                    "type": "pure-token",
                    "token": "mi"
                  }
                ]
              }
            ]
          },
          {
            "name": "box",
            "type": "block",
            "arguments": [
              {
                "token": "BYBOX",
                "name": "width",
                "type": "double"
              },
              {
                "name": "height",
                "type": "double"
              },
              {
                "name": "unit",
                "type": "oneof",
                "arguments": [
                  {
                    "name": "m",
                    "type": "pure-token",
                    "token": "m"
                  },
                  {
                    "name": "km",
                    "type": "pure-token",
                    "token": "km"
                  },
                  {
                    "name": "ft",
                    "type": "pure-token",
                    "token": "ft"
                  },
                  {
                    "name": "mi",
                    "type": "pure-token",
                    "token": "mi"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "order",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "asc",
            "type": "pure-token",
            "token": "ASC"
          },
          {
            "name": "desc",
            "type": "pure-token",
            "token": "DESC"
          }
        ]
      },
      {
        "name": "count-block",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "token": "COUNT",
            "name": "count",
            "type": "integer"
          },
          {
            "name": "any",
            "token": "ANY",
            "type": "pure-token",
            "optional": true
          }
        ]
      },
      {
        "name": "withcoord",
        "token": "WITHCOORD",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withdist",
        "token": "WITHDIST",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "withhash",
        "token": "WITHHASH",
        "type": "pure-token",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "Array of matched members information.",
      "anyOf": [
        {
          "description": "If no WITH* option is specified, array of matched members names.",
          "type": "array",
          "items": {
            "description": "Name.",
            "type": "string"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 1,
            "maxItems": 4,
            "items": [
              {
                "description": "Matched member name.",
                "type": "string"
              }
            ],
            "additionalItems": {
              "oneOf": [
                {
                  "description": "If WITHDIST option is specified, the distance from the center as a floating point number, in the same unit specified in the radius.",
                  "type": "string"
                },
                {
                  "description": "If WITHHASH option is specified, the geohash integer.",
                  "type": "integer"
                },
                {
                  "description": "If WITHCOORD option is specified, the coordinates as a two items x,y array (longitude,latitude).",
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": [
                    {
                      "description": "Latitude (x).",
                      "type": "number"
                    },
                    {
                      "description": "Longitude (y).",
                      "type": "number"
                    }
                  ]
                }
              ]
            }
          }
        }
      ]
    }
  },
  "GEOSEARCHSTORE": {
    "summary": "Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.",
    "complexity": "O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape",
    "group": "geo",
    "since": "6.2.0",
    "arity": -8,
    "function": "geosearchstoreCommand",
    "history": [
      [
        "7.0.0",
        "Added support for uppercase unit names."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "GEO"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "source",
        "type": "key",
        "key_spec_index": 1
      },
      {
        "name": "from",
        "type": "oneof",
        "arguments": [
          {
            "token": "FROMMEMBER",
            "name": "member",
            "type": "string"
          },
          {
            "token": "FROMLONLAT",
            "name": "fromlonlat",
            "type": "block",
            "arguments": [
              {
                "name": "longitude",
                "type": "double"
              },
              {
                "name": "latitude",
                "type": "double"
              }
            ]
          }
        ]
      },
      {
        "name": "by",
        "type": "oneof",
        "arguments": [
          {
            "name": "circle",
            "type": "block",
            "arguments": [
              {
                "token": "BYRADIUS",
                "name": "radius",
                "type": "double"
              },
              {
                "name": "unit",
                "type": "oneof",
                "arguments": [
                  {
                    "name": "m",
                    "type": "pure-token",
                    "token": "m"
                  },
                  {
                    "name": "km",
                    "type": "pure-token",
                    "token": "km"
                  },
                  {
                    "name": "ft",
                    "type": "pure-token",
                    "token": "ft"
                  },
                  {
                    "name": "mi",
                    "type": "pure-token",
                    "token": "mi"
                  }
                ]
              }
            ]
          },
          {
            "name": "box",
            "type": "block",
            "arguments": [
              {
                "token": "BYBOX",
                "name": "width",
                "type": "double"
              },
              {
                "name": "height",
                "type": "double"
              },
              {
                "name": "unit",
                "type": "oneof",
                "arguments": [
                  {
                    "name": "m",
                    "type": "pure-token",
                    "token": "m"
                  },
                  {
                    "name": "km",
                    "type": "pure-token",
                    "token": "km"
                  },
                  {
                    "name": "ft",
                    "type": "pure-token",
                    "token": "ft"
                  },
                  {
                    "name": "mi",
                    "type": "pure-token",
                    "token": "mi"
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "name": "order",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "asc",
            "type": "pure-token",
            "token": "ASC"
          },
          {
            "name": "desc",
            "type": "pure-token",
            "token": "DESC"
          }
        ]
      },
      {
        "name": "count-block",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "token": "COUNT",
            "name": "count",
            "type": "integer"
          },
          {
            "name": "any",
            "token": "ANY",
            "type": "pure-token",
            "optional": true
          }
        ]
      },
      {
        "name": "storedist",
        "token": "STOREDIST",
        "type": "pure-token",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "The number of elements in the resulting set.",
      "type": "integer"
    }
  },
  "GET": {
    "summary": "Returns the string value of a key.",
    "complexity": "O(1)",
    "group": "string",
    "since": "1.0.0",
    "arity": 2,
    "function": "getCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The value of the key.",
          "type": "string"
        },
        {
          "description": "Key does not exist.",
          "type": "null"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "GETBIT": {
    "summary": "Returns a bit value by offset.",
    "complexity": "O(1)",
    "group": "bitmap",
    "since": "2.2.0",
    "arity": 3,
    "function": "getbitCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "BITMAP"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The bit value stored at offset.",
      "oneOf": [
        {
          "const": 0
        },
        {
          "const": 1
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "offset",
        "type": "integer"
      }
    ]
  },
  "GETDEL": {
    "summary": "Returns the string value of a key after deleting the key.",
    "complexity": "O(1)",
    "group": "string",
    "since": "6.2.0",
    "arity": 2,
    "function": "getdelCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The value of the key.",
          "type": "string"
        },
        {
          "description": "The key does not exist.",
          "type": "null"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "GETEX": {
    "summary": "Returns the string value of a key after setting its expiration time.",
    "complexity": "O(1)",
    "group": "string",
    "since": "6.2.0",
    "arity": -2,
    "function": "getexCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "notes": "RW and UPDATE because it changes the TTL",
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The value of the key.",
          "type": "string"
        },
        {
          "description": "Key does not exist.",
          "type": "null"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "expiration",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "seconds",
            "type": "integer",
            "token": "EX"
          },
          {
            "name": "milliseconds",
            "type": "integer",
            "token": "PX"
          },
          {
            "name": "unix-time-seconds",
            "type": "unix-time",
            "token": "EXAT"
          },
          {
            "name": "unix-time-milliseconds",
            "type": "unix-time",
            "token": "PXAT"
          },
          {
            "name": "persist",
            "type": "pure-token",
            "token": "PERSIST"
          }
        ]
      }
    ]
  },
  "GETRANGE": {
    "summary": "Returns a substring of the string stored at a key.",
    "complexity": "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.",
    "group": "string",
    "since": "2.4.0",
    "arity": 4,
    "function": "getrangeCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "string",
      "description": "The substring of the string value stored at key, determined by the offsets start and end (both are inclusive)."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "end",
        "type": "integer"
      }
    ]
  },
  "GETSET": {
    "summary": "Returns the previous string value of a key after setting it to a new value.",
    "complexity": "O(1)",
    "group": "string",
    "since": "1.0.0",
    "arity": 3,
    "function": "getsetCommand",
    "deprecated_since": "6.2.0",
    "replaced_by": "`SET` with the `!GET` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The old value stored at the key.",
          "type": "string"
        },
        {
          "description": "The key does not exist.",
          "type": "null"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "value",
        "type": "string"
      }
    ]
  },
  "HDEL": {
    "summary": "Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.",
    "complexity": "O(N) where N is the number of fields to be removed.",
    "group": "hash",
    "since": "2.0.0",
    "arity": -3,
    "function": "hdelCommand",
    "history": [
      [
        "2.4.0",
        "Accepts multiple `field` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The number of fields that were removed from the hash."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "field",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "HELLO": {
    "summary": "Handshakes with the server.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "6.0.0",
    "arity": -1,
    "function": "helloCommand",
    "history": [
      [
        "8.1.0",
        "A new `availability_zone` field is added to the response if the `availability-zone` config is set."
      ],
      [
        "6.2.0",
        "`protover` made optional; when called without arguments the command reports the current connection's context."
      ]
    ],
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "NO_AUTH",
      "SENTINEL",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "server": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "proto": {
          "const": 3
        },
        "id": {
          "type": "integer"
        },
        "mode": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "modules": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string"
              },
              "ver": {
                "type": "integer"
              },
              "path": {
                "type": "string"
              },
              "args": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "arguments": [
      {
        "name": "arguments",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "protover",
            "type": "integer"
          },
          {
            "token": "AUTH",
            "name": "auth",
            "type": "block",
            "optional": true,
            "arguments": [
              {
                "name": "username",
                "type": "string"
              },
              {
                "name": "password",
                "type": "string"
              }
            ]
          },
          {
            "token": "SETNAME",
            "name": "clientname",
            "type": "string",
            "optional": true
          }
        ]
      }
    ]
  },
  "HEXISTS": {
    "summary": "Determines whether a field exists in a hash.",
    "complexity": "O(1)",
    "group": "hash",
    "since": "2.0.0",
    "arity": 3,
    "function": "hexistsCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The hash does not contain the field, or key does not exist.",
          "const": 0
        },
        {
          "description": "The hash contains the field.",
          "const": 1
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "field",
        "type": "string"
      }
    ]
  },
  "HGET": {
    "summary": "Returns the value of a field in a hash.",
    "complexity": "O(1)",
    "group": "hash",
    "since": "2.0.0",
    "arity": 3,
    "function": "hgetCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The value associated with the field.",
          "type": "string"
        },
        {
          "description": "If the field is not present in the hash or key does not exist.",
          "type": "null"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "field",
        "type": "string"
      }
    ]
  },
  "HGETALL": {
    "summary": "Returns all fields and values in a hash.",
    "complexity": "O(N) where N is the size of the hash.",
    "group": "hash",
    "since": "2.0.0",
    "arity": 2,
    "function": "hgetallCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "HASH"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "object",
      "description": "Map of fields and their values stored in the hash, or an empty list when key does not exist. In RESP2 this is returned as a flat array.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "HINCRBY": {
    "summary": "Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.",
    "complexity": "O(1)",
    "group": "hash",
    "since": "2.0.0",
    "arity": 4,
    "function": "hincrbyCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The value of the field after the increment operation."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "field",
        "type": "string"
      },
      {
        "name": "increment",
        "type": "integer"
      }
    ]
  },
  "HINCRBYFLOAT": {
    "summary": "Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.",
    "complexity": "O(1)",
    "group": "hash",
    "since": "2.6.0",
    "arity": 4,
    "function": "hincrbyfloatCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "string",
      "description": "The value of the field after the increment operation."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "field",
        "type": "string"
      },
      {
        "name": "increment",
        "type": "double"
      }
    ]
  },
  "HKEYS": {
    "summary": "Returns all fields in a hash.",
    "complexity": "O(N) where N is the size of the hash.",
    "group": "hash",
    "since": "2.0.0",
    "arity": 2,
    "function": "hkeysCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "HASH"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of fields in the hash, or an empty list when the key does not exist.",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "HLEN": {
    "summary": "Returns the number of fields in a hash.",
    "complexity": "O(1)",
    "group": "hash",
    "since": "2.0.0",
    "arity": 2,
    "function": "hlenCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of the fields in the hash, or 0 when the key does not exist."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "HMGET": {
    "summary": "Returns the values of all fields in a hash.",
    "complexity": "O(N) where N is the number of fields being requested.",
    "group": "hash",
    "since": "2.0.0",
    "arity": -3,
    "function": "hmgetCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "List of values associated with the given fields, in the same order as they are requested.",
      "type": "array",
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "field",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "HMSET": {
    "summary": "Sets the values of multiple fields.",
    "complexity": "O(N) where N is the number of fields being set.",
    "group": "hash",
    "since": "2.0.0",
    "arity": -4,
    "function": "hsetCommand",
    "deprecated_since": "4.0.0",
    "replaced_by": "`HSET` with multiple field-value pairs",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "field",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ]
  },
  "HRANDFIELD": {
    "summary": "Returns one or more random fields from a hash.",
    "complexity": "O(N) where N is the number of fields returned",
    "group": "hash",
    "since": "6.2.0",
    "arity": -2,
    "function": "hrandfieldCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "HASH"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "Key doesn't exist",
          "type": "null"
        },
        {
          "description": "A single random field. Returned in case `COUNT` was not used.",
          "type": "string"
        },
        {
          "description": "A list of fields. Returned in case `COUNT` was used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "description": "Fields and their values. Returned in case `COUNT` and `WITHVALUES` were used. In RESP2 this is returned as a flat array.",
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Field",
                "type": "string"
              },
              {
                "description": "Value",
                "type": "string"
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "options",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "count",
            "type": "integer"
          },
          {
            "name": "withvalues",
            "token": "WITHVALUES",
            "type": "pure-token",
            "optional": true
          }
        ]
      }
    ]
  },
  "HSCAN": {
    "summary": "Iterates over fields and values of a hash.",
    "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
    "group": "hash",
    "since": "2.8.0",
    "arity": -3,
    "function": "hscanCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "HASH"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "cursor",
        "type": "integer"
      },
      {
        "token": "MATCH",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "token": "NOVALUES",
        "name": "novalues",
        "type": "pure-token",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "Cursor and scan response in array form.",
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "description": "Cursor.",
          "type": "string"
        },
        {
          "description": "List of key/value pairs from the hash where each even element is the key, and each odd element is the value, or when novalues option is on, a list of keys from the hash.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    }
  },
  "HSET": {
    "summary": "Creates or modifies the value of a field in a hash.",
    "complexity": "O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.",
    "group": "hash",
    "since": "2.0.0",
    "arity": -4,
    "function": "hsetCommand",
    "history": [
      [
        "4.0.0",
        "Accepts multiple `field` and `value` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The number of fields that were added",
      "type": "integer"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "field",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ]
  },
  "HSETNX": {
    "summary": "Sets the value of a field in a hash only when the field doesn't exist.",
    "complexity": "O(1)",
    "group": "hash",
    "since": "2.0.0",
    "arity": 4,
    "function": "hsetnxCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The field is a new field in the hash and value was set.",
          "const": 0
        },
        {
          "description": "The field already exists in the hash and no operation was performed.",
          "const": 1
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "field",
        "type": "string"
      },
      {
        "name": "value",
        "type": "string"
      }
    ]
  },
  "HSTRLEN": {
    "summary": "Returns the length of the value of a field.",
    "complexity": "O(1)",
    "group": "hash",
    "since": "3.2.0",
    "arity": 3,
    "function": "hstrlenCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "HASH"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "String length of the value associated with the field, or zero when the field is not present in the hash or key does not exist at all.",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "field",
        "type": "string"
      }
    ]
  },
  "HVALS": {
    "summary": "Returns all values in a hash.",
    "complexity": "O(N) where N is the size of the hash.",
    "group": "hash",
    "since": "2.0.0",
    "arity": 2,
    "function": "hvalsCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "HASH"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of values in the hash, or an empty list when the key does not exist.",
      "items": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "INCR": {
    "summary": "Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "1.0.0",
    "arity": 2,
    "function": "incrCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ],
    "reply_schema": {
      "description": "The value of key after the increment",
      "type": "integer"
    }
  },
  "INCRBY": {
    "summary": "Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "1.0.0",
    "arity": 3,
    "function": "incrbyCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The value of the key after incrementing it."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "increment",
        "type": "integer"
      }
    ]
  },
  "INCRBYFLOAT": {
    "summary": "Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "2.6.0",
    "arity": 3,
    "function": "incrbyfloatCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "string",
      "description": "The value of the key after incrementing it."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "increment",
        "type": "double"
      }
    ]
  },
  "INFO": {
    "summary": "Returns information and statistics about the server.",
    "complexity": "O(1)",
    "group": "server",
    "since": "1.0.0",
    "arity": -1,
    "function": "infoCommand",
    "history": [
      [
        "7.0.0",
        "Added support for taking multiple section arguments."
      ]
    ],
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "acl_categories": [
      "DANGEROUS"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "reply_schema": {
      "description": "A map of info fields, one field per line in the form of <field>:<value> where the value can be a comma separated map like <key>=<val>. Also contains section header lines starting with `#` and blank lines.",
      "type": "string"
    },
    "arguments": [
      {
        "name": "section",
        "type": "string",
        "multiple": true,
        "optional": true
      }
    ]
  },
  "KEYS": {
    "summary": "Returns all key names that match a pattern.",
    "complexity": "O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.",
    "group": "generic",
    "since": "1.0.0",
    "arity": 2,
    "function": "keysCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "KEYSPACE",
      "DANGEROUS"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "arguments": [
      {
        "name": "pattern",
        "type": "pattern"
      }
    ],
    "reply_schema": {
      "description": "List of keys matching pattern.",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "LASTSAVE": {
    "summary": "Returns the Unix timestamp of the last successful save to disk.",
    "complexity": "O(1)",
    "group": "server",
    "since": "1.0.0",
    "arity": 1,
    "function": "lastsaveCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "FAST"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "acl_categories": [
      "ADMIN",
      "DANGEROUS"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "UNIX TIME of the last DB save executed with success."
    }
  },
  "LATENCY DOCTOR": {
    "summary": "Returns a human-readable latency analysis report.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.13",
    "arity": 2,
    "container": "LATENCY",
    "function": "latencyCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "reply_schema": {
      "type": "string",
      "description": "A human readable latency analysis report."
    }
  },
  "LATENCY GRAPH": {
    "summary": "Returns a latency graph for an event.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.13",
    "arity": 3,
    "container": "LATENCY",
    "function": "latencyCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "arguments": [
      {
        "name": "event",
        "type": "string"
      }
    ],
    "reply_schema": {
      "type": "string",
      "description": "Latency graph"
    }
  },
  "LATENCY HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.13",
    "arity": 2,
    "container": "LATENCY",
    "function": "latencyCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "LATENCY HISTOGRAM": {
    "summary": "Returns the cumulative distribution of latencies of a subset or all commands.",
    "complexity": "O(N) where N is the number of commands with latency information being retrieved.",
    "group": "server",
    "since": "7.0.0",
    "arity": -2,
    "container": "LATENCY",
    "function": "latencyCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "reply_schema": {
      "type": "object",
      "description": "A map where each key is a command name, and each value is a map with the total calls, and an inner map of the histogram time buckets.",
      "patternProperties": {
        "^.*$": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "calls": {
              "description": "The total calls for the command.",
              "type": "integer",
              "minimum": 0
            },
            "histogram_usec": {
              "description": "Histogram map, bucket id to latency",
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "arguments": [
      {
        "name": "COMMAND",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "LATENCY HISTORY": {
    "summary": "Returns timestamp-latency samples for an event.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.13",
    "arity": 3,
    "container": "LATENCY",
    "function": "latencyCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "An array where each element is a two elements array representing the timestamp and the latency of the event.",
      "items": {
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "description": "Timestamp of the event.",
            "type": "integer",
            "minimum": 0
          },
          {
            "description": "Latency of the event.",
            "type": "integer",
            "minimum": 0
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "event",
        "type": "string"
      }
    ]
  },
  "LATENCY LATEST": {
    "summary": "Returns the latest latency samples for all events.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.13",
    "arity": 2,
    "container": "LATENCY",
    "function": "latencyCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "An array where each element is an array representing the event name, timestamp, latest and all-time latency measurements.",
      "items": {
        "type": "array",
        "minItems": 6,
        "maxItems": 6,
        "items": [
          {
            "type": "string",
            "description": "Event name."
          },
          {
            "type": "integer",
            "description": "Timestamp."
          },
          {
            "type": "integer",
            "description": "Latest latency in milliseconds."
          },
          {
            "type": "integer",
            "description": "Max latency in milliseconds."
          },
          {
            "type": "integer",
            "description": "Sum of the latencies recorded in the time series for this event."
          },
          {
            "type": "integer",
            "description": "The number of latency spikes recorded in the time series for this event."
          }
        ]
      }
    }
  },
  "LATENCY RESET": {
    "summary": "Resets the latency data for one or more events.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.13",
    "arity": -2,
    "container": "LATENCY",
    "function": "latencyCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:AGG_SUM"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of event time series that were reset."
    },
    "arguments": [
      {
        "name": "event",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "LATENCY": {
    "summary": "A container for latency diagnostics commands.",
    "complexity": "Depends on subcommand.",
    "group": "server",
    "since": "2.8.13",
    "arity": -2
  },
  "LCS": {
    "summary": "Finds the longest common substring.",
    "complexity": "O(N*M) where N and M are the lengths of s1 and s2, respectively",
    "group": "string",
    "since": "7.0.0",
    "arity": -3,
    "function": "lcsCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "string",
          "description": "The longest common subsequence."
        },
        {
          "type": "integer",
          "description": "The length of the longest common subsequence when 'LEN' is given."
        },
        {
          "type": "object",
          "description": "Array with the LCS length and all the ranges in both the strings when 'IDX' is given. In RESP2 this is returned as a flat array",
          "additionalProperties": false,
          "properties": {
            "matches": {
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 3,
                "items": [
                  {
                    "type": "array",
                    "description": "Matched range in the first string.",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "type": "integer"
                    }
                  },
                  {
                    "type": "array",
                    "description": "Matched range in the second string.",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "type": "integer"
                    }
                  }
                ],
                "additionalItems": {
                  "type": "integer",
                  "description": "The length of the match when 'WITHMATCHLEN' is given."
                }
              }
            },
            "len": {
              "type": "integer",
              "description": "Length of the longest common subsequence."
            }
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key1",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "key2",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "len",
        "token": "LEN",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "idx",
        "token": "IDX",
        "type": "pure-token",
        "optional": true
      },
      {
        "token": "MINMATCHLEN",
        "name": "min-match-len",
        "type": "integer",
        "optional": true
      },
      {
        "name": "withmatchlen",
        "token": "WITHMATCHLEN",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "LINDEX": {
    "summary": "Returns an element from a list by its index.",
    "complexity": "O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).",
    "group": "list",
    "since": "1.0.0",
    "arity": 3,
    "function": "lindexCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "null",
          "description": "Index is out of range"
        },
        {
          "description": "The requested element",
          "type": "string"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "index",
        "type": "integer"
      }
    ]
  },
  "LINSERT": {
    "summary": "Inserts an element before or after another element in a list.",
    "complexity": "O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).",
    "group": "list",
    "since": "2.2.0",
    "arity": 5,
    "function": "linsertCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "List length after a successful insert operation.",
          "type": "integer",
          "minimum": 1
        },
        {
          "description": "In case key doesn't exist.",
          "const": 0
        },
        {
          "description": "When the pivot wasn't found.",
          "const": -1
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "where",
        "type": "oneof",
        "arguments": [
          {
            "name": "before",
            "type": "pure-token",
            "token": "BEFORE"
          },
          {
            "name": "after",
            "type": "pure-token",
            "token": "AFTER"
          }
        ]
      },
      {
        "name": "pivot",
        "type": "string"
      },
      {
        "name": "element",
        "type": "string"
      }
    ]
  },
  "LLEN": {
    "summary": "Returns the length of a list.",
    "complexity": "O(1)",
    "group": "list",
    "since": "1.0.0",
    "arity": 2,
    "function": "llenCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "List length.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "LMOVE": {
    "summary": "Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.",
    "complexity": "O(1)",
    "group": "list",
    "since": "6.2.0",
    "arity": 5,
    "function": "lmoveCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The element being popped and pushed.",
      "type": "string"
    },
    "arguments": [
      {
        "name": "source",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 1
      },
      {
        "name": "wherefrom",
        "type": "oneof",
        "arguments": [
          {
            "name": "left",
            "type": "pure-token",
            "token": "LEFT"
          },
          {
            "name": "right",
            "type": "pure-token",
            "token": "RIGHT"
          }
        ]
      },
      {
        "name": "whereto",
        "type": "oneof",
        "arguments": [
          {
            "name": "left",
            "type": "pure-token",
            "token": "LEFT"
          },
          {
            "name": "right",
            "type": "pure-token",
            "token": "RIGHT"
          }
        ]
      }
    ]
  },
  "LMPOP": {
    "summary": "Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.",
    "complexity": "O(N+M) where N is the number of provided keys and M is the number of elements returned.",
    "group": "list",
    "since": "7.0.0",
    "arity": -4,
    "function": "lmpopCommand",
    "get_keys_function": "lmpopGetKeys",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "If no element could be popped.",
          "type": "null"
        },
        {
          "description": "List key from which elements were popped.",
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "description": "Name of the key from which elements were popped.",
              "type": "string"
            },
            {
              "description": "Array of popped elements.",
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "where",
        "type": "oneof",
        "arguments": [
          {
            "name": "left",
            "type": "pure-token",
            "token": "LEFT"
          },
          {
            "name": "right",
            "type": "pure-token",
            "token": "RIGHT"
          }
        ]
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "LOLWUT": {
    "summary": "Displays computer art and the server version",
    "group": "server",
    "since": "5.0.0",
    "arity": -1,
    "function": "lolwutCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "reply_schema": {
      "type": "string",
      "description": "String containing the generative computer art, and a text with the server version."
    },
    "arguments": [
      {
        "token": "VERSION",
        "name": "version",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "LPOP": {
    "summary": "Returns the first elements in a list after removing it. Deletes the list if the last element was popped.",
    "complexity": "O(N) where N is the number of elements returned",
    "group": "list",
    "since": "1.0.0",
    "arity": -2,
    "function": "lpopCommand",
    "history": [
      [
        "6.2.0",
        "Added the `count` argument."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Key does not exist.",
          "type": "null"
        },
        {
          "description": "In case `count` argument was not given, the value of the first element.",
          "type": "string"
        },
        {
          "description": "In case `count` argument was given, a list of popped elements",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true,
        "since": "6.2.0"
      }
    ]
  },
  "LPOS": {
    "summary": "Returns the index of matching elements in a list.",
    "complexity": "O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.",
    "group": "list",
    "since": "6.0.6",
    "arity": -3,
    "function": "lposCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "In case there is no matching element",
          "type": "null"
        },
        {
          "description": "An integer representing the matching element",
          "type": "integer"
        },
        {
          "description": "If the COUNT option is given, an array of integers representing the matching elements (empty if there are no matches)",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "integer"
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "element",
        "type": "string"
      },
      {
        "token": "RANK",
        "name": "rank",
        "type": "integer",
        "optional": true
      },
      {
        "token": "COUNT",
        "name": "num-matches",
        "type": "integer",
        "optional": true
      },
      {
        "token": "MAXLEN",
        "name": "len",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "LPUSH": {
    "summary": "Prepends one or more elements to a list. Creates the key if it doesn't exist.",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "group": "list",
    "since": "1.0.0",
    "arity": -3,
    "function": "lpushCommand",
    "history": [
      [
        "2.4.0",
        "Accepts multiple `element` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Length of the list after the push operations.",
      "type": "integer"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "element",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "LPUSHX": {
    "summary": "Prepends one or more elements to a list only when the list exists.",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "group": "list",
    "since": "2.2.0",
    "arity": -3,
    "function": "lpushxCommand",
    "history": [
      [
        "4.0.0",
        "Accepts multiple `element` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The length of the list after the push operation.",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "element",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "LRANGE": {
    "summary": "Returns a range of elements from a list.",
    "complexity": "O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.",
    "group": "list",
    "since": "1.0.0",
    "arity": 4,
    "function": "lrangeCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "stop",
        "type": "integer"
      }
    ],
    "reply_schema": {
      "description": "List of elements in the specified range",
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  },
  "LREM": {
    "summary": "Removes elements from a list. Deletes the list if the last element was removed.",
    "complexity": "O(N+M) where N is the length of the list and M is the number of elements removed.",
    "group": "list",
    "since": "1.0.0",
    "arity": 4,
    "function": "lremCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The number of removed elements.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "count",
        "type": "integer"
      },
      {
        "name": "element",
        "type": "string"
      }
    ]
  },
  "LSET": {
    "summary": "Sets the value of an element in a list by its index.",
    "complexity": "O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).",
    "group": "list",
    "since": "1.0.0",
    "arity": 4,
    "function": "lsetCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "index",
        "type": "integer"
      },
      {
        "name": "element",
        "type": "string"
      }
    ]
  },
  "LTRIM": {
    "summary": "Removes elements from both ends a list. Deletes the list if all elements were trimmed.",
    "complexity": "O(N) where N is the number of elements to be removed by the operation.",
    "group": "list",
    "since": "1.0.0",
    "arity": 4,
    "function": "ltrimCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "stop",
        "type": "integer"
      }
    ]
  },
  "MEMORY DOCTOR": {
    "summary": "Outputs a memory problems report.",
    "complexity": "O(1)",
    "group": "server",
    "since": "4.0.0",
    "arity": 2,
    "container": "MEMORY",
    "function": "memoryCommand",
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "reply_schema": {
      "description": "Memory problems report.",
      "type": "string"
    }
  },
  "MEMORY HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "server",
    "since": "4.0.0",
    "arity": 2,
    "container": "MEMORY",
    "function": "memoryCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "MEMORY MALLOC-STATS": {
    "summary": "Returns the allocator statistics.",
    "complexity": "Depends on how much memory is allocated, could be slow",
    "group": "server",
    "since": "4.0.0",
    "arity": 2,
    "container": "MEMORY",
    "function": "memoryCommand",
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "command_flags": [
      "LOADING"
    ],
    "reply_schema": {
      "type": "string",
      "description": "The memory allocator's internal statistics report."
    }
  },
  "MEMORY PURGE": {
    "summary": "Asks the allocator to release memory.",
    "complexity": "Depends on how much memory is allocated, could be slow",
    "group": "server",
    "since": "4.0.0",
    "arity": 2,
    "container": "MEMORY",
    "function": "memoryCommand",
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "command_flags": [
      "LOADING"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "MEMORY STATS": {
    "summary": "Returns details about memory usage.",
    "complexity": "O(1)",
    "group": "server",
    "since": "4.0.0",
    "arity": 2,
    "container": "MEMORY",
    "function": "memoryCommand",
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "reply_schema": {
      "description": "Memory usage details.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "peak.allocated": {
          "type": "integer"
        },
        "total.allocated": {
          "type": "integer"
        },
        "startup.allocated": {
          "type": "integer"
        },
        "replication.backlog": {
          "type": "integer"
        },
        "clients.slaves": {
          "type": "integer"
        },
        "clients.normal": {
          "type": "integer"
        },
        "cluster.links": {
          "type": "integer"
        },
        "aof.buffer": {
          "type": "integer"
        },
        "lua.caches": {
          "type": "integer"
        },
        "functions.caches": {
          "type": "integer"
        },
        "overhead.db.hashtable.lut": {
          "type": "integer"
        },
        "overhead.db.hashtable.rehashing": {
          "type": "integer"
        },
        "overhead.total": {
          "type": "integer"
        },
        "db.dict.rehashing.count": {
          "type": "integer"
        },
        "keys.count": {
          "type": "integer"
        },
        "keys.bytes-per-key": {
          "type": "integer"
        },
        "dataset.bytes": {
          "type": "integer"
        },
        "dataset.percentage": {
          "type": "number"
        },
        "peak.percentage": {
          "type": "number"
        },
        "allocator.allocated": {
          "type": "integer"
        },
        "allocator.active": {
          "type": "integer"
        },
        "allocator.resident": {
          "type": "integer"
        },
        "allocator.muzzy": {
          "type": "integer"
        },
        "allocator-fragmentation.ratio": {
          "type": "number"
        },
        "allocator-fragmentation.bytes": {
          "type": "integer"
        },
        "allocator-rss.ratio": {
          "type": "number"
        },
        "allocator-rss.bytes": {
          "type": "integer"
        },
        "rss-overhead.ratio": {
          "type": "number"
        },
        "rss-overhead.bytes": {
          "type": "integer"
        },
        "fragmentation": {
          "type": "number"
        },
        "fragmentation.bytes": {
          "type": "integer"
        }
      },
      "patternProperties": {
        "^db\\.\\d+$": {
          "type": "object",
          "properties": {
            "overhead.hashtable.main": {
              "type": "integer"
            },
            "overhead.hashtable.expires": {
              "type": "integer"
            }
          },
          "additionalProperties": false
        }
      }
    }
  },
  "MEMORY USAGE": {
    "summary": "Estimates the memory usage of a key.",
    "complexity": "O(N) where N is the number of samples.",
    "group": "server",
    "since": "4.0.0",
    "arity": -3,
    "container": "MEMORY",
    "function": "memoryCommand",
    "command_flags": [
      "READONLY"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Number of bytes that a key and its value require to be stored in RAM.",
          "type": "integer"
        },
        {
          "description": "Key does not exist.",
          "type": "null"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "token": "SAMPLES",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "MEMORY": {
    "summary": "A container for memory diagnostics commands.",
    "complexity": "Depends on subcommand.",
    "group": "server",
    "since": "4.0.0",
    "arity": -2
  },
  "MGET": {
    "summary": "Atomically returns the string values of one or more keys.",
    "complexity": "O(N) where N is the number of keys to retrieve.",
    "group": "string",
    "since": "1.0.0",
    "arity": -2,
    "function": "mgetCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "command_tips": [
      "REQUEST_POLICY:MULTI_SHARD"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "List of values at the specified keys.",
      "type": "array",
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ]
  },
  "MIGRATE": {
    "summary": "Atomically transfers a key from one instance to another.",
    "complexity": "This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.",
    "group": "generic",
    "since": "2.6.0",
    "arity": -6,
    "function": "migrateCommand",
    "get_keys_function": "migrateGetKeys",
    "history": [
      [
        "3.0.0",
        "Added the `COPY` and `REPLACE` options."
      ],
      [
        "3.0.6",
        "Added the `KEYS` option."
      ],
      [
        "4.0.7",
        "Added the `AUTH` option."
      ],
      [
        "6.0.0",
        "Added the `AUTH2` option."
      ]
    ],
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "KEYSPACE",
      "DANGEROUS"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 3
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE",
          "INCOMPLETE"
        ],
        "begin_search": {
          "keyword": {
            "keyword": "KEYS",
            "startfrom": -2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": "OK",
          "description": "Success."
        },
        {
          "const": "NOKEY",
          "description": "No keys were found in the source instance."
        }
      ]
    },
    "arguments": [
      {
        "name": "host",
        "type": "string"
      },
      {
        "name": "port",
        "type": "integer"
      },
      {
        "name": "key-selector",
        "type": "oneof",
        "arguments": [
          {
            "name": "key",
            "type": "key",
            "key_spec_index": 0
          },
          {
            "name": "empty-string",
            "type": "pure-token",
            "token": "\"\""
          }
        ]
      },
      {
        "name": "destination-db",
        "type": "integer"
      },
      {
        "name": "timeout",
        "type": "integer"
      },
      {
        "name": "copy",
        "token": "COPY",
        "type": "pure-token",
        "optional": true,
        "since": "3.0.0"
      },
      {
        "name": "replace",
        "token": "REPLACE",
        "type": "pure-token",
        "optional": true,
        "since": "3.0.0"
      },
      {
        "name": "authentication",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "token": "AUTH",
            "name": "auth",
            "display": "password",
            "type": "string",
            "since": "4.0.7"
          },
          {
            "token": "AUTH2",
            "name": "auth2",
            "type": "block",
            "since": "6.0.0",
            "arguments": [
              {
                "name": "username",
                "type": "string"
              },
              {
                "name": "password",
                "type": "string"
              }
            ]
          }
        ]
      },
      {
        "token": "KEYS",
        "name": "keys",
        "display": "key",
        "type": "key",
        "key_spec_index": 1,
        "optional": true,
        "multiple": true,
        "since": "3.0.6"
      }
    ]
  },
  "MODULE HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "server",
    "since": "5.0.0",
    "arity": 2,
    "container": "MODULE",
    "function": "moduleCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "MODULE LIST": {
    "summary": "Returns all loaded modules.",
    "complexity": "O(N) where N is the number of loaded modules.",
    "group": "server",
    "since": "4.0.0",
    "arity": 2,
    "container": "MODULE",
    "function": "moduleCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Returns information about the modules loaded to the server.",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the module."
          },
          "ver": {
            "type": "integer",
            "description": "Version of the module."
          },
          "path": {
            "type": "string",
            "description": "Module path."
          },
          "args": {
            "type": "array",
            "description": "Module arguments.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "MODULE LOAD": {
    "summary": "Loads a module.",
    "complexity": "O(1)",
    "group": "server",
    "since": "4.0.0",
    "arity": -3,
    "container": "MODULE",
    "function": "moduleCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NOSCRIPT",
      "PROTECTED"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "path",
        "type": "string"
      },
      {
        "name": "arg",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "MODULE LOADEX": {
    "summary": "Loads a module using extended parameters.",
    "complexity": "O(1)",
    "group": "server",
    "since": "7.0.0",
    "arity": -3,
    "container": "MODULE",
    "function": "moduleCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NOSCRIPT",
      "PROTECTED"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "path",
        "type": "string"
      },
      {
        "name": "configs",
        "token": "CONFIG",
        "type": "block",
        "multiple": true,
        "multiple_token": true,
        "optional": true,
        "arguments": [
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      },
      {
        "name": "args",
        "token": "ARGS",
        "type": "string",
        "multiple": true,
        "optional": true
      }
    ]
  },
  "MODULE UNLOAD": {
    "summary": "Unloads a module.",
    "complexity": "O(1)",
    "group": "server",
    "since": "4.0.0",
    "arity": 3,
    "container": "MODULE",
    "function": "moduleCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NOSCRIPT",
      "PROTECTED"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "name",
        "type": "string"
      }
    ]
  },
  "MODULE": {
    "summary": "A container for module commands.",
    "complexity": "Depends on subcommand.",
    "group": "server",
    "since": "4.0.0",
    "arity": -2
  },
  "MONITOR": {
    "summary": "Listens for all requests received by the server in real-time.",
    "group": "server",
    "since": "1.0.0",
    "arity": 1,
    "function": "monitorCommand",
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ]
  },
  "MOVE": {
    "summary": "Moves a key to another database.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "1.0.0",
    "arity": 3,
    "function": "moveCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "db",
        "type": "integer"
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Key was moved.",
          "const": 1
        },
        {
          "description": "Key wasn't moved. When key already exists in the destination database, or it does not exist in the source database",
          "const": 0
        }
      ]
    }
  },
  "MSET": {
    "summary": "Atomically creates or modifies the string values of one or more keys.",
    "complexity": "O(N) where N is the number of keys to set.",
    "group": "string",
    "since": "1.0.1",
    "arity": -3,
    "function": "msetCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "STRING"
    ],
    "command_tips": [
      "REQUEST_POLICY:MULTI_SHARD",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 2,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "key",
            "type": "key",
            "key_spec_index": 0
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ]
  },
  "MSETNX": {
    "summary": "Atomically modifies the string values of one or more keys only when all keys don't exist.",
    "complexity": "O(N) where N is the number of keys to set.",
    "group": "string",
    "since": "1.0.1",
    "arity": -3,
    "function": "msetnxCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 2,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "No key was set (at least one key already existed).",
          "const": 0
        },
        {
          "description": "All the keys were set.",
          "const": 1
        }
      ]
    },
    "arguments": [
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "key",
            "type": "key",
            "key_spec_index": 0
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ]
  },
  "MULTI": {
    "summary": "Starts a transaction.",
    "complexity": "O(1)",
    "group": "transactions",
    "since": "1.2.0",
    "arity": 1,
    "function": "multiCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "NO_MULTI",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "TRANSACTION"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "OBJECT ENCODING": {
    "summary": "Returns the internal encoding of an object.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "2.2.3",
    "arity": 3,
    "container": "OBJECT",
    "function": "objectCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Key doesn't exist.",
          "type": "null"
        },
        {
          "description": "Encoding of the object.",
          "type": "string"
        }
      ]
    }
  },
  "OBJECT FREQ": {
    "summary": "Returns the logarithmic access frequency counter of an object.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "4.0.0",
    "arity": 3,
    "container": "OBJECT",
    "function": "objectCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ],
    "reply_schema": {
      "description": "The counter's value.",
      "type": "integer"
    }
  },
  "OBJECT HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "6.2.0",
    "arity": 2,
    "container": "OBJECT",
    "function": "objectCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "OBJECT IDLETIME": {
    "summary": "Returns the time since the last access to an object.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "2.2.3",
    "arity": 3,
    "container": "OBJECT",
    "function": "objectCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ],
    "reply_schema": {
      "description": "The idle time in seconds.",
      "type": "integer"
    }
  },
  "OBJECT REFCOUNT": {
    "summary": "Returns the reference count of a value of a key.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "2.2.3",
    "arity": 3,
    "container": "OBJECT",
    "function": "objectCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ],
    "reply_schema": {
      "description": "The number of references.",
      "type": "integer"
    }
  },
  "OBJECT": {
    "summary": "A container for object introspection commands.",
    "complexity": "Depends on subcommand.",
    "group": "generic",
    "since": "2.2.3",
    "arity": -2
  },
  "PERSIST": {
    "summary": "Removes the expiration time of a key.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "2.2.0",
    "arity": 2,
    "function": "persistCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": 0,
          "description": "Key does not exist or does not have an associated timeout."
        },
        {
          "const": 1,
          "description": "The timeout has been removed."
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "PEXPIRE": {
    "summary": "Sets the expiration time of a key in milliseconds.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "2.6.0",
    "arity": -3,
    "function": "pexpireCommand",
    "history": [
      [
        "7.0.0",
        "Added options: `NX`, `XX`, `GT` and `LT`."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": 0,
          "description": "The timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments."
        },
        {
          "const": 1,
          "description": "The timeout was set."
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "milliseconds",
        "type": "integer"
      },
      {
        "name": "condition",
        "type": "oneof",
        "optional": true,
        "since": "7.0.0",
        "arguments": [
          {
            "name": "nx",
            "type": "pure-token",
            "token": "NX"
          },
          {
            "name": "xx",
            "type": "pure-token",
            "token": "XX"
          },
          {
            "name": "gt",
            "type": "pure-token",
            "token": "GT"
          },
          {
            "name": "lt",
            "type": "pure-token",
            "token": "LT"
          }
        ]
      }
    ]
  },
  "PEXPIREAT": {
    "summary": "Sets the expiration time of a key to a Unix milliseconds timestamp.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "2.6.0",
    "arity": -3,
    "function": "pexpireatCommand",
    "history": [
      [
        "7.0.0",
        "Added options: `NX`, `XX`, `GT` and `LT`."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": 1,
          "description": "The timeout was set."
        },
        {
          "const": 0,
          "description": "The timeout was not set. e.g. key doesn't exist, or operation skipped due to the provided arguments."
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "unix-time-milliseconds",
        "type": "unix-time"
      },
      {
        "name": "condition",
        "type": "oneof",
        "optional": true,
        "since": "7.0.0",
        "arguments": [
          {
            "name": "nx",
            "type": "pure-token",
            "token": "NX"
          },
          {
            "name": "xx",
            "type": "pure-token",
            "token": "XX"
          },
          {
            "name": "gt",
            "type": "pure-token",
            "token": "GT"
          },
          {
            "name": "lt",
            "type": "pure-token",
            "token": "LT"
          }
        ]
      }
    ]
  },
  "PEXPIRETIME": {
    "summary": "Returns the expiration time of a key as a Unix milliseconds timestamp.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "7.0.0",
    "arity": 2,
    "function": "pexpiretimeCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "integer",
          "description": "Expiration Unix timestamp in milliseconds.",
          "minimum": 0
        },
        {
          "const": -1,
          "description": "The key exists but has no associated expiration time."
        },
        {
          "const": -2,
          "description": "The key does not exist."
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "PFADD": {
    "summary": "Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.",
    "complexity": "O(1) to add every element.",
    "group": "hyperloglog",
    "since": "2.8.9",
    "arity": -2,
    "function": "pfaddCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "HYPERLOGLOG"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "element",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "If at least 1 HyperLogLog internal register was altered.",
          "const": 1
        },
        {
          "description": "If no HyperLogLog internal register were altered.",
          "const": 0
        }
      ]
    }
  },
  "PFCOUNT": {
    "summary": "Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).",
    "complexity": "O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.",
    "group": "hyperloglog",
    "since": "2.8.9",
    "arity": -2,
    "function": "pfcountCommand",
    "command_flags": [
      "READONLY",
      "MAY_REPLICATE"
    ],
    "acl_categories": [
      "HYPERLOGLOG"
    ],
    "key_specs": [
      {
        "notes": "RW because it may change the internal representation of the key, and propagate to replicas",
        "flags": [
          "RW",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "The approximated number of unique elements observed via PFADD",
      "type": "integer"
    }
  },
  "PFDEBUG": {
    "summary": "Internal commands for debugging HyperLogLog values.",
    "complexity": "N/A",
    "group": "hyperloglog",
    "since": "2.8.9",
    "arity": 3,
    "function": "pfdebugCommand",
    "doc_flags": [
      "SYSCMD"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "ADMIN"
    ],
    "acl_categories": [
      "HYPERLOGLOG"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "subcommand",
        "type": "string"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "PFMERGE": {
    "summary": "Merges one or more HyperLogLog values into a single key.",
    "complexity": "O(N) to merge N HyperLogLogs, but with high constant times.",
    "group": "hyperloglog",
    "since": "2.8.9",
    "arity": -2,
    "function": "pfmergeCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "HYPERLOGLOG"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "destkey",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "sourcekey",
        "type": "key",
        "key_spec_index": 1,
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "PFSELFTEST": {
    "summary": "An internal command for testing HyperLogLog values.",
    "complexity": "N/A",
    "group": "hyperloglog",
    "since": "2.8.9",
    "arity": 1,
    "function": "pfselftestCommand",
    "doc_flags": [
      "SYSCMD"
    ],
    "command_flags": [
      "ADMIN"
    ],
    "acl_categories": [
      "HYPERLOGLOG"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "PING": {
    "summary": "Returns the server's liveliness response.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "1.0.0",
    "arity": -1,
    "function": "pingCommand",
    "command_flags": [
      "FAST",
      "SENTINEL"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "anyOf": [
        {
          "const": "PONG",
          "description": "Default reply."
        },
        {
          "type": "string",
          "description": "Relay of given `message`."
        }
      ]
    },
    "arguments": [
      {
        "name": "message",
        "type": "string",
        "optional": true
      }
    ]
  },
  "PSETEX": {
    "summary": "Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "2.6.0",
    "arity": 4,
    "function": "psetexCommand",
    "deprecated_since": "2.6.12",
    "replaced_by": "`SET` with the `PX` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "milliseconds",
        "type": "integer"
      },
      {
        "name": "value",
        "type": "string"
      }
    ]
  },
  "PSUBSCRIBE": {
    "summary": "Listens for messages published to channels that match one or more patterns.",
    "complexity": "O(N) where N is the number of patterns to subscribe to.",
    "group": "pubsub",
    "since": "2.0.0",
    "arity": -2,
    "function": "psubscribeCommand",
    "command_flags": [
      "PUBSUB",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "arguments": [
      {
        "name": "pattern",
        "type": "pattern",
        "multiple": true
      }
    ]
  },
  "PSYNC": {
    "summary": "An internal command used in replication.",
    "group": "server",
    "since": "2.8.0",
    "arity": -3,
    "function": "syncCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NO_MULTI",
      "NOSCRIPT"
    ],
    "arguments": [
      {
        "name": "replicationid",
        "type": "string"
      },
      {
        "name": "offset",
        "type": "integer"
      }
    ]
  },
  "PTTL": {
    "summary": "Returns the expiration time in milliseconds of a key.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "2.6.0",
    "arity": 2,
    "function": "pttlCommand",
    "history": [
      [
        "2.8.0",
        "Added the -2 reply."
      ]
    ],
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "TTL in milliseconds.",
          "type": "integer",
          "minimum": 0
        },
        {
          "description": "The key exists but has no associated expire.",
          "const": -1
        },
        {
          "description": "The key does not exist.",
          "const": -2
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "PUBLISH": {
    "summary": "Posts a message to a channel.",
    "complexity": "O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).",
    "group": "pubsub",
    "since": "2.0.0",
    "arity": 3,
    "function": "publishCommand",
    "command_flags": [
      "PUBSUB",
      "LOADING",
      "STALE",
      "FAST",
      "MAY_REPLICATE",
      "SENTINEL"
    ],
    "arguments": [
      {
        "name": "channel",
        "type": "string"
      },
      {
        "name": "message",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "The number of clients that received the message. Note that in a Cluster, only clients that are connected to the same node as the publishing client are included in the count.",
      "type": "integer",
      "minimum": 0
    }
  },
  "PUBSUB CHANNELS": {
    "summary": "Returns the active channels.",
    "complexity": "O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)",
    "group": "pubsub",
    "since": "2.8.0",
    "arity": -2,
    "container": "PUBSUB",
    "function": "pubsubCommand",
    "command_flags": [
      "PUBSUB",
      "LOADING",
      "STALE"
    ],
    "arguments": [
      {
        "name": "pattern",
        "type": "pattern",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "A list of active channels, optionally matching the specified pattern.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    }
  },
  "PUBSUB HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "pubsub",
    "since": "6.2.0",
    "arity": 2,
    "container": "PUBSUB",
    "function": "pubsubCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "PUBSUB NUMPAT": {
    "summary": "Returns a count of unique pattern subscriptions.",
    "complexity": "O(1)",
    "group": "pubsub",
    "since": "2.8.0",
    "arity": 2,
    "container": "PUBSUB",
    "function": "pubsubCommand",
    "command_flags": [
      "PUBSUB",
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "description": "The number of patterns all the clients are subscribed to.",
      "type": "integer",
      "minimum": 0
    }
  },
  "PUBSUB NUMSUB": {
    "summary": "Returns a count of subscribers to channels.",
    "complexity": "O(N) for the NUMSUB subcommand, where N is the number of requested channels",
    "group": "pubsub",
    "since": "2.8.0",
    "arity": -2,
    "container": "PUBSUB",
    "function": "pubsubCommand",
    "command_flags": [
      "PUBSUB",
      "LOADING",
      "STALE"
    ],
    "arguments": [
      {
        "name": "channel",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "The number of subscribers per channel, each even element (including 0th) is channel name, each odd element is the number of subscribers.",
      "type": "array"
    }
  },
  "PUBSUB SHARDCHANNELS": {
    "summary": "Returns the active shard channels.",
    "complexity": "O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).",
    "group": "pubsub",
    "since": "7.0.0",
    "arity": -2,
    "container": "PUBSUB",
    "function": "pubsubCommand",
    "command_flags": [
      "PUBSUB",
      "LOADING",
      "STALE"
    ],
    "arguments": [
      {
        "name": "pattern",
        "type": "pattern",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "A list of active channels, optionally matching the specified pattern.",
      "type": "array",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    }
  },
  "PUBSUB SHARDNUMSUB": {
    "summary": "Returns the count of subscribers of shard channels.",
    "complexity": "O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels",
    "group": "pubsub",
    "since": "7.0.0",
    "arity": -2,
    "container": "PUBSUB",
    "function": "pubsubCommand",
    "command_flags": [
      "PUBSUB",
      "LOADING",
      "STALE"
    ],
    "arguments": [
      {
        "name": "shardchannel",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "The number of subscribers per shard channel, each even element (including 0th) is channel name, each odd element is the number of subscribers.",
      "type": "array"
    }
  },
  "PUBSUB": {
    "summary": "A container for Pub/Sub commands.",
    "complexity": "Depends on subcommand.",
    "group": "pubsub",
    "since": "2.8.0",
    "arity": -2
  },
  "PUNSUBSCRIBE": {
    "summary": "Stops listening to messages published to channels that match one or more patterns.",
    "complexity": "O(N) where N is the number of patterns to unsubscribe.",
    "group": "pubsub",
    "since": "2.0.0",
    "arity": -1,
    "function": "punsubscribeCommand",
    "command_flags": [
      "PUBSUB",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "arguments": [
      {
        "name": "pattern",
        "type": "pattern",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "QUIT": {
    "summary": "Closes the connection.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "1.0.0",
    "arity": -1,
    "function": "quitCommand",
    "deprecated_since": "7.2.0",
    "replaced_by": "just closing the connection",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ALLOW_BUSY",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "NO_AUTH"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "RANDOMKEY": {
    "summary": "Returns a random key name from the database.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "1.0.0",
    "arity": 1,
    "function": "randomkeyCommand",
    "command_flags": [
      "READONLY",
      "TOUCHES_ARBITRARY_KEYS"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:SPECIAL",
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "When the database is empty.",
          "type": "null"
        },
        {
          "description": "Random key in db.",
          "type": "string"
        }
      ]
    }
  },
  "READONLY": {
    "summary": "Enables read-only queries for a connection to a Valkey replica node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 1,
    "function": "readonlyCommand",
    "command_flags": [
      "FAST",
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "READWRITE": {
    "summary": "Enables read-write queries for a connection to a Valkey replica node.",
    "complexity": "O(1)",
    "group": "cluster",
    "since": "3.0.0",
    "arity": 1,
    "function": "readwriteCommand",
    "command_flags": [
      "FAST",
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "RENAME": {
    "summary": "Renames a key and overwrites the destination.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "1.0.0",
    "arity": 3,
    "function": "renameCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "newkey",
        "type": "key",
        "key_spec_index": 1
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "RENAMENX": {
    "summary": "Renames a key only when the target key name doesn't exist.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "1.0.0",
    "arity": 3,
    "function": "renamenxCommand",
    "history": [
      [
        "3.2.0",
        "The command no longer returns an error when source and destination names are the same."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "OW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "newkey",
        "type": "key",
        "key_spec_index": 1
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Key was renamed to newkey.",
          "const": 1
        },
        {
          "description": "New key already exists.",
          "const": 0
        }
      ]
    }
  },
  "REPLCONF": {
    "summary": "An internal command for configuring the replication stream.",
    "complexity": "O(1)",
    "group": "server",
    "since": "3.0.0",
    "arity": -1,
    "function": "replconfCommand",
    "doc_flags": [
      "SYSCMD"
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "ALLOW_BUSY"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "REPLICAOF": {
    "summary": "Configures a server as replica of another, or promotes it to a primary.",
    "complexity": "O(1)",
    "group": "server",
    "since": "5.0.0",
    "arity": 3,
    "function": "replicaofCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NOSCRIPT",
      "STALE"
    ],
    "arguments": [
      {
        "name": "args",
        "type": "oneof",
        "arguments": [
          {
            "name": "host-port",
            "type": "block",
            "arguments": [
              {
                "name": "host",
                "type": "string"
              },
              {
                "name": "port",
                "type": "integer"
              }
            ]
          },
          {
            "name": "no-one",
            "type": "block",
            "arguments": [
              {
                "name": "no",
                "type": "pure-token",
                "token": "NO"
              },
              {
                "name": "one",
                "type": "pure-token",
                "token": "ONE"
              }
            ]
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "ReplicaOf status.",
      "type": "string",
      "pattern": "OK*"
    }
  },
  "RESET": {
    "summary": "Resets the connection.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "6.2.0",
    "arity": 1,
    "function": "resetCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "NO_AUTH",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "RESET"
    }
  },
  "RESTORE-ASKING": {
    "summary": "An internal command for migrating keys in a cluster.",
    "complexity": "O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).",
    "group": "server",
    "since": "3.0.0",
    "arity": -4,
    "function": "restoreCommand",
    "history": [
      [
        "3.0.0",
        "Added the `REPLACE` modifier."
      ],
      [
        "5.0.0",
        "Added the `ABSTTL` modifier."
      ],
      [
        "5.0.0",
        "Added the `IDLETIME` and `FREQ` options."
      ]
    ],
    "doc_flags": [
      "SYSCMD"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "ASKING"
    ],
    "acl_categories": [
      "KEYSPACE",
      "DANGEROUS"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "ttl",
        "type": "integer"
      },
      {
        "name": "serialized-value",
        "type": "string"
      },
      {
        "name": "replace",
        "token": "REPLACE",
        "type": "pure-token",
        "optional": true,
        "since": "3.0.0"
      },
      {
        "name": "absttl",
        "token": "ABSTTL",
        "type": "pure-token",
        "optional": true,
        "since": "5.0.0"
      },
      {
        "token": "IDLETIME",
        "name": "seconds",
        "type": "integer",
        "optional": true,
        "since": "5.0.0"
      },
      {
        "token": "FREQ",
        "name": "frequency",
        "type": "integer",
        "optional": true,
        "since": "5.0.0"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "RESTORE": {
    "summary": "Creates a key from the serialized representation of a value.",
    "complexity": "O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).",
    "group": "generic",
    "since": "2.6.0",
    "arity": -4,
    "function": "restoreCommand",
    "history": [
      [
        "3.0.0",
        "Added the `REPLACE` modifier."
      ],
      [
        "5.0.0",
        "Added the `ABSTTL` modifier."
      ],
      [
        "5.0.0",
        "Added the `IDLETIME` and `FREQ` options."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "KEYSPACE",
      "DANGEROUS"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "ttl",
        "type": "integer"
      },
      {
        "name": "serialized-value",
        "type": "string"
      },
      {
        "name": "replace",
        "token": "REPLACE",
        "type": "pure-token",
        "optional": true,
        "since": "3.0.0"
      },
      {
        "name": "absttl",
        "token": "ABSTTL",
        "type": "pure-token",
        "optional": true,
        "since": "5.0.0"
      },
      {
        "token": "IDLETIME",
        "name": "seconds",
        "type": "integer",
        "optional": true,
        "since": "5.0.0"
      },
      {
        "token": "FREQ",
        "name": "frequency",
        "type": "integer",
        "optional": true,
        "since": "5.0.0"
      }
    ]
  },
  "ROLE": {
    "summary": "Returns the replication role.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.8.12",
    "arity": 1,
    "function": "roleCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "SENTINEL"
    ],
    "acl_categories": [
      "ADMIN",
      "DANGEROUS"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "array",
          "minItems": 3,
          "maxItems": 3,
          "items": [
            {
              "const": "master"
            },
            {
              "description": "Current replication primary offset.",
              "type": "integer"
            },
            {
              "description": "Connected replicas.",
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 3,
                "maxItems": 3,
                "items": [
                  {
                    "description": "Replica IP.",
                    "type": "string"
                  },
                  {
                    "description": "Replica port.",
                    "type": "string"
                  },
                  {
                    "description": "Last acknowledged replication offset.",
                    "type": "string"
                  }
                ]
              }
            }
          ]
        },
        {
          "type": "array",
          "minItems": 5,
          "maxItems": 5,
          "items": [
            {
              "const": "slave"
            },
            {
              "description": "IP of primary.",
              "type": "string"
            },
            {
              "description": "Port number of primary.",
              "type": "integer"
            },
            {
              "description": "State of the replication from the point of view of the primary.",
              "oneOf": [
                {
                  "description": "The instance is in handshake with its primary.",
                  "const": "handshake"
                },
                {
                  "description": "The instance in not active.",
                  "const": "none"
                },
                {
                  "description": "The instance needs to connect to its primary.",
                  "const": "connect"
                },
                {
                  "description": "The primary-replica connection is in progress.",
                  "const": "connecting"
                },
                {
                  "description": "The primary and replica are trying to perform the synchronization.",
                  "const": "sync"
                },
                {
                  "description": "The replica is online.",
                  "const": "connected"
                },
                {
                  "description": "Instance state is unknown.",
                  "const": "unknown"
                }
              ]
            },
            {
              "description": "The amount of data received from the replica so far in terms of primary replication offset.",
              "type": "integer"
            }
          ]
        },
        {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "const": "sentinel"
            },
            {
              "description": "List of primary names monitored by this sentinel instance.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ]
        }
      ]
    }
  },
  "RPOP": {
    "summary": "Returns and removes the last elements of a list. Deletes the list if the last element was popped.",
    "complexity": "O(N) where N is the number of elements returned",
    "group": "list",
    "since": "1.0.0",
    "arity": -2,
    "function": "rpopCommand",
    "history": [
      [
        "6.2.0",
        "Added the `count` argument."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "null",
          "description": "Key does not exist."
        },
        {
          "type": "string",
          "description": "When 'COUNT' was not given, the value of the last element."
        },
        {
          "type": "array",
          "description": "When 'COUNT' was given, list of popped elements.",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true,
        "since": "6.2.0"
      }
    ]
  },
  "RPOPLPUSH": {
    "summary": "Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.",
    "complexity": "O(1)",
    "group": "list",
    "since": "1.2.0",
    "arity": 3,
    "function": "rpoplpushCommand",
    "deprecated_since": "6.2.0",
    "replaced_by": "`LMOVE` with the `RIGHT` and `LEFT` arguments",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "string",
          "description": "The element being popped and pushed."
        },
        {
          "type": "null",
          "description": "Source list is empty."
        }
      ]
    },
    "arguments": [
      {
        "name": "source",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 1
      }
    ]
  },
  "RPUSH": {
    "summary": "Appends one or more elements to a list. Creates the key if it doesn't exist.",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "group": "list",
    "since": "1.0.0",
    "arity": -3,
    "function": "rpushCommand",
    "history": [
      [
        "2.4.0",
        "Accepts multiple `element` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Length of the list after the push operations.",
      "type": "integer",
      "minimum": 1
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "element",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "RPUSHX": {
    "summary": "Appends an element to a list only when the list exists.",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "group": "list",
    "since": "2.2.0",
    "arity": -3,
    "function": "rpushxCommand",
    "history": [
      [
        "4.0.0",
        "Accepts multiple `element` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "LIST"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Length of the list after the push operation.",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "element",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "SADD": {
    "summary": "Adds one or more members to a set. Creates the key if it doesn't exist.",
    "complexity": "O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.",
    "group": "set",
    "since": "1.0.0",
    "arity": -3,
    "function": "saddCommand",
    "history": [
      [
        "2.4.0",
        "Accepts multiple `member` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of elements that were added to the set, not including all the elements already present in the set.",
      "type": "integer"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "SAVE": {
    "summary": "Synchronously saves the database(s) to disk.",
    "complexity": "O(N) where N is the total number of keys in all databases",
    "group": "server",
    "since": "1.0.0",
    "arity": 1,
    "function": "saveCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NOSCRIPT",
      "NO_MULTI"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "SCAN": {
    "summary": "Iterates over the key names in the database.",
    "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
    "group": "generic",
    "since": "2.8.0",
    "arity": -2,
    "function": "scanCommand",
    "history": [
      [
        "6.0.0",
        "Added the `TYPE` subcommand."
      ]
    ],
    "command_flags": [
      "READONLY",
      "TOUCHES_ARBITRARY_KEYS"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT",
      "REQUEST_POLICY:SPECIAL",
      "RESPONSE_POLICY:SPECIAL"
    ],
    "arguments": [
      {
        "name": "cursor",
        "type": "integer"
      },
      {
        "token": "MATCH",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "token": "TYPE",
        "name": "type",
        "type": "string",
        "optional": true,
        "since": "6.0.0"
      }
    ],
    "reply_schema": {
      "description": "Cursor and scan response in array form.",
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "description": "Cursor.",
          "type": "string"
        },
        {
          "description": "List of keys.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    }
  },
  "SCARD": {
    "summary": "Returns the number of members in a set.",
    "complexity": "O(1)",
    "group": "set",
    "since": "1.0.0",
    "arity": 2,
    "function": "scardCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The cardinality (number of elements) of the set, or 0 if key does not exist.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "SCRIPT DEBUG": {
    "summary": "Sets the debug mode of server-side Lua scripts.",
    "complexity": "O(1)",
    "group": "scripting",
    "since": "3.2.0",
    "arity": 3,
    "container": "SCRIPT",
    "function": "scriptCommand",
    "command_flags": [
      "NOSCRIPT"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "arguments": [
      {
        "name": "mode",
        "type": "oneof",
        "arguments": [
          {
            "name": "yes",
            "type": "pure-token",
            "token": "YES"
          },
          {
            "name": "sync",
            "type": "pure-token",
            "token": "SYNC"
          },
          {
            "name": "no",
            "type": "pure-token",
            "token": "NO"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "SCRIPT EXISTS": {
    "summary": "Determines whether server-side Lua scripts exist in the script cache.",
    "complexity": "O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).",
    "group": "scripting",
    "since": "2.6.0",
    "arity": -3,
    "container": "SCRIPT",
    "function": "scriptCommand",
    "command_flags": [
      "NOSCRIPT"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:AGG_LOGICAL_AND"
    ],
    "arguments": [
      {
        "name": "sha1",
        "type": "string",
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "An array of integers that correspond to the specified SHA1 digest arguments.",
      "type": "array",
      "items": {
        "oneOf": [
          {
            "description": "Sha1 hash exists in script cache.",
            "const": 1
          },
          {
            "description": "Sha1 hash does not exist in script cache.",
            "const": 0
          }
        ]
      }
    }
  },
  "SCRIPT FLUSH": {
    "summary": "Removes all server-side Lua scripts from the script cache.",
    "complexity": "O(N) with N being the number of scripts in cache",
    "group": "scripting",
    "since": "2.6.0",
    "arity": -2,
    "container": "SCRIPT",
    "function": "scriptCommand",
    "history": [
      [
        "6.2.0",
        "Added the `ASYNC` and `SYNC` flushing mode modifiers."
      ]
    ],
    "command_flags": [
      "NOSCRIPT"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "arguments": [
      {
        "name": "flush-type",
        "type": "oneof",
        "optional": true,
        "since": "6.2.0",
        "arguments": [
          {
            "name": "async",
            "type": "pure-token",
            "token": "ASYNC"
          },
          {
            "name": "sync",
            "type": "pure-token",
            "token": "SYNC"
          }
        ]
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "SCRIPT HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "scripting",
    "since": "5.0.0",
    "arity": 2,
    "container": "SCRIPT",
    "function": "scriptCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "SCRIPT KILL": {
    "summary": "Terminates a server-side Lua script during execution.",
    "complexity": "O(1)",
    "group": "scripting",
    "since": "2.6.0",
    "arity": 2,
    "container": "SCRIPT",
    "function": "scriptCommand",
    "command_flags": [
      "NOSCRIPT",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:ONE_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "SCRIPT LOAD": {
    "summary": "Loads a server-side Lua script to the script cache.",
    "complexity": "O(N) with N being the length in bytes of the script body.",
    "group": "scripting",
    "since": "2.6.0",
    "arity": 3,
    "container": "SCRIPT",
    "function": "scriptCommand",
    "command_flags": [
      "NOSCRIPT",
      "STALE"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "arguments": [
      {
        "name": "script",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "The SHA1 digest of the script added into the script cache",
      "type": "string"
    }
  },
  "SCRIPT SHOW": {
    "summary": "Show server-side Lua script in the script cache.",
    "complexity": "O(1).",
    "group": "scripting",
    "since": "8.0.0",
    "arity": 3,
    "container": "SCRIPT",
    "function": "scriptCommand",
    "command_flags": [
      "NOSCRIPT"
    ],
    "acl_categories": [
      "SCRIPTING"
    ],
    "arguments": [
      {
        "name": "sha1",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "Lua script if sha1 hash exists in script cache.",
      "type": "string"
    }
  },
  "SCRIPT": {
    "summary": "A container for Lua scripts management commands.",
    "complexity": "Depends on subcommand.",
    "group": "scripting",
    "since": "2.6.0",
    "arity": -2
  },
  "SDIFF": {
    "summary": "Returns the difference of multiple sets.",
    "complexity": "O(N) where N is the total number of elements in all given sets.",
    "group": "set",
    "since": "1.0.0",
    "arity": -2,
    "function": "sdiffCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "List with the members of the resulting set.",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ]
  },
  "SDIFFSTORE": {
    "summary": "Stores the difference of multiple sets in a key.",
    "complexity": "O(N) where N is the total number of elements in all given sets.",
    "group": "set",
    "since": "1.0.0",
    "arity": -3,
    "function": "sdiffstoreCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of the elements in the resulting set.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 1,
        "multiple": true
      }
    ]
  },
  "SELECT": {
    "summary": "Changes the selected database.",
    "complexity": "O(1)",
    "group": "connection",
    "since": "1.0.0",
    "arity": 2,
    "function": "selectCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "FAST"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "index",
        "type": "integer"
      }
    ]
  },
  "SENTINEL CKQUORUM": {
    "summary": "Checks for a Sentinel quorum.",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "string",
      "description": "Returns OK if the current Sentinel configuration is able to reach the quorum needed to failover a primary, and the majority needed to authorize the failover.",
      "pattern": "OK"
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL CONFIG": {
    "summary": "Configures Sentinel.",
    "complexity": "O(N) when N is the number of configuration parameters provided",
    "group": "sentinel",
    "since": "6.2.0",
    "arity": -4,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "history": [
      [
        "7.2.0",
        "Added the ability to set and get multiple parameters in one call."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "object",
          "description": "When 'SENTINEL-CONFIG GET' is called, returns a map.",
          "properties": {
            "resolve-hostnames": {
              "oneOf": [
                {
                  "const": "yes"
                },
                {
                  "const": "no"
                }
              ]
            },
            "announce-hostnames": {
              "oneOf": [
                {
                  "const": "yes"
                },
                {
                  "const": "no"
                }
              ]
            },
            "announce-ip": {
              "type": "string"
            },
            "announce-port": {
              "type": "string"
            },
            "sentinel-user": {
              "type": "string"
            },
            "sentinel-pass": {
              "type": "string"
            },
            "loglevel": {
              "oneOf": [
                {
                  "const": "debug"
                },
                {
                  "const": "verbose"
                },
                {
                  "const": "notice"
                },
                {
                  "const": "warning"
                },
                {
                  "const": "nothing"
                },
                {
                  "const": "unknown"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "const": "OK",
          "description": "When 'SENTINEL-CONFIG SET' is called, returns OK on success."
        }
      ]
    },
    "arguments": [
      {
        "name": "action",
        "type": "oneof",
        "arguments": [
          {
            "name": "set",
            "token": "SET",
            "type": "block",
            "multiple": true,
            "arguments": [
              {
                "name": "parameter",
                "type": "string"
              },
              {
                "name": "value",
                "type": "string"
              }
            ]
          },
          {
            "token": "GET",
            "name": "parameter",
            "type": "string",
            "multiple": true
          }
        ]
      }
    ]
  },
  "SENTINEL DEBUG": {
    "summary": "Lists or updates the current configurable parameters of Sentinel.",
    "complexity": "O(N) where N is the number of configurable parameters",
    "group": "sentinel",
    "since": "7.0.0",
    "arity": -2,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The configuration update was successful.",
          "const": "OK"
        },
        {
          "description": "List of configurable time parameters and their values (milliseconds).",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "data",
        "type": "block",
        "optional": true,
        "multiple": true,
        "arguments": [
          {
            "name": "parameter",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ]
  },
  "SENTINEL FAILOVER": {
    "summary": "Forces a Sentinel failover.",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "const": "OK",
      "description": "Force a fail over as if the primary was not reachable, and without asking for agreement to other Sentinels."
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL FLUSHCONFIG": {
    "summary": "Rewrites the Sentinel configuration file.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 2,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "const": "OK",
      "description": "Force Sentinel to rewrite its configuration on disk, including the current Sentinel state."
    }
  },
  "SENTINEL GET-MASTER-ADDR-BY-NAME": {
    "summary": "Returns the port and address of a primary instance.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "deprecated_since": "8.0.0",
    "replaced_by": "`SENTINEL GET-PRIMARY-ADDR-BY-NAME`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "type": "string",
          "description": "IP addr or hostname."
        },
        {
          "type": "string",
          "description": "Port.",
          "pattern": "[0-9]+"
        }
      ]
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL GET-PRIMARY-ADDR-BY-NAME": {
    "summary": "Returns the port and address of a primary instance.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "8.0.0",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "type": "string",
          "description": "IP addr or hostname."
        },
        {
          "type": "string",
          "description": "Port.",
          "pattern": "[0-9]+"
        }
      ]
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "6.2.0",
    "arity": 2,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "SENTINEL INFO-CACHE": {
    "summary": "Returns the cached `INFO` replies from the deployment's instances.",
    "complexity": "O(N) where N is the number of instances",
    "group": "sentinel",
    "since": "3.2.0",
    "arity": -3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "This is actually a map, the odd entries are a primary name, and the even entries are the last cached INFO output from that primary and all its replicas.",
      "minItems": 0,
      "maxItems": 4294967295,
      "items": [
        {
          "oneOf": [
            {
              "type": "string",
              "description": "The primary name."
            },
            {
              "type": "array",
              "description": "This is an array of pairs, the odd entries are the INFO age, and the even entries are the cached INFO string. The first pair belong to the primary and the rest are its replicas.",
              "minItems": 2,
              "maxItems": 2,
              "items": [
                {
                  "description": "The number of milliseconds since when the INFO was cached.",
                  "type": "integer"
                },
                {
                  "description": "The cached INFO string or null.",
                  "oneOf": [
                    {
                      "description": "The cached INFO string.",
                      "type": "string"
                    },
                    {
                      "description": "No cached INFO string.",
                      "type": "null"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "nodename",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "SENTINEL IS-MASTER-DOWN-BY-ADDR": {
    "summary": "Determines whether a primary instance is down.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 6,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "deprecated_since": "8.0.0",
    "replaced_by": "`SENTINEL IS-PRIMARY-DOWN-BY-ADDR`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "minItems": 3,
      "maxItems": 3,
      "items": [
        {
          "oneOf": [
            {
              "const": 0,
              "description": "Primary is up."
            },
            {
              "const": 1,
              "description": "Primary is down."
            }
          ]
        },
        {
          "type": "string",
          "description": "Sentinel address."
        },
        {
          "type": "integer",
          "description": "Port."
        }
      ]
    },
    "arguments": [
      {
        "name": "ip",
        "type": "string"
      },
      {
        "name": "port",
        "type": "integer"
      },
      {
        "name": "current-epoch",
        "type": "integer"
      },
      {
        "name": "runid",
        "type": "string"
      }
    ]
  },
  "SENTINEL IS-PRIMARY-DOWN-BY-ADDR": {
    "summary": "Determines whether a primary instance is down.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "8.0.0",
    "arity": 6,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "minItems": 3,
      "maxItems": 3,
      "items": [
        {
          "oneOf": [
            {
              "const": 0,
              "description": "Primary is up."
            },
            {
              "const": 1,
              "description": "Primary is down."
            }
          ]
        },
        {
          "type": "string",
          "description": "Sentinel address."
        },
        {
          "type": "integer",
          "description": "Port."
        }
      ]
    },
    "arguments": [
      {
        "name": "ip",
        "type": "string"
      },
      {
        "name": "port",
        "type": "integer"
      },
      {
        "name": "current-epoch",
        "type": "integer"
      },
      {
        "name": "runid",
        "type": "string"
      }
    ]
  },
  "SENTINEL MASTER": {
    "summary": "Returns the state of a primary instance.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "deprecated_since": "8.0.0",
    "replaced_by": "`SENTINEL PRIMARY`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "object",
      "description": "The state and info of the specified primary.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL MASTERS": {
    "summary": "Returns a list of monitored primaries.",
    "complexity": "O(N) where N is the number of primaries",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 2,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "deprecated_since": "8.0.0",
    "replaced_by": "`SENTINEL PRIMARIES`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of monitored primaries, and their states.",
      "items": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    }
  },
  "SENTINEL MONITOR": {
    "summary": "Starts monitoring.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 6,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "name",
        "type": "string"
      },
      {
        "name": "ip",
        "type": "string"
      },
      {
        "name": "port",
        "type": "integer"
      },
      {
        "name": "quorum",
        "type": "integer"
      }
    ]
  },
  "SENTINEL MYID": {
    "summary": "Returns the Sentinel instance ID.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "6.2.0",
    "arity": 2,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "description": "Node ID of the sentinel instance.",
      "type": "string"
    }
  },
  "SENTINEL PENDING-SCRIPTS": {
    "summary": "Returns information about pending scripts for Sentinel.",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 2,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of pending scripts.",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "argv": {
            "type": "array",
            "description": "Script arguments.",
            "items": {
              "type": "string"
            }
          },
          "flags": {
            "type": "string",
            "description": "Script flags."
          },
          "pid": {
            "type": "string",
            "description": "Script pid."
          },
          "run-time": {
            "type": "string",
            "description": "Script run-time."
          },
          "run-delay": {
            "type": "string",
            "description": "Script run-delay."
          },
          "retry-num": {
            "type": "string",
            "description": "Number of times we tried to execute the script."
          }
        }
      }
    }
  },
  "SENTINEL PRIMARIES": {
    "summary": "Returns a list of monitored primaries.",
    "complexity": "O(N) where N is the number of primaries",
    "group": "sentinel",
    "since": "8.0.0",
    "arity": 2,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of monitored primaries, and their states.",
      "items": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    }
  },
  "SENTINEL PRIMARY": {
    "summary": "Returns the state of a primary instance.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "8.0.0",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "object",
      "description": "The state and info of the specified primary.",
      "additionalProperties": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL REMOVE": {
    "summary": "Stops monitoring.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL REPLICAS": {
    "summary": "Returns a list of the monitored replicas.",
    "complexity": "O(N) where N is the number of replicas",
    "group": "sentinel",
    "since": "5.0.0",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of replicas for this primary, and their state.",
      "items": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL RESET": {
    "summary": "Resets primaries by name matching a pattern.",
    "complexity": "O(N) where N is the number of monitored primaries",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The number of primaries that were reset."
    },
    "arguments": [
      {
        "name": "pattern",
        "type": "pattern"
      }
    ]
  },
  "SENTINEL SENTINELS": {
    "summary": "Returns a list of Sentinel instances.",
    "complexity": "O(N) where N is the number of Sentinels",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of sentinel instances, and their state.",
      "items": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL SET": {
    "summary": "Changes the configuration of a monitored primary.",
    "complexity": "O(1)",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": -5,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      },
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "option",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ]
  },
  "SENTINEL SIMULATE-FAILURE": {
    "summary": "Simulates failover scenarios.",
    "group": "sentinel",
    "since": "3.2.0",
    "arity": -3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The simulated flag was set.",
          "const": "OK"
        },
        {
          "description": "Supported simulates flags. Returned in case `HELP` was used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "mode",
        "type": "oneof",
        "optional": true,
        "multiple": true,
        "arguments": [
          {
            "name": "crash-after-election",
            "type": "pure-token"
          },
          {
            "name": "crash-after-promotion",
            "type": "pure-token"
          },
          {
            "name": "help",
            "type": "pure-token"
          }
        ]
      }
    ]
  },
  "SENTINEL SLAVES": {
    "summary": "Returns a list of the monitored replicas.",
    "complexity": "O(N) where N is the number of replicas.",
    "group": "sentinel",
    "since": "2.8.0",
    "arity": 3,
    "container": "SENTINEL",
    "function": "sentinelCommand",
    "deprecated_since": "5.0.0",
    "replaced_by": "`SENTINEL REPLICAS`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of monitored replicas, and their state.",
      "items": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      }
    },
    "arguments": [
      {
        "name": "primary-name",
        "type": "string"
      }
    ]
  },
  "SENTINEL": {
    "summary": "A container for Sentinel commands.",
    "complexity": "Depends on subcommand.",
    "group": "sentinel",
    "since": "2.8.4",
    "arity": -2,
    "command_flags": [
      "ADMIN",
      "SENTINEL",
      "ONLY_SENTINEL"
    ]
  },
  "SET": {
    "summary": "Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "1.0.0",
    "arity": -3,
    "function": "setCommand",
    "get_keys_function": "setGetKeys",
    "history": [
      [
        "2.6.12",
        "Added the `EX`, `PX`, `NX` and `XX` options."
      ],
      [
        "6.0.0",
        "Added the `KEEPTTL` option."
      ],
      [
        "6.2.0",
        "Added the `GET`, `EXAT` and `PXAT` option."
      ],
      [
        "7.0.0",
        "Allowed the `NX` and `GET` options to be used together."
      ],
      [
        "8.1.0",
        "Added the `IFEQ` option."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "notes": "RW and ACCESS due to the optional `GET` argument",
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE",
          "VARIABLE_FLAGS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "`GET` not given: Operation was aborted (conflict with one of the `XX`/`NX` options).",
          "type": "null"
        },
        {
          "description": "`GET` not given: The key was set.",
          "const": "OK"
        },
        {
          "description": "`GET` given: The key didn't exist before the `SET`",
          "type": "null"
        },
        {
          "description": "`GET` given: The previous value of the key",
          "type": "string"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "value",
        "type": "string"
      },
      {
        "name": "condition",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "nx",
            "type": "pure-token",
            "token": "NX",
            "since": "2.6.12"
          },
          {
            "name": "xx",
            "type": "pure-token",
            "token": "XX",
            "since": "2.6.12"
          },
          {
            "name": "comparison-value",
            "type": "string",
            "token": "IFEQ",
            "since": "8.1.0",
            "summary": "Sets the key's value only if the current value matches the specified comparison value."
          }
        ]
      },
      {
        "name": "get",
        "token": "GET",
        "type": "pure-token",
        "optional": true,
        "since": "6.2.0"
      },
      {
        "name": "expiration",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "seconds",
            "type": "integer",
            "token": "EX",
            "since": "2.6.12"
          },
          {
            "name": "milliseconds",
            "type": "integer",
            "token": "PX",
            "since": "2.6.12"
          },
          {
            "name": "unix-time-seconds",
            "type": "unix-time",
            "token": "EXAT",
            "since": "6.2.0"
          },
          {
            "name": "unix-time-milliseconds",
            "type": "unix-time",
            "token": "PXAT",
            "since": "6.2.0"
          },
          {
            "name": "keepttl",
            "type": "pure-token",
            "token": "KEEPTTL",
            "since": "6.0.0"
          }
        ]
      }
    ]
  },
  "SETBIT": {
    "summary": "Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.",
    "complexity": "O(1)",
    "group": "bitmap",
    "since": "2.2.0",
    "arity": 4,
    "function": "setbitCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "BITMAP"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The original bit value stored at offset.",
      "oneOf": [
        {
          "const": 0
        },
        {
          "const": 1
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "offset",
        "type": "integer"
      },
      {
        "name": "value",
        "type": "integer"
      }
    ]
  },
  "SETEX": {
    "summary": "Sets the string value and expiration time of a key. Creates the key if it doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "2.0.0",
    "arity": 4,
    "function": "setexCommand",
    "deprecated_since": "2.6.12",
    "replaced_by": "`SET` with the `EX` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "seconds",
        "type": "integer"
      },
      {
        "name": "value",
        "type": "string"
      }
    ]
  },
  "SETNX": {
    "summary": "Set the string value of a key only when the key doesn't exist.",
    "complexity": "O(1)",
    "group": "string",
    "since": "1.0.0",
    "arity": 3,
    "function": "setnxCommand",
    "deprecated_since": "2.6.12",
    "replaced_by": "`SET` with the `NX` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The key was set.",
          "const": 0
        },
        {
          "description": "The key was not set.",
          "const": 1
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "value",
        "type": "string"
      }
    ]
  },
  "SETRANGE": {
    "summary": "Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.",
    "complexity": "O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.",
    "group": "string",
    "since": "2.2.0",
    "arity": 4,
    "function": "setrangeCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Length of the string after it was modified by the command.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "offset",
        "type": "integer"
      },
      {
        "name": "value",
        "type": "string"
      }
    ]
  },
  "SHUTDOWN": {
    "summary": "Synchronously saves the database(s) to disk and shuts down the server.",
    "complexity": "O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)",
    "group": "server",
    "since": "1.0.0",
    "arity": -1,
    "function": "shutdownCommand",
    "history": [
      [
        "7.0.0",
        "Added the `NOW`, `FORCE` and `ABORT` modifiers."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "NO_MULTI",
      "SENTINEL",
      "ALLOW_BUSY"
    ],
    "arguments": [
      {
        "name": "abort-selector",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "save-selector-block",
            "type": "block",
            "arguments": [
              {
                "name": "save-selector",
                "type": "oneof",
                "optional": true,
                "arguments": [
                  {
                    "name": "nosave",
                    "type": "pure-token",
                    "token": "NOSAVE"
                  },
                  {
                    "name": "save",
                    "type": "pure-token",
                    "token": "SAVE"
                  }
                ]
              },
              {
                "name": "now",
                "type": "pure-token",
                "token": "NOW",
                "optional": true,
                "since": "7.0.0"
              },
              {
                "name": "force",
                "type": "pure-token",
                "token": "FORCE",
                "optional": true,
                "since": "7.0.0"
              }
            ]
          },
          {
            "name": "abort",
            "type": "pure-token",
            "token": "ABORT",
            "since": "7.0.0"
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "OK if ABORT was specified and shutdown was aborted. On successful shutdown, nothing is returned since the server quits and the connection is closed. On failure, an error is returned.",
      "const": "OK"
    }
  },
  "SINTER": {
    "summary": "Returns the intersect of multiple sets.",
    "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
    "group": "set",
    "since": "1.0.0",
    "arity": -2,
    "function": "sinterCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "List with the members of the resulting set.",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ]
  },
  "SINTERCARD": {
    "summary": "Returns the number of members of the intersect of multiple sets.",
    "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
    "group": "set",
    "since": "7.0.0",
    "arity": -3,
    "function": "sinterCardCommand",
    "get_keys_function": "sintercardGetKeys",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of the elements in the resulting intersection.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "SINTERSTORE": {
    "summary": "Stores the intersect of multiple sets in a key.",
    "complexity": "O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.",
    "group": "set",
    "since": "1.0.0",
    "arity": -3,
    "function": "sinterstoreCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of the elements in the result set.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 1,
        "multiple": true
      }
    ]
  },
  "SISMEMBER": {
    "summary": "Determines whether a member belongs to a set.",
    "complexity": "O(1)",
    "group": "set",
    "since": "1.0.0",
    "arity": 3,
    "function": "sismemberCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": 0,
          "description": "The element is not a member of the set, or the key does not exist."
        },
        {
          "const": 1,
          "description": "The element is a member of the set."
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string"
      }
    ]
  },
  "SLAVEOF": {
    "summary": "Sets a server as a replica of another, or promotes it to being a primary.",
    "complexity": "O(1)",
    "group": "server",
    "since": "1.0.0",
    "arity": 3,
    "function": "replicaofCommand",
    "deprecated_since": "5.0.0",
    "replaced_by": "`REPLICAOF`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NOSCRIPT",
      "STALE"
    ],
    "arguments": [
      {
        "name": "args",
        "type": "oneof",
        "arguments": [
          {
            "name": "host-port",
            "type": "block",
            "arguments": [
              {
                "name": "host",
                "type": "string"
              },
              {
                "name": "port",
                "type": "integer"
              }
            ]
          },
          {
            "name": "no-one",
            "type": "block",
            "arguments": [
              {
                "name": "no",
                "type": "pure-token",
                "token": "NO"
              },
              {
                "name": "one",
                "type": "pure-token",
                "token": "ONE"
              }
            ]
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "SlaveOf status.",
      "type": "string",
      "pattern": "OK*"
    }
  },
  "SLOWLOG GET": {
    "summary": "Returns the slow log's entries.",
    "complexity": "O(N) where N is the number of entries returned",
    "group": "server",
    "since": "2.2.12",
    "arity": -2,
    "container": "SLOWLOG",
    "function": "slowlogCommand",
    "deprecated_since": "8.1.0",
    "replaced_by": "`COMMANDLOG GET <count> SLOW`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "history": [
      [
        "4.0.0",
        "Added client IP address, port and name to the reply."
      ]
    ],
    "command_flags": [
      "ADMIN",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Entries from the slow log in chronological order.",
      "uniqueItems": true,
      "items": {
        "type": "array",
        "minItems": 6,
        "maxItems": 6,
        "items": [
          {
            "type": "integer",
            "description": "Slow log entry ID."
          },
          {
            "type": "integer",
            "description": "The unix timestamp at which the logged command was processed.",
            "minimum": 0
          },
          {
            "type": "integer",
            "description": "The amount of time needed for its execution, in microseconds.",
            "minimum": 0
          },
          {
            "type": "array",
            "description": "The arguments of the command.",
            "items": {
              "type": "string"
            }
          },
          {
            "type": "string",
            "description": "Client IP address and port."
          },
          {
            "type": "string",
            "description": "Client name if set via the CLIENT SETNAME command."
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "SLOWLOG HELP": {
    "summary": "Show helpful text about the different subcommands",
    "complexity": "O(1)",
    "group": "server",
    "since": "6.2.0",
    "arity": 2,
    "container": "SLOWLOG",
    "function": "slowlogCommand",
    "deprecated_since": "8.1.0",
    "replaced_by": "`COMMANDLOG HELP`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "SLOWLOG LEN": {
    "summary": "Returns the number of entries in the slow log.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.2.12",
    "arity": 2,
    "container": "SLOWLOG",
    "function": "slowlogCommand",
    "deprecated_since": "8.1.0",
    "replaced_by": "`COMMANDLOG LEN SLOW`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ADMIN",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:AGG_SUM",
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of entries in the slow log.",
      "minimum": 0
    }
  },
  "SLOWLOG RESET": {
    "summary": "Clears all entries from the slow log.",
    "complexity": "O(N) where N is the number of entries in the slowlog",
    "group": "server",
    "since": "2.2.12",
    "arity": 2,
    "container": "SLOWLOG",
    "function": "slowlogCommand",
    "deprecated_since": "8.1.0",
    "replaced_by": "`COMMANDLOG RESET SLOW`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "ADMIN",
      "LOADING",
      "STALE"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_NODES",
      "RESPONSE_POLICY:ALL_SUCCEEDED"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "SLOWLOG": {
    "summary": "A container for slow log commands.",
    "complexity": "Depends on subcommand.",
    "group": "server",
    "since": "2.2.12",
    "arity": -2,
    "deprecated_since": "8.1.0",
    "replaced_by": "`COMMANDLOG`",
    "doc_flags": [
      "DEPRECATED"
    ]
  },
  "SMEMBERS": {
    "summary": "Returns all members of a set.",
    "complexity": "O(N) where N is the set cardinality.",
    "group": "set",
    "since": "1.0.0",
    "arity": 2,
    "function": "sinterCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "All elements of the set.",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "SMISMEMBER": {
    "summary": "Determines whether multiple members belong to a set.",
    "complexity": "O(N) where N is the number of elements being checked for membership",
    "group": "set",
    "since": "6.2.0",
    "arity": -3,
    "function": "smismemberCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "List representing the membership of the given elements, in the same order as they are requested.",
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "const": 0,
            "description": "Not a member of the set or the key does not exist."
          },
          {
            "const": 1,
            "description": "A member of the set."
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "SMOVE": {
    "summary": "Moves a member from one set to another.",
    "complexity": "O(1)",
    "group": "set",
    "since": "1.0.0",
    "arity": 4,
    "function": "smoveCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "const": 1,
          "description": "Element is moved."
        },
        {
          "const": 0,
          "description": "The element is not a member of source and no operation was performed."
        }
      ]
    },
    "arguments": [
      {
        "name": "source",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 1
      },
      {
        "name": "member",
        "type": "string"
      }
    ]
  },
  "SORT_RO": {
    "summary": "Returns the sorted elements of a list, a set, or a sorted set.",
    "complexity": "O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).",
    "group": "generic",
    "since": "7.0.0",
    "arity": -2,
    "function": "sortroCommand",
    "get_keys_function": "sortROGetKeys",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SET",
      "SORTEDSET",
      "LIST",
      "DANGEROUS"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "notes": "For the optional BY/GET keyword. It is marked 'unknown' because the key names derive from the content of the key we sort",
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "unknown": null
        },
        "find_keys": {
          "unknown": null
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "token": "BY",
        "name": "by-pattern",
        "display": "pattern",
        "type": "pattern",
        "key_spec_index": 1,
        "optional": true
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "offset",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      },
      {
        "token": "GET",
        "name": "get-pattern",
        "display": "pattern",
        "key_spec_index": 1,
        "type": "pattern",
        "optional": true,
        "multiple": true,
        "multiple_token": true
      },
      {
        "name": "order",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "asc",
            "type": "pure-token",
            "token": "ASC"
          },
          {
            "name": "desc",
            "type": "pure-token",
            "token": "DESC"
          }
        ]
      },
      {
        "name": "sorting",
        "token": "ALPHA",
        "type": "pure-token",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "A list of sorted elements.",
      "type": "array",
      "items": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "description": "GET option is specified, but no object was found.",
            "type": "null"
          }
        ]
      }
    }
  },
  "SORT": {
    "summary": "Sorts the elements in a list, a set, or a sorted set, optionally storing the result.",
    "complexity": "O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).",
    "group": "generic",
    "since": "1.0.0",
    "arity": -2,
    "function": "sortCommand",
    "get_keys_function": "sortGetKeys",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SET",
      "SORTEDSET",
      "LIST",
      "DANGEROUS"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "notes": "For the optional BY/GET keyword. It is marked 'unknown' because the key names derive from the content of the key we sort",
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "unknown": null
        },
        "find_keys": {
          "unknown": null
        }
      },
      {
        "notes": "For the optional STORE keyword. It is marked 'unknown' because the keyword can appear anywhere in the argument array",
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "unknown": null
        },
        "find_keys": {
          "unknown": null
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "token": "BY",
        "name": "by-pattern",
        "display": "pattern",
        "type": "pattern",
        "key_spec_index": 1,
        "optional": true
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "offset",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      },
      {
        "token": "GET",
        "name": "get-pattern",
        "display": "pattern",
        "key_spec_index": 1,
        "type": "pattern",
        "optional": true,
        "multiple": true,
        "multiple_token": true
      },
      {
        "name": "order",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "asc",
            "type": "pure-token",
            "token": "ASC"
          },
          {
            "name": "desc",
            "type": "pure-token",
            "token": "DESC"
          }
        ]
      },
      {
        "name": "sorting",
        "token": "ALPHA",
        "type": "pure-token",
        "optional": true
      },
      {
        "token": "STORE",
        "name": "destination",
        "type": "key",
        "key_spec_index": 2,
        "optional": true
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "When the store option is specified the command returns the number of sorted elements in the destination list.",
          "type": "integer",
          "minimum": 0
        },
        {
          "description": "When not passing the store option the command returns a list of sorted elements.",
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "description": "GET option is specified, but no object was found.",
                "type": "null"
              }
            ]
          }
        }
      ]
    }
  },
  "SPOP": {
    "summary": "Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.",
    "complexity": "Without the count argument O(1), otherwise O(N) where N is the value of the passed count.",
    "group": "set",
    "since": "1.0.0",
    "arity": -2,
    "function": "spopCommand",
    "history": [
      [
        "3.2.0",
        "Added the `count` argument."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "SET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "null",
          "description": "The key does not exist."
        },
        {
          "type": "string",
          "description": "The removed member when 'COUNT' is not given."
        },
        {
          "type": "array",
          "description": "List to the removed members when 'COUNT' is given.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true,
        "since": "3.2.0"
      }
    ]
  },
  "SPUBLISH": {
    "summary": "Post a message to a shard channel",
    "complexity": "O(N) where N is the number of clients subscribed to the receiving shard channel.",
    "group": "pubsub",
    "since": "7.0.0",
    "arity": 3,
    "function": "spublishCommand",
    "command_flags": [
      "PUBSUB",
      "LOADING",
      "STALE",
      "FAST",
      "MAY_REPLICATE"
    ],
    "arguments": [
      {
        "name": "shardchannel",
        "type": "string"
      },
      {
        "name": "message",
        "type": "string"
      }
    ],
    "key_specs": [
      {
        "flags": [
          "NOT_KEY"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The number of clients that received the message. Note that in a Cluster, only clients that are connected to the same node as the publishing client are included in the count.",
      "type": "integer",
      "minimum": 0
    }
  },
  "SRANDMEMBER": {
    "summary": "Get one or multiple random members from a set",
    "complexity": "Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.",
    "group": "set",
    "since": "1.0.0",
    "arity": -2,
    "function": "srandmemberCommand",
    "history": [
      [
        "2.6.0",
        "Added the optional `count` argument."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true,
        "since": "2.6.0"
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "In case `count` is not given and key doesn't exist",
          "type": "null"
        },
        {
          "description": "In case `count` is not given, randomly selected element",
          "type": "string"
        },
        {
          "description": "In case `count` is given, an array of elements",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        {
          "description": "In case `count` is given and key doesn't exist",
          "type": "array",
          "maxItems": 0
        }
      ]
    }
  },
  "SREM": {
    "summary": "Removes one or more members from a set. Deletes the set if the last member was removed.",
    "complexity": "O(N) where N is the number of members to be removed.",
    "group": "set",
    "since": "1.0.0",
    "arity": -3,
    "function": "sremCommand",
    "history": [
      [
        "2.4.0",
        "Accepts multiple `member` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of members that were removed from the set, not including non existing members.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "SSCAN": {
    "summary": "Iterates over members of a set.",
    "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
    "group": "set",
    "since": "2.8.0",
    "arity": -3,
    "function": "sscanCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "cursor",
        "type": "integer"
      },
      {
        "token": "MATCH",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "Cursor and scan response in array form.",
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "description": "Cursor.",
          "type": "string"
        },
        {
          "description": "List of set members.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    }
  },
  "SSUBSCRIBE": {
    "summary": "Listens for messages published to shard channels.",
    "complexity": "O(N) where N is the number of shard channels to subscribe to.",
    "group": "pubsub",
    "since": "7.0.0",
    "arity": -2,
    "function": "ssubscribeCommand",
    "command_flags": [
      "PUBSUB",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "arguments": [
      {
        "name": "shardchannel",
        "type": "string",
        "multiple": true
      }
    ],
    "key_specs": [
      {
        "flags": [
          "NOT_KEY"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ]
  },
  "STRLEN": {
    "summary": "Returns the length of a string value.",
    "complexity": "O(1)",
    "group": "string",
    "since": "2.2.0",
    "arity": 2,
    "function": "strlenCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The length of the string value stored at key, or 0 when key does not exist.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "SUBSCRIBE": {
    "summary": "Listens for messages published to channels.",
    "complexity": "O(N) where N is the number of channels to subscribe to.",
    "group": "pubsub",
    "since": "2.0.0",
    "arity": -2,
    "function": "subscribeCommand",
    "command_flags": [
      "PUBSUB",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "arguments": [
      {
        "name": "channel",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "SUBSTR": {
    "summary": "Returns a substring from a string value.",
    "complexity": "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.",
    "group": "string",
    "since": "1.0.0",
    "arity": 4,
    "function": "getrangeCommand",
    "deprecated_since": "2.0.0",
    "replaced_by": "`GETRANGE`",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STRING"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "string",
      "description": "The substring of the string value stored at key, determined by the offsets start and end (both are inclusive)."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "end",
        "type": "integer"
      }
    ]
  },
  "SUNION": {
    "summary": "Returns the union of multiple sets.",
    "complexity": "O(N) where N is the total number of elements in all given sets.",
    "group": "set",
    "since": "1.0.0",
    "arity": -2,
    "function": "sunionCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT_ORDER"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "List with the members of the resulting set.",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ]
  },
  "SUNIONSTORE": {
    "summary": "Stores the union of multiple sets in a key.",
    "complexity": "O(N) where N is the total number of elements in all given sets.",
    "group": "set",
    "since": "1.0.0",
    "arity": -3,
    "function": "sunionstoreCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SET"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of the elements in the resulting set.",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 1,
        "multiple": true
      }
    ]
  },
  "SUNSUBSCRIBE": {
    "summary": "Stops listening to messages posted to shard channels.",
    "complexity": "O(N) where N is the number of shard channels to unsubscribe.",
    "group": "pubsub",
    "since": "7.0.0",
    "arity": -1,
    "function": "sunsubscribeCommand",
    "command_flags": [
      "PUBSUB",
      "NOSCRIPT",
      "LOADING",
      "STALE"
    ],
    "arguments": [
      {
        "name": "shardchannel",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ],
    "key_specs": [
      {
        "flags": [
          "NOT_KEY"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ]
  },
  "SWAPDB": {
    "summary": "Swaps two databases.",
    "complexity": "O(N) where N is the count of clients watching or blocking on keys from both databases.",
    "group": "server",
    "since": "4.0.0",
    "arity": 3,
    "function": "swapdbCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE",
      "DANGEROUS"
    ],
    "arguments": [
      {
        "name": "index1",
        "type": "integer"
      },
      {
        "name": "index2",
        "type": "integer"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "SYNC": {
    "summary": "An internal command used in replication.",
    "group": "server",
    "since": "1.0.0",
    "arity": 1,
    "function": "syncCommand",
    "command_flags": [
      "NO_ASYNC_LOADING",
      "ADMIN",
      "NO_MULTI",
      "NOSCRIPT"
    ]
  },
  "TIME": {
    "summary": "Returns the server time.",
    "complexity": "O(1)",
    "group": "server",
    "since": "2.6.0",
    "arity": 1,
    "function": "timeCommand",
    "command_flags": [
      "LOADING",
      "STALE",
      "FAST"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Array containing two elements: Unix time in seconds and microseconds.",
      "minItems": 2,
      "maxItems": 2,
      "items": {
        "type": "string",
        "pattern": "[0-9]+"
      }
    }
  },
  "TOUCH": {
    "summary": "Returns the number of existing keys out of those specified after updating the time they were last accessed.",
    "complexity": "O(N) where N is the number of keys that will be touched.",
    "group": "generic",
    "since": "3.2.1",
    "arity": -2,
    "function": "touchCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "REQUEST_POLICY:MULTI_SHARD",
      "RESPONSE_POLICY:AGG_SUM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "The number of touched keys.",
      "type": "integer",
      "minimum": 0
    }
  },
  "TTL": {
    "summary": "Returns the expiration time in seconds of a key.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "1.0.0",
    "arity": 2,
    "function": "ttlCommand",
    "history": [
      [
        "2.8.0",
        "Added the -2 reply."
      ]
    ],
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "TTL in seconds.",
          "type": "integer",
          "minimum": 0
        },
        {
          "description": "The key exists but has no associated expire.",
          "const": -1
        },
        {
          "description": "The key does not exist.",
          "const": -2
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "TYPE": {
    "summary": "Determines the type of value stored at a key.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "1.0.0",
    "arity": 2,
    "function": "typeCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Key doesn't exist",
          "type": "null"
        },
        {
          "description": "Type of the key",
          "type": "string"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "UNLINK": {
    "summary": "Asynchronously deletes one or more keys.",
    "complexity": "O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.",
    "group": "generic",
    "since": "4.0.0",
    "arity": -2,
    "function": "unlinkCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "KEYSPACE"
    ],
    "command_tips": [
      "REQUEST_POLICY:MULTI_SHARD",
      "RESPONSE_POLICY:AGG_SUM"
    ],
    "key_specs": [
      {
        "flags": [
          "RM",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "The number of keys that were unlinked.",
      "type": "integer",
      "minimum": 0
    }
  },
  "UNSUBSCRIBE": {
    "summary": "Stops listening to messages posted to channels.",
    "complexity": "O(N) where N is the number of channels to unsubscribe.",
    "group": "pubsub",
    "since": "2.0.0",
    "arity": -1,
    "function": "unsubscribeCommand",
    "command_flags": [
      "PUBSUB",
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "SENTINEL"
    ],
    "arguments": [
      {
        "name": "channel",
        "type": "string",
        "optional": true,
        "multiple": true
      }
    ]
  },
  "UNWATCH": {
    "summary": "Forgets about watched keys of a transaction.",
    "complexity": "O(1)",
    "group": "transactions",
    "since": "2.2.0",
    "arity": 1,
    "function": "unwatchCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "TRANSACTION"
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "WAIT": {
    "summary": "Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "3.0.0",
    "arity": 3,
    "function": "waitCommand",
    "command_flags": [
      "BLOCKING"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:AGG_MIN"
    ],
    "reply_schema": {
      "type": "integer",
      "description": "The number of replicas reached by all the writes performed in the context of the current connection.",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "numreplicas",
        "type": "integer"
      },
      {
        "name": "timeout",
        "type": "integer"
      }
    ]
  },
  "WAITAOF": {
    "summary": "Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the primary and/or replicas.",
    "complexity": "O(1)",
    "group": "generic",
    "since": "7.2.0",
    "arity": 4,
    "function": "waitaofCommand",
    "command_flags": [
      "BLOCKING"
    ],
    "acl_categories": [
      "CONNECTION"
    ],
    "command_tips": [
      "REQUEST_POLICY:ALL_SHARDS",
      "RESPONSE_POLICY:AGG_MIN"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Number of local and remote AOF files in sync.",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "description": "Number of local AOF files.",
          "type": "integer",
          "minimum": 0
        },
        {
          "description": "Number of replica AOF files.",
          "type": "number",
          "minimum": 0
        }
      ]
    },
    "arguments": [
      {
        "name": "numlocal",
        "type": "integer"
      },
      {
        "name": "numreplicas",
        "type": "integer"
      },
      {
        "name": "timeout",
        "type": "integer"
      }
    ]
  },
  "WATCH": {
    "summary": "Monitors changes to keys to determine the execution of a transaction.",
    "complexity": "O(1) for every key.",
    "group": "transactions",
    "since": "2.2.0",
    "arity": -2,
    "function": "watchCommand",
    "command_flags": [
      "NOSCRIPT",
      "LOADING",
      "STALE",
      "FAST",
      "NO_MULTI",
      "ALLOW_BUSY"
    ],
    "acl_categories": [
      "TRANSACTION"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "const": "OK"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      }
    ]
  },
  "XACK": {
    "summary": "Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.",
    "complexity": "O(1) for each message ID processed.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -4,
    "function": "xackCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "ID",
        "type": "string",
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "The command returns the number of messages successfully acknowledged. Certain message IDs may no longer be part of the PEL (for example because they have already been acknowledged), and XACK will not count them as successfully acknowledged.",
      "type": "integer",
      "minimum": 0
    }
  },
  "XADD": {
    "summary": "Appends a new message to a stream. Creates the key if it doesn't exist.",
    "complexity": "O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -5,
    "function": "xaddCommand",
    "history": [
      [
        "6.2.0",
        "Added the `NOMKSTREAM` option, `MINID` trimming strategy and the `LIMIT` option."
      ],
      [
        "7.0.0",
        "Added support for the `<ms>-*` explicit ID form."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "notes": "UPDATE instead of INSERT because of the optional trimming feature",
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "token": "NOMKSTREAM",
        "name": "nomkstream",
        "type": "pure-token",
        "optional": true,
        "since": "6.2.0"
      },
      {
        "name": "trim",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "strategy",
            "type": "oneof",
            "arguments": [
              {
                "name": "maxlen",
                "type": "pure-token",
                "token": "MAXLEN"
              },
              {
                "name": "minid",
                "type": "pure-token",
                "token": "MINID",
                "since": "6.2.0"
              }
            ]
          },
          {
            "name": "operator",
            "type": "oneof",
            "optional": true,
            "arguments": [
              {
                "name": "equal",
                "type": "pure-token",
                "token": "="
              },
              {
                "name": "approximately",
                "type": "pure-token",
                "token": "~"
              }
            ]
          },
          {
            "name": "threshold",
            "type": "string"
          },
          {
            "token": "LIMIT",
            "name": "count",
            "type": "integer",
            "optional": true,
            "since": "6.2.0"
          }
        ]
      },
      {
        "name": "id-selector",
        "type": "oneof",
        "arguments": [
          {
            "name": "auto-id",
            "type": "pure-token",
            "token": "*"
          },
          {
            "name": "id",
            "type": "string"
          }
        ]
      },
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "field",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ]
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "The ID of the added entry. The ID is the one auto-generated if * is passed as ID argument, otherwise the command just returns the same ID specified by the user during insertion.",
          "type": "string",
          "pattern": "[0-9]+-[0-9]+"
        },
        {
          "description": "The NOMKSTREAM option is given and the key doesn't exist.",
          "type": "null"
        }
      ]
    }
  },
  "XAUTOCLAIM": {
    "summary": "Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.",
    "complexity": "O(1) if COUNT is small.",
    "group": "stream",
    "since": "6.2.0",
    "arity": -6,
    "function": "xautoclaimCommand",
    "history": [
      [
        "7.0.0",
        "Added an element to the reply array, containing deleted entries the command cleared from the PEL"
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "Claimed stream entries (with data, if `JUSTID` was not given).",
          "type": "array",
          "minItems": 3,
          "maxItems": 3,
          "items": [
            {
              "description": "Cursor for next call.",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "description": "Entry ID",
                    "type": "string",
                    "pattern": "[0-9]+-[0-9]+"
                  },
                  {
                    "description": "Data",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            {
              "description": "Entry IDs which no longer exist in the stream, and were deleted from the PEL in which they were found.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[0-9]+-[0-9]+"
              }
            }
          ]
        },
        {
          "description": "Claimed stream entries (without data, if `JUSTID` was given).",
          "type": "array",
          "minItems": 3,
          "maxItems": 3,
          "items": [
            {
              "description": "Cursor for next call.",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string",
                "pattern": "[0-9]+-[0-9]+"
              }
            },
            {
              "description": "Entry IDs which no longer exist in the stream, and were deleted from the PEL in which they were found.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[0-9]+-[0-9]+"
              }
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "consumer",
        "type": "string"
      },
      {
        "name": "min-idle-time",
        "type": "string"
      },
      {
        "name": "start",
        "type": "string"
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "name": "justid",
        "token": "JUSTID",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "XCLAIM": {
    "summary": "Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.",
    "complexity": "O(log N) with N being the number of messages in the PEL of the consumer group.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -6,
    "function": "xclaimCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "consumer",
        "type": "string"
      },
      {
        "name": "min-idle-time",
        "type": "string"
      },
      {
        "name": "ID",
        "type": "string",
        "multiple": true
      },
      {
        "token": "IDLE",
        "name": "ms",
        "type": "integer",
        "optional": true
      },
      {
        "token": "TIME",
        "name": "unix-time-milliseconds",
        "type": "unix-time",
        "optional": true
      },
      {
        "token": "RETRYCOUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "name": "force",
        "token": "FORCE",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "justid",
        "token": "JUSTID",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "lastid",
        "token": "LASTID",
        "type": "string",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "Stream entries with IDs matching the specified range.",
      "anyOf": [
        {
          "description": "If JUSTID option is specified, return just an array of IDs of messages successfully claimed.",
          "type": "array",
          "items": {
            "description": "Entry ID.",
            "type": "string",
            "pattern": "[0-9]+-[0-9]+"
          }
        },
        {
          "description": "Array of stream entries that contains each entry as an array of 2 elements, the Entry ID and the entry data itself.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Entry ID.",
                "type": "string",
                "pattern": "[0-9]+-[0-9]+"
              },
              {
                "description": "Data.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "XDEL": {
    "summary": "Returns the number of messages after removing them from a stream.",
    "complexity": "O(1) for each single item to delete in the stream, regardless of the stream size.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -3,
    "function": "xdelCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "ID",
        "type": "string",
        "multiple": true
      }
    ],
    "reply_schema": {
      "description": "The number of entries actually deleted",
      "type": "integer",
      "minimum": 0
    }
  },
  "XGROUP CREATE": {
    "summary": "Creates a consumer group.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": -5,
    "container": "XGROUP",
    "function": "xgroupCommand",
    "history": [
      [
        "7.0.0",
        "Added the `entries_read` named argument."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "id-selector",
        "type": "oneof",
        "arguments": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "new-id",
            "type": "pure-token",
            "token": "$"
          }
        ]
      },
      {
        "token": "MKSTREAM",
        "name": "mkstream",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "entriesread",
        "display": "entries-read",
        "token": "ENTRIESREAD",
        "type": "integer",
        "optional": true
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "XGROUP CREATECONSUMER": {
    "summary": "Creates a consumer in a consumer group.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "6.2.0",
    "arity": 5,
    "container": "XGROUP",
    "function": "xgroupCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "INSERT"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "consumer",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "The number of created consumers (0 or 1)",
      "oneOf": [
        {
          "const": 1
        },
        {
          "const": 0
        }
      ]
    }
  },
  "XGROUP DELCONSUMER": {
    "summary": "Deletes a consumer from a consumer group.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": 5,
    "container": "XGROUP",
    "function": "xgroupCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "consumer",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "The number of pending messages that were yet associated with such a consumer",
      "type": "integer",
      "minimum": 0
    }
  },
  "XGROUP DESTROY": {
    "summary": "Destroys a consumer group.",
    "complexity": "O(N) where N is the number of entries in the group's pending entries list (PEL).",
    "group": "stream",
    "since": "5.0.0",
    "arity": 4,
    "container": "XGROUP",
    "function": "xgroupCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "The number of destroyed consumer groups (0 or 1)",
      "oneOf": [
        {
          "const": 1
        },
        {
          "const": 0
        }
      ]
    }
  },
  "XGROUP HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": 2,
    "container": "XGROUP",
    "function": "xgroupCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "XGROUP SETID": {
    "summary": "Sets the last-delivered ID of a consumer group.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": -5,
    "container": "XGROUP",
    "function": "xgroupCommand",
    "history": [
      [
        "7.0.0",
        "Added the optional `entries_read` argument."
      ]
    ],
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "id-selector",
        "type": "oneof",
        "arguments": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "new-id",
            "type": "pure-token",
            "token": "$"
          }
        ]
      },
      {
        "name": "entriesread",
        "display": "entries-read",
        "token": "ENTRIESREAD",
        "type": "integer",
        "optional": true
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "XGROUP": {
    "summary": "A container for consumer groups commands.",
    "complexity": "Depends on subcommand.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -2
  },
  "XINFO CONSUMERS": {
    "summary": "Returns a list of the consumers in a consumer group.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": 4,
    "container": "XINFO",
    "function": "xinfoCommand",
    "history": [
      [
        "7.2.0",
        "Added the `inactive` field, and changed the meaning of `idle`."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      }
    ],
    "reply_schema": {
      "description": "Array list of consumers",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "pending": {
            "type": "integer"
          },
          "idle": {
            "type": "integer"
          },
          "inactive": {
            "type": "integer"
          }
        }
      }
    }
  },
  "XINFO GROUPS": {
    "summary": "Returns a list of the consumer groups of a stream.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": 3,
    "container": "XINFO",
    "history": [
      [
        "7.0.0",
        "Added the `entries-read` and `lag` fields"
      ]
    ],
    "function": "xinfoCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "consumers": {
            "type": "integer"
          },
          "pending": {
            "type": "integer"
          },
          "last-delivered-id": {
            "type": "string",
            "pattern": "[0-9]+-[0-9]+"
          },
          "entries-read": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          },
          "lag": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        }
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "XINFO HELP": {
    "summary": "Returns helpful text about the different subcommands.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": 2,
    "container": "XINFO",
    "function": "xinfoCommand",
    "command_flags": [
      "LOADING",
      "STALE"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "reply_schema": {
      "type": "array",
      "description": "Helpful text about subcommands.",
      "items": {
        "type": "string"
      }
    }
  },
  "XINFO STREAM": {
    "summary": "Returns information about a stream.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": -3,
    "container": "XINFO",
    "history": [
      [
        "6.0.0",
        "Added the `FULL` modifier."
      ],
      [
        "7.0.0",
        "Added the `max-deleted-entry-id`, `entries-added`, `recorded-first-entry-id`, `entries-read` and `lag` fields"
      ],
      [
        "7.2.0",
        "Added the `active-time` field, and changed the meaning of `seen-time`."
      ]
    ],
    "function": "xinfoCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Summary form, in case `FULL` was not given.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "length": {
              "description": "The number of entries in the stream (see `XLEN`).",
              "type": "integer"
            },
            "radix-tree-keys": {
              "description": "The number of keys in the underlying radix data structure.",
              "type": "integer"
            },
            "radix-tree-nodes": {
              "description": "The number of nodes in the underlying radix data structure.",
              "type": "integer"
            },
            "last-generated-id": {
              "description": "The ID of the least-recently entry that was added to the stream.",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            "max-deleted-entry-id": {
              "description": "The maximal entry ID that was deleted from the stream.",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            "recorded-first-entry-id": {
              "description": "Cached copy of the first entry ID.",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            "entries-added": {
              "description": "The count of all entries added to the stream during its lifetime.",
              "type": "integer"
            },
            "groups": {
              "description": "The number of consumer groups defined for the stream.",
              "type": "integer"
            },
            "first-entry": {
              "description": "The first entry of the stream.",
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": [
                    {
                      "description": "Entry ID.",
                      "type": "string",
                      "pattern": "[0-9]+-[0-9]+"
                    },
                    {
                      "description": "Data.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              ]
            },
            "last-entry": {
              "description": "The last entry of the stream.",
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "array",
                  "minItems": 2,
                  "maxItems": 2,
                  "items": [
                    {
                      "description": "Entry ID.",
                      "type": "string",
                      "pattern": "[0-9]+-[0-9]+"
                    },
                    {
                      "description": "Data.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                }
              ]
            }
          }
        },
        {
          "description": "Extended form, in case `FULL` was given.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "length": {
              "description": "The number of entries in the stream (see `XLEN`).",
              "type": "integer"
            },
            "radix-tree-keys": {
              "description": "The number of keys in the underlying radix data structure.",
              "type": "integer"
            },
            "radix-tree-nodes": {
              "description": "The number of nodes in the underlying radix data structure.",
              "type": "integer"
            },
            "last-generated-id": {
              "description": "The ID of the least-recently entry that was added to the stream.",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            "max-deleted-entry-id": {
              "description": "The maximal entry ID that was deleted from the stream.",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            "recorded-first-entry-id": {
              "description": "Cached copy of the first entry ID.",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            "entries-added": {
              "description": "The count of all entries added to the stream during its lifetime.",
              "type": "integer"
            },
            "entries": {
              "description": "All the entries of the stream.",
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "description": "Entry ID.",
                    "type": "string",
                    "pattern": "[0-9]+-[0-9]+"
                  },
                  {
                    "description": "Data.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            },
            "groups": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "description": "Group name.",
                    "type": "string"
                  },
                  "last-delivered-id": {
                    "description": "Last entry ID that was delivered to a consumer.",
                    "type": "string",
                    "pattern": "[0-9]+-[0-9]+"
                  },
                  "entries-read": {
                    "description": "Total number of entries ever read by consumers in the group.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "lag": {
                    "description": "Number of entries left to be consumed from the stream.",
                    "oneOf": [
                      {
                        "type": "null"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "pel-count": {
                    "description": "Total number of unacknowledged entries.",
                    "type": "integer"
                  },
                  "pending": {
                    "description": "Data about all of the unacknowledged entries.",
                    "type": "array",
                    "items": {
                      "type": "array",
                      "minItems": 4,
                      "maxItems": 4,
                      "items": [
                        {
                          "description": "Entry ID.",
                          "type": "string",
                          "pattern": "[0-9]+-[0-9]+"
                        },
                        {
                          "description": "Consumer name.",
                          "type": "string"
                        },
                        {
                          "description": "Delivery timestamp.",
                          "type": "integer"
                        },
                        {
                          "description": "Delivery count.",
                          "type": "integer"
                        }
                      ]
                    }
                  },
                  "consumers": {
                    "description": "Data about all of the consumers of the group.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "active-time": {
                          "type": "integer",
                          "description": "Last time this consumer was active (successful reading/claiming).",
                          "minimum": 0
                        },
                        "name": {
                          "description": "Consumer name.",
                          "type": "string"
                        },
                        "seen-time": {
                          "description": "Timestamp of the last interaction attempt of the consumer.",
                          "type": "integer",
                          "minimum": 0
                        },
                        "pel-count": {
                          "description": "Number of unacknowledged entries that belong to the consumer.",
                          "type": "integer"
                        },
                        "pending": {
                          "description": "Data about the unacknowledged entries.",
                          "type": "array",
                          "items": {
                            "type": "array",
                            "minItems": 3,
                            "maxItems": 3,
                            "items": [
                              {
                                "description": "Entry ID.",
                                "type": "string",
                                "pattern": "[0-9]+-[0-9]+"
                              },
                              {
                                "description": "Delivery timestamp.",
                                "type": "integer"
                              },
                              {
                                "description": "Delivery count.",
                                "type": "integer"
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "full-block",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "full",
            "token": "FULL",
            "type": "pure-token"
          },
          {
            "token": "COUNT",
            "name": "count",
            "type": "integer",
            "optional": true
          }
        ]
      }
    ]
  },
  "XINFO": {
    "summary": "A container for stream introspection commands.",
    "complexity": "Depends on subcommand.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -2
  },
  "XLEN": {
    "summary": "Return the number of messages in a stream.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": 2,
    "function": "xlenCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ],
    "reply_schema": {
      "description": "The number of entries of the stream at key",
      "type": "integer",
      "minimum": 0
    }
  },
  "XPENDING": {
    "summary": "Returns the information and entries from a stream consumer group's pending entries list.",
    "complexity": "O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -3,
    "function": "xpendingCommand",
    "history": [
      [
        "6.2.0",
        "Added the `IDLE` option and exclusive range intervals."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "Extended form, in case `start` was given.",
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 4,
            "maxItems": 4,
            "items": [
              {
                "description": "Entry ID",
                "type": "string",
                "pattern": "[0-9]+-[0-9]+"
              },
              {
                "description": "Consumer name",
                "type": "string"
              },
              {
                "description": "Idle time",
                "type": "integer"
              },
              {
                "description": "Delivery count",
                "type": "integer"
              }
            ]
          }
        },
        {
          "description": "Summary form, in case `start` was not given.",
          "type": "array",
          "minItems": 4,
          "maxItems": 4,
          "items": [
            {
              "description": "Total number of pending messages",
              "type": "integer"
            },
            {
              "description": "Minimal pending entry ID",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            {
              "description": "Maximal pending entry ID",
              "type": "string",
              "pattern": "[0-9]+-[0-9]+"
            },
            {
              "description": "Consumers with pending messages",
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "description": "Consumer name",
                    "type": "string"
                  },
                  {
                    "description": "Number of pending messages",
                    "type": "string"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "group",
        "type": "string"
      },
      {
        "name": "filters",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "token": "IDLE",
            "name": "min-idle-time",
            "type": "integer",
            "optional": true,
            "since": "6.2.0"
          },
          {
            "name": "start",
            "type": "string"
          },
          {
            "name": "end",
            "type": "string"
          },
          {
            "name": "count",
            "type": "integer"
          },
          {
            "name": "consumer",
            "type": "string",
            "optional": true
          }
        ]
      }
    ]
  },
  "XRANGE": {
    "summary": "Returns the messages from a stream within a range of IDs.",
    "complexity": "O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
    "group": "stream",
    "since": "5.0.0",
    "arity": -4,
    "function": "xrangeCommand",
    "history": [
      [
        "6.2.0",
        "Added exclusive ranges."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Stream entries with IDs matching the specified range.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "description": "Entry ID",
            "type": "string",
            "pattern": "[0-9]+-[0-9]+"
          },
          {
            "description": "Data",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "start",
        "type": "string"
      },
      {
        "name": "end",
        "type": "string"
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "XREAD": {
    "summary": "Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -4,
    "function": "xreadCommand",
    "get_keys_function": "xreadGetKeys",
    "command_flags": [
      "BLOCKING",
      "READONLY"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "keyword": {
            "keyword": "STREAMS",
            "startfrom": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 2
          }
        }
      }
    ],
    "arguments": [
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "token": "BLOCK",
        "name": "milliseconds",
        "type": "integer",
        "optional": true
      },
      {
        "name": "streams",
        "token": "STREAMS",
        "type": "block",
        "arguments": [
          {
            "name": "key",
            "type": "key",
            "key_spec_index": 0,
            "multiple": true
          },
          {
            "name": "ID",
            "type": "string",
            "multiple": true
          }
        ]
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "A map of key-value elements when each element composed of key name and the entries reported for that key.",
          "type": "object",
          "patternProperties": {
            "^.*$": {
              "description": "The entries reported for that key.",
              "type": "array",
              "items": {
                "type": "array",
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "description": "Entry id.",
                    "type": "string",
                    "pattern": "[0-9]+-[0-9]+"
                  },
                  {
                    "description": "A map of key-value elements when each element composed of key name and the entries reported for that key.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "description": "If BLOCK option is given, and a timeout occurs, or there is no stream we can serve.",
          "type": "null"
        }
      ]
    }
  },
  "XREADGROUP": {
    "summary": "Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.",
    "complexity": "For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -7,
    "function": "xreadCommand",
    "get_keys_function": "xreadGetKeys",
    "command_flags": [
      "BLOCKING",
      "WRITE"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "keyword": {
            "keyword": "STREAMS",
            "startfrom": 4
          }
        },
        "find_keys": {
          "range": {
            "lastkey": -1,
            "step": 1,
            "limit": 2
          }
        }
      }
    ],
    "arguments": [
      {
        "token": "GROUP",
        "name": "group-block",
        "type": "block",
        "arguments": [
          {
            "name": "group",
            "type": "string"
          },
          {
            "name": "consumer",
            "type": "string"
          }
        ]
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "token": "BLOCK",
        "name": "milliseconds",
        "type": "integer",
        "optional": true
      },
      {
        "name": "noack",
        "token": "NOACK",
        "type": "pure-token",
        "optional": true
      },
      {
        "name": "streams",
        "token": "STREAMS",
        "type": "block",
        "arguments": [
          {
            "name": "key",
            "type": "key",
            "key_spec_index": 0,
            "multiple": true
          },
          {
            "name": "ID",
            "type": "string",
            "multiple": true
          }
        ]
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "If BLOCK option is specified and the timeout expired",
          "type": "null"
        },
        {
          "description": "A map of key-value elements when each element composed of key name and the entries reported for that key",
          "type": "object",
          "additionalProperties": {
            "description": "The entries reported for that key",
            "type": "array",
            "items": {
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": [
                {
                  "description": "Stream id",
                  "type": "string",
                  "pattern": "[0-9]+-[0-9]+"
                },
                {
                  "oneOf": [
                    {
                      "description": "Array of field-value pairs",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              ]
            }
          }
        }
      ]
    }
  },
  "XREVRANGE": {
    "summary": "Returns the messages from a stream within a range of IDs in reverse order.",
    "complexity": "O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).",
    "group": "stream",
    "since": "5.0.0",
    "arity": -4,
    "function": "xrevrangeCommand",
    "history": [
      [
        "6.2.0",
        "Added exclusive ranges."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "end",
        "type": "string"
      },
      {
        "name": "start",
        "type": "string"
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "An array of the entries with IDs matching the specified range",
      "type": "array",
      "items": {
        "type": "array",
        "minItems": 2,
        "maxItems": 2,
        "items": [
          {
            "description": "Stream id",
            "type": "string",
            "pattern": "[0-9]+-[0-9]+"
          },
          {
            "description": "Array of field-value pairs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      }
    }
  },
  "XSETID": {
    "summary": "An internal command for replicating stream values.",
    "complexity": "O(1)",
    "group": "stream",
    "since": "5.0.0",
    "arity": -3,
    "function": "xsetidCommand",
    "history": [
      [
        "7.0.0",
        "Added the `entries_added` and `max_deleted_entry_id` arguments."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "last-id",
        "type": "string"
      },
      {
        "name": "entries-added",
        "token": "ENTRIESADDED",
        "type": "integer",
        "optional": true,
        "since": "7.0.0"
      },
      {
        "name": "max-deleted-id",
        "token": "MAXDELETEDID",
        "type": "string",
        "optional": true,
        "since": "7.0.0"
      }
    ],
    "reply_schema": {
      "const": "OK"
    }
  },
  "XTRIM": {
    "summary": "Deletes messages from the beginning of a stream.",
    "complexity": "O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.",
    "group": "stream",
    "since": "5.0.0",
    "arity": -4,
    "function": "xtrimCommand",
    "history": [
      [
        "6.2.0",
        "Added the `MINID` trimming strategy and the `LIMIT` option."
      ]
    ],
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "STREAM"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "trim",
        "type": "block",
        "arguments": [
          {
            "name": "strategy",
            "type": "oneof",
            "arguments": [
              {
                "name": "maxlen",
                "type": "pure-token",
                "token": "MAXLEN"
              },
              {
                "name": "minid",
                "type": "pure-token",
                "token": "MINID",
                "since": "6.2.0"
              }
            ]
          },
          {
            "name": "operator",
            "type": "oneof",
            "optional": true,
            "arguments": [
              {
                "name": "equal",
                "type": "pure-token",
                "token": "="
              },
              {
                "name": "approximately",
                "type": "pure-token",
                "token": "~"
              }
            ]
          },
          {
            "name": "threshold",
            "type": "string"
          },
          {
            "token": "LIMIT",
            "name": "count",
            "type": "integer",
            "optional": true,
            "since": "6.2.0"
          }
        ]
      }
    ],
    "reply_schema": {
      "description": "The number of entries deleted from the stream.",
      "type": "integer",
      "minimum": 0
    }
  },
  "ZADD": {
    "summary": "Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.",
    "complexity": "O(log(N)) for each item added, where N is the number of elements in the sorted set.",
    "group": "sorted_set",
    "since": "1.2.0",
    "arity": -4,
    "function": "zaddCommand",
    "history": [
      [
        "2.4.0",
        "Accepts multiple elements."
      ],
      [
        "3.0.2",
        "Added the `XX`, `NX`, `CH` and `INCR` options."
      ],
      [
        "6.2.0",
        "Added the `GT` and `LT` options."
      ]
    ],
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "Operation was aborted (conflict with one of the `XX`/`NX`/`LT`/`GT` options).",
          "type": "null"
        },
        {
          "description": "The number of new members (when the `CH` option is not used)",
          "type": "integer"
        },
        {
          "description": "The number of new or updated members (when the `CH` option is used)",
          "type": "integer"
        },
        {
          "description": "The updated score of the member (when the `INCR` option is used)",
          "type": "number"
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "condition",
        "type": "oneof",
        "optional": true,
        "since": "3.0.2",
        "arguments": [
          {
            "name": "nx",
            "type": "pure-token",
            "token": "NX"
          },
          {
            "name": "xx",
            "type": "pure-token",
            "token": "XX"
          }
        ]
      },
      {
        "name": "comparison",
        "type": "oneof",
        "optional": true,
        "since": "6.2.0",
        "arguments": [
          {
            "name": "gt",
            "type": "pure-token",
            "token": "GT"
          },
          {
            "name": "lt",
            "type": "pure-token",
            "token": "LT"
          }
        ]
      },
      {
        "name": "change",
        "token": "CH",
        "type": "pure-token",
        "optional": true,
        "since": "3.0.2"
      },
      {
        "name": "increment",
        "token": "INCR",
        "type": "pure-token",
        "optional": true,
        "since": "3.0.2"
      },
      {
        "name": "data",
        "type": "block",
        "multiple": true,
        "arguments": [
          {
            "name": "score",
            "type": "double"
          },
          {
            "name": "member",
            "type": "string"
          }
        ]
      }
    ]
  },
  "ZCARD": {
    "summary": "Returns the number of members in a sorted set.",
    "complexity": "O(1)",
    "group": "sorted_set",
    "since": "1.2.0",
    "arity": 2,
    "function": "zcardCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The cardinality (number of elements) of the sorted set, or 0 if key does not exist",
      "type": "integer"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      }
    ]
  },
  "ZCOUNT": {
    "summary": "Returns the count of members in a sorted set that have scores within a range.",
    "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
    "group": "sorted_set",
    "since": "2.0.0",
    "arity": 4,
    "function": "zcountCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The number of elements in the specified score range",
      "type": "integer"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "min",
        "type": "double"
      },
      {
        "name": "max",
        "type": "double"
      }
    ]
  },
  "ZDIFF": {
    "summary": "Returns the difference between multiple sorted sets.",
    "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
    "group": "sorted_set",
    "since": "6.2.0",
    "arity": -3,
    "function": "zdiffCommand",
    "get_keys_function": "zunionInterDiffGetKeys",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "A list of members. Returned in case `WITHSCORES` was not used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "description": "Members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array",
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Member",
                "type": "string"
              },
              {
                "description": "Score",
                "type": "number"
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "withscores",
        "token": "WITHSCORES",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "ZDIFFSTORE": {
    "summary": "Stores the difference of multiple sorted sets in a key.",
    "complexity": "O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.",
    "group": "sorted_set",
    "since": "6.2.0",
    "arity": -4,
    "function": "zdiffstoreCommand",
    "get_keys_function": "zunionInterDiffStoreGetKeys",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of elements in the resulting sorted set at `destination`",
      "type": "integer"
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 1,
        "multiple": true
      }
    ]
  },
  "ZINCRBY": {
    "summary": "Increments the score of a member in a sorted set.",
    "complexity": "O(log(N)) where N is the number of elements in the sorted set.",
    "group": "sorted_set",
    "since": "1.2.0",
    "arity": 4,
    "function": "zincrbyCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The new score of `member`",
      "type": "number"
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "increment",
        "type": "integer"
      },
      {
        "name": "member",
        "type": "string"
      }
    ]
  },
  "ZINTER": {
    "summary": "Returns the intersect of multiple sorted sets.",
    "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
    "group": "sorted_set",
    "since": "6.2.0",
    "arity": -3,
    "function": "zinterCommand",
    "get_keys_function": "zunionInterDiffGetKeys",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "Result of intersection, containing only the member names. Returned in case `WITHSCORES` was not used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        {
          "description": "Result of intersection, containing members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array",
          "type": "array",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Member",
                "type": "string"
              },
              {
                "description": "Score",
                "type": "number"
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "token": "WEIGHTS",
        "name": "weight",
        "type": "integer",
        "optional": true,
        "multiple": true
      },
      {
        "token": "AGGREGATE",
        "name": "aggregate",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "sum",
            "type": "pure-token",
            "token": "SUM"
          },
          {
            "name": "min",
            "type": "pure-token",
            "token": "MIN"
          },
          {
            "name": "max",
            "type": "pure-token",
            "token": "MAX"
          }
        ]
      },
      {
        "name": "withscores",
        "token": "WITHSCORES",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "ZINTERCARD": {
    "summary": "Returns the number of members of the intersect of multiple sorted sets.",
    "complexity": "O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.",
    "group": "sorted_set",
    "since": "7.0.0",
    "arity": -3,
    "function": "zinterCardCommand",
    "get_keys_function": "zunionInterDiffGetKeys",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of elements in the resulting intersection.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "ZINTERSTORE": {
    "summary": "Stores the intersect of multiple sorted sets in a key.",
    "complexity": "O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.",
    "group": "sorted_set",
    "since": "2.0.0",
    "arity": -4,
    "function": "zinterstoreCommand",
    "get_keys_function": "zunionInterDiffStoreGetKeys",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of elements in the resulting sorted set.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 1,
        "multiple": true
      },
      {
        "token": "WEIGHTS",
        "name": "weight",
        "type": "integer",
        "optional": true,
        "multiple": true
      },
      {
        "token": "AGGREGATE",
        "name": "aggregate",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "sum",
            "type": "pure-token",
            "token": "SUM"
          },
          {
            "name": "min",
            "type": "pure-token",
            "token": "MIN"
          },
          {
            "name": "max",
            "type": "pure-token",
            "token": "MAX"
          }
        ]
      }
    ]
  },
  "ZLEXCOUNT": {
    "summary": "Returns the number of members in a sorted set within a lexicographical range.",
    "complexity": "O(log(N)) with N being the number of elements in the sorted set.",
    "group": "sorted_set",
    "since": "2.8.9",
    "arity": 4,
    "function": "zlexcountCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "Number of elements in the specified score range.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      }
    ]
  },
  "ZMPOP": {
    "summary": "Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.",
    "complexity": "O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.",
    "group": "sorted_set",
    "since": "7.0.0",
    "arity": -4,
    "function": "zmpopCommand",
    "get_keys_function": "zmpopGetKeys",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "description": "No element could be popped.",
          "type": "null"
        },
        {
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "type": "string",
              "description": "Name of the key that elements were popped."
            },
            {
              "type": "array",
              "description": "Popped elements.",
              "items": {
                "type": "array",
                "uniqueItems": true,
                "minItems": 2,
                "maxItems": 2,
                "items": [
                  {
                    "type": "string",
                    "description": "Name of the member."
                  },
                  {
                    "type": "number",
                    "description": "Score."
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "name": "where",
        "type": "oneof",
        "arguments": [
          {
            "name": "min",
            "type": "pure-token",
            "token": "MIN"
          },
          {
            "name": "max",
            "type": "pure-token",
            "token": "MAX"
          }
        ]
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "ZMSCORE": {
    "summary": "Returns the score of one or more members in a sorted set.",
    "complexity": "O(N) where N is the number of members being requested.",
    "group": "sorted_set",
    "since": "6.2.0",
    "arity": -3,
    "function": "zmscoreCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "minItems": 1,
      "items": {
        "oneOf": [
          {
            "type": "number",
            "description": "The score of the member (a double precision floating point number). In RESP2, this is returned as string."
          },
          {
            "type": "null",
            "description": "Member does not exist in the sorted set."
          }
        ]
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "ZPOPMAX": {
    "summary": "Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.",
    "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
    "group": "sorted_set",
    "since": "5.0.0",
    "arity": -2,
    "function": "zpopmaxCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "type": "array",
          "description": "List of popped elements and scores when 'COUNT' isn't specified.",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "type": "string",
              "description": "Popped element."
            },
            {
              "type": "number",
              "description": "Score."
            }
          ]
        },
        {
          "type": "array",
          "description": "List of popped elements and scores when 'COUNT' is specified.",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string",
                "description": "Popped element."
              },
              {
                "type": "number",
                "description": "Score."
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "ZPOPMIN": {
    "summary": "Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.",
    "complexity": "O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.",
    "group": "sorted_set",
    "since": "5.0.0",
    "arity": -2,
    "function": "zpopminCommand",
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "ACCESS",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "type": "array",
          "description": "List of popped elements and scores when 'COUNT' isn't specified.",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "type": "string",
              "description": "Popped element."
            },
            {
              "type": "number",
              "description": "Score."
            }
          ]
        },
        {
          "type": "array",
          "description": "List of popped elements and scores when 'COUNT' is specified.",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string",
                "description": "Popped element."
              },
              {
                "type": "number",
                "description": "Score."
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "count",
        "type": "integer",
        "optional": true
      }
    ]
  },
  "ZRANDMEMBER": {
    "summary": "Returns one or more random members from a sorted set.",
    "complexity": "O(N) where N is the number of members returned",
    "group": "sorted_set",
    "since": "6.2.0",
    "arity": -2,
    "function": "zrandmemberCommand",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "type": "null",
          "description": "Key does not exist."
        },
        {
          "type": "string",
          "description": "Randomly selected element when 'COUNT' is not used."
        },
        {
          "type": "array",
          "description": "Randomly selected elements when 'COUNT' is used.",
          "items": {
            "type": "string"
          }
        },
        {
          "type": "array",
          "description": "Randomly selected elements when 'COUNT' and 'WITHSCORES' modifiers are used.",
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string",
                "description": "Element."
              },
              {
                "type": "number",
                "description": "Score."
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "options",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "count",
            "type": "integer"
          },
          {
            "name": "withscores",
            "token": "WITHSCORES",
            "type": "pure-token",
            "optional": true
          }
        ]
      }
    ]
  },
  "ZRANGE": {
    "summary": "Returns members in a sorted set within a range of indexes.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
    "group": "sorted_set",
    "since": "1.2.0",
    "arity": -4,
    "function": "zrangeCommand",
    "history": [
      [
        "6.2.0",
        "Added the `REV`, `BYSCORE`, `BYLEX` and `LIMIT` options."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "A list of member elements",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        {
          "description": "Members and their scores. Returned in case `WITHSCORES` was used. In RESP2 this is returned as a flat array",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Member",
                "type": "string"
              },
              {
                "description": "Score",
                "type": "number"
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "start",
        "type": "string"
      },
      {
        "name": "stop",
        "type": "string"
      },
      {
        "name": "sortby",
        "type": "oneof",
        "optional": true,
        "since": "6.2.0",
        "arguments": [
          {
            "name": "byscore",
            "type": "pure-token",
            "token": "BYSCORE"
          },
          {
            "name": "bylex",
            "type": "pure-token",
            "token": "BYLEX"
          }
        ]
      },
      {
        "name": "rev",
        "token": "REV",
        "type": "pure-token",
        "optional": true,
        "since": "6.2.0"
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "block",
        "optional": true,
        "since": "6.2.0",
        "arguments": [
          {
            "name": "offset",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      },
      {
        "name": "withscores",
        "token": "WITHSCORES",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "ZRANGEBYLEX": {
    "summary": "Returns members in a sorted set within a lexicographical range.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
    "group": "sorted_set",
    "since": "2.8.9",
    "arity": -4,
    "function": "zrangebylexCommand",
    "deprecated_since": "6.2.0",
    "replaced_by": "`ZRANGE` with the `BYLEX` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of elements in the specified score range.",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "offset",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      }
    ]
  },
  "ZRANGEBYSCORE": {
    "summary": "Returns members in a sorted set within a range of scores.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
    "group": "sorted_set",
    "since": "1.0.5",
    "arity": -4,
    "function": "zrangebyscoreCommand",
    "history": [
      [
        "2.0.0",
        "Added the `WITHSCORES` modifier."
      ]
    ],
    "deprecated_since": "6.2.0",
    "replaced_by": "`ZRANGE` with the `BYSCORE` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "type": "array",
          "description": "List of the elements in the specified score range, as not WITHSCORES.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "description": "Element."
          }
        },
        {
          "type": "array",
          "description": "List of the elements and their scores in the specified score range, as WITHSCORES used.",
          "uniqueItems": true,
          "items": {
            "type": "array",
            "description": "Tuple of element and its score.",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Element.",
                "type": "string"
              },
              {
                "description": "Score.",
                "type": "number"
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "min",
        "type": "double"
      },
      {
        "name": "max",
        "type": "double"
      },
      {
        "name": "withscores",
        "token": "WITHSCORES",
        "type": "pure-token",
        "optional": true,
        "since": "2.0.0"
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "offset",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      }
    ]
  },
  "ZRANGESTORE": {
    "summary": "Stores a range of members from sorted set in a key.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.",
    "group": "sorted_set",
    "since": "6.2.0",
    "arity": -5,
    "function": "zrangestoreCommand",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of elements in the resulting sorted set."
    },
    "arguments": [
      {
        "name": "dst",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "src",
        "type": "key",
        "key_spec_index": 1
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      },
      {
        "name": "sortby",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "byscore",
            "type": "pure-token",
            "token": "BYSCORE"
          },
          {
            "name": "bylex",
            "type": "pure-token",
            "token": "BYLEX"
          }
        ]
      },
      {
        "name": "rev",
        "token": "REV",
        "type": "pure-token",
        "optional": true
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "offset",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      }
    ]
  },
  "ZRANK": {
    "summary": "Returns the index of a member in a sorted set ordered by ascending scores.",
    "complexity": "O(log(N))",
    "group": "sorted_set",
    "since": "2.0.0",
    "arity": -3,
    "function": "zrankCommand",
    "history": [
      [
        "7.2.0",
        "Added the optional `WITHSCORE` argument."
      ]
    ],
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "null",
          "description": "Key does not exist or the member does not exist in the sorted set."
        },
        {
          "type": "integer",
          "description": "The rank of the member when 'WITHSCORE' is not used."
        },
        {
          "type": "array",
          "description": "The rank and score of the member when 'WITHSCORE' is used.",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "type": "integer"
            },
            {
              "type": "number"
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string"
      },
      {
        "name": "withscore",
        "token": "WITHSCORE",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "ZREM": {
    "summary": "Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.",
    "complexity": "O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.",
    "group": "sorted_set",
    "since": "1.2.0",
    "arity": -3,
    "function": "zremCommand",
    "history": [
      [
        "2.4.0",
        "Accepts multiple elements."
      ]
    ],
    "command_flags": [
      "WRITE",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The number of members removed from the sorted set, not including non existing members.",
      "type": "integer",
      "minimum": 0
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string",
        "multiple": true
      }
    ]
  },
  "ZREMRANGEBYLEX": {
    "summary": "Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
    "group": "sorted_set",
    "since": "2.8.9",
    "arity": 4,
    "function": "zremrangebylexCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of elements removed."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "name": "max",
        "type": "string"
      }
    ]
  },
  "ZREMRANGEBYRANK": {
    "summary": "Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
    "group": "sorted_set",
    "since": "2.0.0",
    "arity": 4,
    "function": "zremrangebyrankCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of elements removed."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "stop",
        "type": "integer"
      }
    ]
  },
  "ZREMRANGEBYSCORE": {
    "summary": "Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.",
    "group": "sorted_set",
    "since": "1.2.0",
    "arity": 4,
    "function": "zremrangebyscoreCommand",
    "command_flags": [
      "WRITE"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RW",
          "DELETE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "integer",
      "description": "Number of elements removed."
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "min",
        "type": "double"
      },
      {
        "name": "max",
        "type": "double"
      }
    ]
  },
  "ZREVRANGE": {
    "summary": "Returns members in a sorted set within a range of indexes in reverse order.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.",
    "group": "sorted_set",
    "since": "1.2.0",
    "arity": -4,
    "function": "zrevrangeCommand",
    "deprecated_since": "6.2.0",
    "replaced_by": "`ZRANGE` with the `REV` argument",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "List of member elements.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        {
          "description": "List of the members and their scores. Returned in case `WITHSCORES` was used.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "description": "Member.",
                "type": "string"
              },
              {
                "description": "Score.",
                "type": "number"
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "start",
        "type": "integer"
      },
      {
        "name": "stop",
        "type": "integer"
      },
      {
        "name": "withscores",
        "token": "WITHSCORES",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "ZREVRANGEBYLEX": {
    "summary": "Returns members in a sorted set within a lexicographical range in reverse order.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
    "group": "sorted_set",
    "since": "2.8.9",
    "arity": -4,
    "function": "zrevrangebylexCommand",
    "deprecated_since": "6.2.0",
    "replaced_by": "`ZRANGE` with the `REV` and `BYLEX` arguments",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "type": "array",
      "description": "List of the elements in the specified score range.",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "max",
        "type": "string"
      },
      {
        "name": "min",
        "type": "string"
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "offset",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      }
    ]
  },
  "ZREVRANGEBYSCORE": {
    "summary": "Returns members in a sorted set within a range of scores in reverse order.",
    "complexity": "O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).",
    "group": "sorted_set",
    "since": "2.2.0",
    "arity": -4,
    "function": "zrevrangebyscoreCommand",
    "history": [
      [
        "2.1.6",
        "`min` and `max` can be exclusive."
      ]
    ],
    "deprecated_since": "6.2.0",
    "replaced_by": "`ZRANGE` with the `REV` and `BYSCORE` arguments",
    "doc_flags": [
      "DEPRECATED"
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "type": "array",
          "description": "List of the elements in the specified score range, as not WITHSCORES.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "description": "Element."
          }
        },
        {
          "type": "array",
          "description": "List of the elements and their scores in the specified score range, as WITHSCORES used.",
          "uniqueItems": true,
          "items": {
            "type": "array",
            "description": "Tuple of element and its score.",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string",
                "description": "Element."
              },
              {
                "type": "number",
                "description": "Score."
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "max",
        "type": "double"
      },
      {
        "name": "min",
        "type": "double"
      },
      {
        "name": "withscores",
        "token": "WITHSCORES",
        "type": "pure-token",
        "optional": true
      },
      {
        "token": "LIMIT",
        "name": "limit",
        "type": "block",
        "optional": true,
        "arguments": [
          {
            "name": "offset",
            "type": "integer"
          },
          {
            "name": "count",
            "type": "integer"
          }
        ]
      }
    ]
  },
  "ZREVRANK": {
    "summary": "Returns the index of a member in a sorted set ordered by descending scores.",
    "complexity": "O(log(N))",
    "group": "sorted_set",
    "since": "2.0.0",
    "arity": -3,
    "function": "zrevrankCommand",
    "history": [
      [
        "7.2.0",
        "Added the optional `WITHSCORE` argument."
      ]
    ],
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "null",
          "description": "Key does not exist or the member does not exist in the sorted set."
        },
        {
          "type": "integer",
          "description": "The rank of the member when 'WITHSCORE' is not used."
        },
        {
          "type": "array",
          "description": "The rank and score of the member when 'WITHSCORE' is used.",
          "minItems": 2,
          "maxItems": 2,
          "items": [
            {
              "type": "integer"
            },
            {
              "type": "number"
            }
          ]
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string"
      },
      {
        "name": "withscore",
        "token": "WITHSCORE",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "ZSCAN": {
    "summary": "Iterates over members and scores of a sorted set.",
    "complexity": "O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.",
    "group": "sorted_set",
    "since": "2.8.0",
    "arity": -3,
    "function": "zscanCommand",
    "history": [
      [
        "8.0.0",
        "Added noscores option."
      ]
    ],
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "command_tips": [
      "NONDETERMINISTIC_OUTPUT"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "cursor",
        "type": "integer"
      },
      {
        "token": "MATCH",
        "name": "pattern",
        "type": "pattern",
        "optional": true
      },
      {
        "token": "COUNT",
        "name": "count",
        "type": "integer",
        "optional": true
      },
      {
        "token": "NOSCORES",
        "name": "noscores",
        "type": "pure-token",
        "optional": true
      }
    ],
    "reply_schema": {
      "description": "Cursor and scan response in array form.",
      "type": "array",
      "minItems": 2,
      "maxItems": 2,
      "items": [
        {
          "description": "Cursor.",
          "type": "string"
        },
        {
          "description": "List of elements of the sorted set, where each even element is the member, and each odd value is its associated score, or when noscores option is on, a list of members from the sorted set.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    }
  },
  "ZSCORE": {
    "summary": "Returns the score of a member in a sorted set.",
    "complexity": "O(1)",
    "group": "sorted_set",
    "since": "1.2.0",
    "arity": 3,
    "function": "zscoreCommand",
    "command_flags": [
      "READONLY",
      "FAST"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      }
    ],
    "reply_schema": {
      "oneOf": [
        {
          "type": "number",
          "description": "The score of the member (a double precision floating point number). In RESP2, this is returned as string."
        },
        {
          "type": "null",
          "description": "Member does not exist in the sorted set, or key does not exist."
        }
      ]
    },
    "arguments": [
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "member",
        "type": "string"
      }
    ]
  },
  "ZUNION": {
    "summary": "Returns the union of multiple sorted sets.",
    "complexity": "O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
    "group": "sorted_set",
    "since": "6.2.0",
    "arity": -3,
    "function": "zunionCommand",
    "get_keys_function": "zunionInterDiffGetKeys",
    "command_flags": [
      "READONLY"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "anyOf": [
        {
          "description": "The result of union when 'WITHSCORES' is not used.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        {
          "description": "The result of union when 'WITHSCORES' is used.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "array",
            "minItems": 2,
            "maxItems": 2,
            "items": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ]
          }
        }
      ]
    },
    "arguments": [
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 0,
        "multiple": true
      },
      {
        "token": "WEIGHTS",
        "name": "weight",
        "type": "integer",
        "optional": true,
        "multiple": true
      },
      {
        "token": "AGGREGATE",
        "name": "aggregate",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "sum",
            "type": "pure-token",
            "token": "SUM"
          },
          {
            "name": "min",
            "type": "pure-token",
            "token": "MIN"
          },
          {
            "name": "max",
            "type": "pure-token",
            "token": "MAX"
          }
        ]
      },
      {
        "name": "withscores",
        "token": "WITHSCORES",
        "type": "pure-token",
        "optional": true
      }
    ]
  },
  "ZUNIONSTORE": {
    "summary": "Stores the union of multiple sorted sets in a key.",
    "complexity": "O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.",
    "group": "sorted_set",
    "since": "2.0.0",
    "arity": -4,
    "function": "zunionstoreCommand",
    "get_keys_function": "zunionInterDiffStoreGetKeys",
    "command_flags": [
      "WRITE",
      "DENYOOM"
    ],
    "acl_categories": [
      "SORTEDSET"
    ],
    "key_specs": [
      {
        "flags": [
          "OW",
          "UPDATE"
        ],
        "begin_search": {
          "index": {
            "pos": 1
          }
        },
        "find_keys": {
          "range": {
            "lastkey": 0,
            "step": 1,
            "limit": 0
          }
        }
      },
      {
        "flags": [
          "RO",
          "ACCESS"
        ],
        "begin_search": {
          "index": {
            "pos": 2
          }
        },
        "find_keys": {
          "keynum": {
            "keynumidx": 0,
            "firstkey": 1,
            "step": 1
          }
        }
      }
    ],
    "reply_schema": {
      "description": "The number of elements in the resulting sorted set.",
      "type": "integer"
    },
    "arguments": [
      {
        "name": "destination",
        "type": "key",
        "key_spec_index": 0
      },
      {
        "name": "numkeys",
        "type": "integer"
      },
      {
        "name": "key",
        "type": "key",
        "key_spec_index": 1,
        "multiple": true
      },
      {
        "token": "WEIGHTS",
        "name": "weight",
        "type": "integer",
        "optional": true,
        "multiple": true
      },
      {
        "token": "AGGREGATE",
        "name": "aggregate",
        "type": "oneof",
        "optional": true,
        "arguments": [
          {
            "name": "sum",
            "type": "pure-token",
            "token": "SUM"
          },
          {
            "name": "min",
            "type": "pure-token",
            "token": "MIN"
          },
          {
            "name": "max",
            "type": "pure-token",
            "token": "MAX"
          }
        ]
      }
    ]
  }
}
