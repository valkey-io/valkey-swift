//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-redis open source project
//
// Copyright (c) 2023 Apple Inc. and the swift-redis project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-redis project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by RedisCommandsBuilder

import NIOCore
import RESP
import Redis

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

extension RESPCommand {
    /// Executes a server-side Lua script.
    ///
    /// - Documentation: [EVAL](https:/redis.io/docs/latest/commands/eval)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the script that was executed.
    @inlinable
    public static func eval(script: String, key: RedisKey? = nil, arg: String? = nil) -> RESPCommand {
        RESPCommand("EVAL", script, 1, key, arg)
    }

    /// Executes a server-side Lua script.
    ///
    /// - Documentation: [EVAL](https:/redis.io/docs/latest/commands/eval)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the script that was executed.
    @inlinable
    public static func eval(script: String, keys: [RedisKey], args: [String]) -> RESPCommand {
        RESPCommand("EVAL", script, RESPArrayWithCount(keys), args)
    }

    /// Executes a server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA](https:/redis.io/docs/latest/commands/evalsha)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the script that was executed.
    @inlinable
    public static func evalsha(sha1: String, key: RedisKey? = nil, arg: String? = nil) -> RESPCommand {
        RESPCommand("EVALSHA", sha1, 1, key, arg)
    }

    /// Executes a server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA](https:/redis.io/docs/latest/commands/evalsha)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the script that was executed.
    @inlinable
    public static func evalsha(sha1: String, keys: [RedisKey], args: [String]) -> RESPCommand {
        RESPCommand("EVALSHA", sha1, RESPArrayWithCount(keys), args)
    }

    /// Executes a read-only server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA_RO](https:/redis.io/docs/latest/commands/evalsha_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the script that was executed.
    @inlinable
    public static func evalshaRo(sha1: String, key: RedisKey? = nil, arg: String? = nil) -> RESPCommand {
        RESPCommand("EVALSHA_RO", sha1, 1, key, arg)
    }

    /// Executes a read-only server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA_RO](https:/redis.io/docs/latest/commands/evalsha_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the script that was executed.
    @inlinable
    public static func evalshaRo(sha1: String, keys: [RedisKey], args: [String]) -> RESPCommand {
        RESPCommand("EVALSHA_RO", sha1, RESPArrayWithCount(keys), args)
    }

    /// Executes a read-only server-side Lua script.
    ///
    /// - Documentation: [EVAL_RO](https:/redis.io/docs/latest/commands/eval_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the script that was executed.
    @inlinable
    public static func evalRo(script: String, key: RedisKey? = nil, arg: String? = nil) -> RESPCommand {
        RESPCommand("EVAL_RO", script, 1, key, arg)
    }

    /// Executes a read-only server-side Lua script.
    ///
    /// - Documentation: [EVAL_RO](https:/redis.io/docs/latest/commands/eval_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the script that was executed.
    @inlinable
    public static func evalRo(script: String, keys: [RedisKey], args: [String]) -> RESPCommand {
        RESPCommand("EVAL_RO", script, RESPArrayWithCount(keys), args)
    }

    /// Invokes a function.
    ///
    /// - Documentation: [FCALL](https:/redis.io/docs/latest/commands/fcall)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the function that was executed.
    @inlinable
    public static func fcall(function: String, key: RedisKey? = nil, arg: String? = nil) -> RESPCommand {
        RESPCommand("FCALL", function, 1, key, arg)
    }

    /// Invokes a function.
    ///
    /// - Documentation: [FCALL](https:/redis.io/docs/latest/commands/fcall)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the function that was executed.
    @inlinable
    public static func fcall(function: String, keys: [RedisKey], args: [String]) -> RESPCommand {
        RESPCommand("FCALL", function, RESPArrayWithCount(keys), args)
    }

    /// Invokes a read-only function.
    ///
    /// - Documentation: [FCALL_RO](https:/redis.io/docs/latest/commands/fcall_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the function that was executed.
    @inlinable
    public static func fcallRo(function: String, key: RedisKey? = nil, arg: String? = nil) -> RESPCommand {
        RESPCommand("FCALL_RO", function, 1, key, arg)
    }

    /// Invokes a read-only function.
    ///
    /// - Documentation: [FCALL_RO](https:/redis.io/docs/latest/commands/fcall_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Response: The return value depends on the function that was executed.
    @inlinable
    public static func fcallRo(function: String, keys: [RedisKey], args: [String]) -> RESPCommand {
        RESPCommand("FCALL_RO", function, RESPArrayWithCount(keys), args)
    }

    /// Deletes a library and its functions.
    ///
    /// - Documentation: [FUNCTION DELETE](https:/redis.io/docs/latest/commands/function-delete)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @write, @slow, @scripting
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func functionDelete(libraryName: String) -> RESPCommand {
        RESPCommand("FUNCTION", "DELETE", libraryName)
    }

    /// Dumps all libraries into a serialized binary payload.
    ///
    /// - Documentation: [FUNCTION DUMP](https:/redis.io/docs/latest/commands/function-dump)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions
    /// - Categories: @slow, @scripting
    /// - Response: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the serialized payload
    @inlinable
    public static func functionDump() -> RESPCommand {
        RESPCommand("FUNCTION", "DUMP")
    }

    public enum FUNCTIONFLUSHFlushType: RESPRenderable {
        case async
        case sync

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .async: "ASYNC".writeToRESPBuffer(&buffer)
            case .sync: "SYNC".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Deletes all libraries and functions.
    ///
    /// - Documentation: [FUNCTION FLUSH](https:/redis.io/docs/latest/commands/function-flush)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions deleted
    /// - Categories: @write, @slow, @scripting
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func functionFlush(flushType: FUNCTIONFLUSHFlushType? = nil) -> RESPCommand {
        RESPCommand("FUNCTION", "FLUSH", flushType)
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [FUNCTION HELP](https:/redis.io/docs/latest/commands/function-help)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of sub-commands and their descriptions.
    @inlinable
    public static func functionHelp() -> RESPCommand {
        RESPCommand("FUNCTION", "HELP")
    }

    /// Terminates a function during execution.
    ///
    /// - Documentation: [FUNCTION KILL](https:/redis.io/docs/latest/commands/function-kill)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func functionKill() -> RESPCommand {
        RESPCommand("FUNCTION", "KILL")
    }

    /// Returns information about all libraries.
    ///
    /// - Documentation: [FUNCTION LIST](https:/redis.io/docs/latest/commands/function-list)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions
    /// - Categories: @slow, @scripting
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): information about functions and libraries.
    @inlinable
    public static func functionList(libraryNamePattern: String? = nil, withcode: Bool = false) -> RESPCommand {
        RESPCommand("FUNCTION", "LIST", RESPWithToken("LIBRARYNAME", libraryNamePattern), RedisPureToken("WITHCODE", withcode))
    }

    /// Creates a library.
    ///
    /// - Documentation: [FUNCTION LOAD](https:/redis.io/docs/latest/commands/function-load)
    /// - Version: 7.0.0
    /// - Complexity: O(1) (considering compilation time is redundant)
    /// - Categories: @write, @slow, @scripting
    /// - Response: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the library name that was loaded.
    @inlinable
    public static func functionLoad(replace: Bool = false, functionCode: String) -> RESPCommand {
        RESPCommand("FUNCTION", "LOAD", RedisPureToken("REPLACE", replace), functionCode)
    }

    public enum FUNCTIONRESTOREPolicy: RESPRenderable {
        case flush
        case append
        case replace

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .flush: "FLUSH".writeToRESPBuffer(&buffer)
            case .append: "APPEND".writeToRESPBuffer(&buffer)
            case .replace: "REPLACE".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Restores all libraries from a payload.
    ///
    /// - Documentation: [FUNCTION RESTORE](https:/redis.io/docs/latest/commands/function-restore)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions on the payload
    /// - Categories: @write, @slow, @scripting
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func functionRestore(serializedValue: String, policy: FUNCTIONRESTOREPolicy? = nil) -> RESPCommand {
        RESPCommand("FUNCTION", "RESTORE", serializedValue, policy)
    }

    /// Returns information about a function during execution.
    ///
    /// - Documentation: [FUNCTION STATS](https:/redis.io/docs/latest/commands/function-stats)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Response: [Map](https:/redis.io/docs/reference/protocol-spec#maps): information about the function that's currently running and information about the available execution engines.
    @inlinable
    public static func functionStats() -> RESPCommand {
        RESPCommand("FUNCTION", "STATS")
    }

    public enum SCRIPTDEBUGMode: RESPRenderable {
        case yes
        case sync
        case no

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .yes: "YES".writeToRESPBuffer(&buffer)
            case .sync: "SYNC".writeToRESPBuffer(&buffer)
            case .no: "NO".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Sets the debug mode of server-side Lua scripts.
    ///
    /// - Documentation: [SCRIPT DEBUG](https:/redis.io/docs/latest/commands/script-debug)
    /// - Version: 3.2.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func scriptDebug(mode: SCRIPTDEBUGMode) -> RESPCommand {
        RESPCommand("SCRIPT", "DEBUG", mode)
    }

    /// Determines whether server-side Lua scripts exist in the script cache.
    ///
    /// - Documentation: [SCRIPT EXISTS](https:/redis.io/docs/latest/commands/script-exists)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).
    /// - Categories: @slow, @scripting
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): an array of integers that correspond to the specified SHA1 digest arguments.
    @inlinable
    public static func scriptExists(sha1: String) -> RESPCommand {
        RESPCommand("SCRIPT", "EXISTS", sha1)
    }

    /// Determines whether server-side Lua scripts exist in the script cache.
    ///
    /// - Documentation: [SCRIPT EXISTS](https:/redis.io/docs/latest/commands/script-exists)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).
    /// - Categories: @slow, @scripting
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): an array of integers that correspond to the specified SHA1 digest arguments.
    @inlinable
    public static func scriptExists(sha1s: [String]) -> RESPCommand {
        RESPCommand("SCRIPT", "EXISTS", sha1s)
    }

    public enum SCRIPTFLUSHFlushType: RESPRenderable {
        case async
        case sync

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .async: "ASYNC".writeToRESPBuffer(&buffer)
            case .sync: "SYNC".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Removes all server-side Lua scripts from the script cache.
    ///
    /// - Documentation: [SCRIPT FLUSH](https:/redis.io/docs/latest/commands/script-flush)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the number of scripts in cache
    /// - Categories: @slow, @scripting
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func scriptFlush(flushType: SCRIPTFLUSHFlushType? = nil) -> RESPCommand {
        RESPCommand("SCRIPT", "FLUSH", flushType)
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [SCRIPT HELP](https:/redis.io/docs/latest/commands/script-help)
    /// - Version: 5.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of sub-commands and their descriptions.
    @inlinable
    public static func scriptHelp() -> RESPCommand {
        RESPCommand("SCRIPT", "HELP")
    }

    /// Terminates a server-side Lua script during execution.
    ///
    /// - Documentation: [SCRIPT KILL](https:/redis.io/docs/latest/commands/script-kill)
    /// - Version: 2.6.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func scriptKill() -> RESPCommand {
        RESPCommand("SCRIPT", "KILL")
    }

    /// Loads a server-side Lua script to the script cache.
    ///
    /// - Documentation: [SCRIPT LOAD](https:/redis.io/docs/latest/commands/script-load)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the length in bytes of the script body.
    /// - Categories: @slow, @scripting
    /// - Response: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the SHA1 digest of the script added into the script cache.
    @inlinable
    public static func scriptLoad(script: String) -> RESPCommand {
        RESPCommand("SCRIPT", "LOAD", script)
    }

}

extension RedisConnection {
    /// Executes a server-side Lua script.
    ///
    /// - Documentation: [EVAL](https:/redis.io/docs/latest/commands/eval)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func eval(script: String, key: RedisKey? = nil, arg: String? = nil) async throws -> RESPToken {
        try await send("EVAL", script, 1, key, arg)
    }

    /// Executes a server-side Lua script.
    ///
    /// - Documentation: [EVAL](https:/redis.io/docs/latest/commands/eval)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func eval(script: String, keys: [RedisKey], args: [String]) async throws -> RESPToken {
        try await send("EVAL", script, RESPArrayWithCount(keys), args)
    }

    /// Executes a server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA](https:/redis.io/docs/latest/commands/evalsha)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalsha(sha1: String, key: RedisKey? = nil, arg: String? = nil) async throws -> RESPToken {
        try await send("EVALSHA", sha1, 1, key, arg)
    }

    /// Executes a server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA](https:/redis.io/docs/latest/commands/evalsha)
    /// - Version: 2.6.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalsha(sha1: String, keys: [RedisKey], args: [String]) async throws -> RESPToken {
        try await send("EVALSHA", sha1, RESPArrayWithCount(keys), args)
    }

    /// Executes a read-only server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA_RO](https:/redis.io/docs/latest/commands/evalsha_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalshaRo(sha1: String, key: RedisKey? = nil, arg: String? = nil) async throws -> RESPToken {
        try await send("EVALSHA_RO", sha1, 1, key, arg)
    }

    /// Executes a read-only server-side Lua script by SHA1 digest.
    ///
    /// - Documentation: [EVALSHA_RO](https:/redis.io/docs/latest/commands/evalsha_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalshaRo(sha1: String, keys: [RedisKey], args: [String]) async throws -> RESPToken {
        try await send("EVALSHA_RO", sha1, RESPArrayWithCount(keys), args)
    }

    /// Executes a read-only server-side Lua script.
    ///
    /// - Documentation: [EVAL_RO](https:/redis.io/docs/latest/commands/eval_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalRo(script: String, key: RedisKey? = nil, arg: String? = nil) async throws -> RESPToken {
        try await send("EVAL_RO", script, 1, key, arg)
    }

    /// Executes a read-only server-side Lua script.
    ///
    /// - Documentation: [EVAL_RO](https:/redis.io/docs/latest/commands/eval_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the script that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the script that was executed.
    @inlinable
    public func evalRo(script: String, keys: [RedisKey], args: [String]) async throws -> RESPToken {
        try await send("EVAL_RO", script, RESPArrayWithCount(keys), args)
    }

    /// Invokes a function.
    ///
    /// - Documentation: [FCALL](https:/redis.io/docs/latest/commands/fcall)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the function that was executed.
    @inlinable
    public func fcall(function: String, key: RedisKey? = nil, arg: String? = nil) async throws -> RESPToken {
        try await send("FCALL", function, 1, key, arg)
    }

    /// Invokes a function.
    ///
    /// - Documentation: [FCALL](https:/redis.io/docs/latest/commands/fcall)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the function that was executed.
    @inlinable
    public func fcall(function: String, keys: [RedisKey], args: [String]) async throws -> RESPToken {
        try await send("FCALL", function, RESPArrayWithCount(keys), args)
    }

    /// Invokes a read-only function.
    ///
    /// - Documentation: [FCALL_RO](https:/redis.io/docs/latest/commands/fcall_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the function that was executed.
    @inlinable
    public func fcallRo(function: String, key: RedisKey? = nil, arg: String? = nil) async throws -> RESPToken {
        try await send("FCALL_RO", function, 1, key, arg)
    }

    /// Invokes a read-only function.
    ///
    /// - Documentation: [FCALL_RO](https:/redis.io/docs/latest/commands/fcall_ro)
    /// - Version: 7.0.0
    /// - Complexity: Depends on the function that is executed.
    /// - Categories: @slow, @scripting
    /// - Returns: The return value depends on the function that was executed.
    @inlinable
    public func fcallRo(function: String, keys: [RedisKey], args: [String]) async throws -> RESPToken {
        try await send("FCALL_RO", function, RESPArrayWithCount(keys), args)
    }

    /// Deletes a library and its functions.
    ///
    /// - Documentation: [FUNCTION DELETE](https:/redis.io/docs/latest/commands/function-delete)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @write, @slow, @scripting
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func functionDelete(libraryName: String) async throws {
        try await send("FUNCTION", "DELETE", libraryName)
    }

    /// Dumps all libraries into a serialized binary payload.
    ///
    /// - Documentation: [FUNCTION DUMP](https:/redis.io/docs/latest/commands/function-dump)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions
    /// - Categories: @slow, @scripting
    /// - Returns: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the serialized payload
    @inlinable
    public func functionDump() async throws -> String {
        try await send("FUNCTION", "DUMP").converting()
    }

    /// Deletes all libraries and functions.
    ///
    /// - Documentation: [FUNCTION FLUSH](https:/redis.io/docs/latest/commands/function-flush)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions deleted
    /// - Categories: @write, @slow, @scripting
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func functionFlush(flushType: RESPCommand.FUNCTIONFLUSHFlushType? = nil) async throws {
        try await send("FUNCTION", "FLUSH", flushType)
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [FUNCTION HELP](https:/redis.io/docs/latest/commands/function-help)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of sub-commands and their descriptions.
    @inlinable
    public func functionHelp() async throws -> [RESPToken] {
        try await send("FUNCTION", "HELP").converting()
    }

    /// Terminates a function during execution.
    ///
    /// - Documentation: [FUNCTION KILL](https:/redis.io/docs/latest/commands/function-kill)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func functionKill() async throws {
        try await send("FUNCTION", "KILL")
    }

    /// Returns information about all libraries.
    ///
    /// - Documentation: [FUNCTION LIST](https:/redis.io/docs/latest/commands/function-list)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): information about functions and libraries.
    @inlinable
    public func functionList(libraryNamePattern: String? = nil, withcode: Bool = false) async throws -> [RESPToken] {
        try await send("FUNCTION", "LIST", RESPWithToken("LIBRARYNAME", libraryNamePattern), RedisPureToken("WITHCODE", withcode)).converting()
    }

    /// Creates a library.
    ///
    /// - Documentation: [FUNCTION LOAD](https:/redis.io/docs/latest/commands/function-load)
    /// - Version: 7.0.0
    /// - Complexity: O(1) (considering compilation time is redundant)
    /// - Categories: @write, @slow, @scripting
    /// - Returns: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the library name that was loaded.
    @inlinable
    public func functionLoad(replace: Bool = false, functionCode: String) async throws -> String {
        try await send("FUNCTION", "LOAD", RedisPureToken("REPLACE", replace), functionCode).converting()
    }

    /// Restores all libraries from a payload.
    ///
    /// - Documentation: [FUNCTION RESTORE](https:/redis.io/docs/latest/commands/function-restore)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the number of functions on the payload
    /// - Categories: @write, @slow, @scripting
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func functionRestore(serializedValue: String, policy: RESPCommand.FUNCTIONRESTOREPolicy? = nil) async throws {
        try await send("FUNCTION", "RESTORE", serializedValue, policy)
    }

    /// Returns information about a function during execution.
    ///
    /// - Documentation: [FUNCTION STATS](https:/redis.io/docs/latest/commands/function-stats)
    /// - Version: 7.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Map](https:/redis.io/docs/reference/protocol-spec#maps): information about the function that's currently running and information about the available execution engines.
    @inlinable
    public func functionStats() async throws -> RESPToken {
        try await send("FUNCTION", "STATS")
    }

    /// Sets the debug mode of server-side Lua scripts.
    ///
    /// - Documentation: [SCRIPT DEBUG](https:/redis.io/docs/latest/commands/script-debug)
    /// - Version: 3.2.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func scriptDebug(mode: RESPCommand.SCRIPTDEBUGMode) async throws {
        try await send("SCRIPT", "DEBUG", mode)
    }

    /// Determines whether server-side Lua scripts exist in the script cache.
    ///
    /// - Documentation: [SCRIPT EXISTS](https:/redis.io/docs/latest/commands/script-exists)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): an array of integers that correspond to the specified SHA1 digest arguments.
    @inlinable
    public func scriptExists(sha1: String) async throws -> [RESPToken] {
        try await send("SCRIPT", "EXISTS", sha1).converting()
    }

    /// Determines whether server-side Lua scripts exist in the script cache.
    ///
    /// - Documentation: [SCRIPT EXISTS](https:/redis.io/docs/latest/commands/script-exists)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): an array of integers that correspond to the specified SHA1 digest arguments.
    @inlinable
    public func scriptExists(sha1s: [String]) async throws -> [RESPToken] {
        try await send("SCRIPT", "EXISTS", sha1s).converting()
    }

    /// Removes all server-side Lua scripts from the script cache.
    ///
    /// - Documentation: [SCRIPT FLUSH](https:/redis.io/docs/latest/commands/script-flush)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the number of scripts in cache
    /// - Categories: @slow, @scripting
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func scriptFlush(flushType: RESPCommand.SCRIPTFLUSHFlushType? = nil) async throws {
        try await send("SCRIPT", "FLUSH", flushType)
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [SCRIPT HELP](https:/redis.io/docs/latest/commands/script-help)
    /// - Version: 5.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of sub-commands and their descriptions.
    @inlinable
    public func scriptHelp() async throws -> [RESPToken] {
        try await send("SCRIPT", "HELP").converting()
    }

    /// Terminates a server-side Lua script during execution.
    ///
    /// - Documentation: [SCRIPT KILL](https:/redis.io/docs/latest/commands/script-kill)
    /// - Version: 2.6.0
    /// - Complexity: O(1)
    /// - Categories: @slow, @scripting
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func scriptKill() async throws {
        try await send("SCRIPT", "KILL")
    }

    /// Loads a server-side Lua script to the script cache.
    ///
    /// - Documentation: [SCRIPT LOAD](https:/redis.io/docs/latest/commands/script-load)
    /// - Version: 2.6.0
    /// - Complexity: O(N) with N being the length in bytes of the script body.
    /// - Categories: @slow, @scripting
    /// - Returns: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the SHA1 digest of the script added into the script cache.
    @inlinable
    public func scriptLoad(script: String) async throws -> String {
        try await send("SCRIPT", "LOAD", script).converting()
    }

}
