//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-redis open source project
//
// Copyright (c) 2023 Apple Inc. and the swift-redis project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-redis project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by RedisCommandsBuilder

import NIOCore
import RESP
import Redis

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

extension RESPCommand {
    /// Discards a transaction.
    ///
    /// - Documentation: [DISCARD](https:/redis.io/docs/latest/commands/discard)
    /// - Version: 2.0.0
    /// - Complexity: O(N), when N is the number of queued commands
    /// - Categories: @fast, @transaction
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func discard() -> RESPCommand {
        RESPCommand("DISCARD")
    }

    /// Executes all commands in a transaction.
    ///
    /// - Documentation: [EXEC](https:/redis.io/docs/latest/commands/exec)
    /// - Version: 1.2.0
    /// - Complexity: Depends on commands in the transaction
    /// - Categories: @slow, @transaction
    /// - Response: One of the following:
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): each element being the reply to each of the commands in the atomic transaction.
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): the transaction was aborted because a `WATCH`ed key was touched.
    @inlinable
    public static func exec() -> RESPCommand {
        RESPCommand("EXEC")
    }

    /// Starts a transaction.
    ///
    /// - Documentation: [MULTI](https:/redis.io/docs/latest/commands/multi)
    /// - Version: 1.2.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @transaction
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func multi() -> RESPCommand {
        RESPCommand("MULTI")
    }

    /// Forgets about watched keys of a transaction.
    ///
    /// - Documentation: [UNWATCH](https:/redis.io/docs/latest/commands/unwatch)
    /// - Version: 2.2.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @transaction
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func unwatch() -> RESPCommand {
        RESPCommand("UNWATCH")
    }

    /// Monitors changes to keys to determine the execution of a transaction.
    ///
    /// - Documentation: [WATCH](https:/redis.io/docs/latest/commands/watch)
    /// - Version: 2.2.0
    /// - Complexity: O(1) for every key.
    /// - Categories: @fast, @transaction
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func watch(key: RedisKey) -> RESPCommand {
        RESPCommand("WATCH", key)
    }

    /// Monitors changes to keys to determine the execution of a transaction.
    ///
    /// - Documentation: [WATCH](https:/redis.io/docs/latest/commands/watch)
    /// - Version: 2.2.0
    /// - Complexity: O(1) for every key.
    /// - Categories: @fast, @transaction
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func watch(keys: [RedisKey]) -> RESPCommand {
        RESPCommand("WATCH", keys)
    }

}

extension RedisConnection {
    /// Discards a transaction.
    ///
    /// - Documentation: [DISCARD](https:/redis.io/docs/latest/commands/discard)
    /// - Version: 2.0.0
    /// - Complexity: O(N), when N is the number of queued commands
    /// - Categories: @fast, @transaction
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func discard() async throws {
        try await send("DISCARD")
    }

    /// Executes all commands in a transaction.
    ///
    /// - Documentation: [EXEC](https:/redis.io/docs/latest/commands/exec)
    /// - Version: 1.2.0
    /// - Complexity: Depends on commands in the transaction
    /// - Categories: @slow, @transaction
    /// - Returns: One of the following:
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): each element being the reply to each of the commands in the atomic transaction.
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): the transaction was aborted because a `WATCH`ed key was touched.
    @inlinable
    public func exec() async throws -> [RESPToken]? {
        try await send("EXEC").converting()
    }

    /// Starts a transaction.
    ///
    /// - Documentation: [MULTI](https:/redis.io/docs/latest/commands/multi)
    /// - Version: 1.2.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @transaction
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func multi() async throws {
        try await send("MULTI")
    }

    /// Forgets about watched keys of a transaction.
    ///
    /// - Documentation: [UNWATCH](https:/redis.io/docs/latest/commands/unwatch)
    /// - Version: 2.2.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @transaction
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func unwatch() async throws {
        try await send("UNWATCH")
    }

    /// Monitors changes to keys to determine the execution of a transaction.
    ///
    /// - Documentation: [WATCH](https:/redis.io/docs/latest/commands/watch)
    /// - Version: 2.2.0
    /// - Complexity: O(1) for every key.
    /// - Categories: @fast, @transaction
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func watch(key: RedisKey) async throws {
        try await send("WATCH", key)
    }

    /// Monitors changes to keys to determine the execution of a transaction.
    ///
    /// - Documentation: [WATCH](https:/redis.io/docs/latest/commands/watch)
    /// - Version: 2.2.0
    /// - Complexity: O(1) for every key.
    /// - Categories: @fast, @transaction
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func watch(keys: [RedisKey]) async throws {
        try await send("WATCH", keys)
    }

}
