//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-redis open source project
//
// Copyright (c) 2023 Apple Inc. and the swift-redis project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-redis project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by RedisCommandsBuilder

import NIOCore
import RESP
import Redis

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

extension RESPCommand {
    /// Signals that a cluster client is following an -ASK redirect.
    ///
    /// - Documentation: [ASKING](https:/redis.io/docs/latest/commands/asking)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func asking() -> RESPCommand {
        RESPCommand("ASKING")
    }

    /// Assigns new hash slots to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTS](https:/redis.io/docs/latest/commands/cluster-addslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterAddslots(slot: Int) -> RESPCommand {
        RESPCommand("CLUSTER", "ADDSLOTS", slot)
    }

    /// Assigns new hash slots to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTS](https:/redis.io/docs/latest/commands/cluster-addslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterAddslots(slots: [Int]) -> RESPCommand {
        RESPCommand("CLUSTER", "ADDSLOTS", slots)
    }

    public struct CLUSTERADDSLOTSRANGERange: RESPRenderable {
        @usableFromInline let startSlot: Int
        @usableFromInline let endSlot: Int

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += startSlot.writeToRESPBuffer(&buffer)
            count += endSlot.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Assigns new hash slot ranges to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTSRANGE](https:/redis.io/docs/latest/commands/cluster-addslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterAddslotsrange(range: CLUSTERADDSLOTSRANGERange) -> RESPCommand {
        RESPCommand("CLUSTER", "ADDSLOTSRANGE", range)
    }

    /// Assigns new hash slot ranges to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTSRANGE](https:/redis.io/docs/latest/commands/cluster-addslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterAddslotsrange(ranges: [CLUSTERADDSLOTSRANGERange]) -> RESPCommand {
        RESPCommand("CLUSTER", "ADDSLOTSRANGE", ranges)
    }

    /// Advances the cluster config epoch.
    ///
    /// - Documentation: [CLUSTER BUMPEPOCH](https:/redis.io/docs/latest/commands/cluster-bumpepoch)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: One of the following:
    ///     * [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): `BUMPED` if the epoch was incremented.
    ///     * [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): `STILL` if the node already has the greatest configured epoch in the cluster.
    @inlinable
    public static func clusterBumpepoch() -> RESPCommand {
        RESPCommand("CLUSTER", "BUMPEPOCH")
    }

    /// Returns the number of active failure reports active for a node.
    ///
    /// - Documentation: [CLUSTER COUNT-FAILURE-REPORTS](https:/redis.io/docs/latest/commands/cluster-count-failure-reports)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of failure reports
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of active failure reports for the node.
    @inlinable
    public static func clusterCountFailureReports(nodeId: String) -> RESPCommand {
        RESPCommand("CLUSTER", "COUNT-FAILURE-REPORTS", nodeId)
    }

    /// Returns the number of keys in a hash slot.
    ///
    /// - Documentation: [CLUSTER COUNTKEYSINSLOT](https:/redis.io/docs/latest/commands/cluster-countkeysinslot)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): The number of keys in the specified hash slot, or an error if the hash slot is invalid.
    @inlinable
    public static func clusterCountkeysinslot(slot: Int) -> RESPCommand {
        RESPCommand("CLUSTER", "COUNTKEYSINSLOT", slot)
    }

    /// Sets hash slots as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTS](https:/redis.io/docs/latest/commands/cluster-delslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterDelslots(slot: Int) -> RESPCommand {
        RESPCommand("CLUSTER", "DELSLOTS", slot)
    }

    /// Sets hash slots as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTS](https:/redis.io/docs/latest/commands/cluster-delslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterDelslots(slots: [Int]) -> RESPCommand {
        RESPCommand("CLUSTER", "DELSLOTS", slots)
    }

    public struct CLUSTERDELSLOTSRANGERange: RESPRenderable {
        @usableFromInline let startSlot: Int
        @usableFromInline let endSlot: Int

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += startSlot.writeToRESPBuffer(&buffer)
            count += endSlot.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Sets hash slot ranges as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTSRANGE](https:/redis.io/docs/latest/commands/cluster-delslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterDelslotsrange(range: CLUSTERDELSLOTSRANGERange) -> RESPCommand {
        RESPCommand("CLUSTER", "DELSLOTSRANGE", range)
    }

    /// Sets hash slot ranges as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTSRANGE](https:/redis.io/docs/latest/commands/cluster-delslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterDelslotsrange(ranges: [CLUSTERDELSLOTSRANGERange]) -> RESPCommand {
        RESPCommand("CLUSTER", "DELSLOTSRANGE", ranges)
    }

    public enum CLUSTERFAILOVEROptions: RESPRenderable {
        case force
        case takeover

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .force: "FORCE".writeToRESPBuffer(&buffer)
            case .takeover: "TAKEOVER".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Forces a replica to perform a manual failover of its master.
    ///
    /// - Documentation: [CLUSTER FAILOVER](https:/redis.io/docs/latest/commands/cluster-failover)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was accepted and a manual failover is going to be attempted. An error if the operation cannot be executed, for example if the client is connected to a node that is already a master.
    @inlinable
    public static func clusterFailover(options: CLUSTERFAILOVEROptions? = nil) -> RESPCommand {
        RESPCommand("CLUSTER", "FAILOVER", options)
    }

    /// Deletes all slots information from a node.
    ///
    /// - Documentation: [CLUSTER FLUSHSLOTS](https:/redis.io/docs/latest/commands/cluster-flushslots)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func clusterFlushslots() -> RESPCommand {
        RESPCommand("CLUSTER", "FLUSHSLOTS")
    }

    /// Removes a node from the nodes table.
    ///
    /// - Documentation: [CLUSTER FORGET](https:/redis.io/docs/latest/commands/cluster-forget)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was executed successfully. Otherwise an error is returned.
    @inlinable
    public static func clusterForget(nodeId: String) -> RESPCommand {
        RESPCommand("CLUSTER", "FORGET", nodeId)
    }

    /// Returns the key names in a hash slot.
    ///
    /// - Documentation: [CLUSTER GETKEYSINSLOT](https:/redis.io/docs/latest/commands/cluster-getkeysinslot)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of requested keys
    /// - Categories: @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): an array with up to count elements.
    @inlinable
    public static func clusterGetkeysinslot(slot: Int, count: Int) -> RESPCommand {
        RESPCommand("CLUSTER", "GETKEYSINSLOT", slot, count)
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [CLUSTER HELP](https:/redis.io/docs/latest/commands/cluster-help)
    /// - Version: 5.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of subcommands and their descriptions.
    @inlinable
    public static func clusterHelp() -> RESPCommand {
        RESPCommand("CLUSTER", "HELP")
    }

    /// Returns information about the state of a node.
    ///
    /// - Documentation: [CLUSTER INFO](https:/redis.io/docs/latest/commands/cluster-info)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Response: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): A map between named fields and values in the form of <field>:<value> lines separated by newlines composed by the two bytes CRLF
    @inlinable
    public static func clusterInfo() -> RESPCommand {
        RESPCommand("CLUSTER", "INFO")
    }

    /// Returns the hash slot for a key.
    ///
    /// - Documentation: [CLUSTER KEYSLOT](https:/redis.io/docs/latest/commands/cluster-keyslot)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of bytes in the key
    /// - Categories: @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): The hash slot number for the specified key
    @inlinable
    public static func clusterKeyslot(key: String) -> RESPCommand {
        RESPCommand("CLUSTER", "KEYSLOT", key)
    }

    /// Returns a list of all TCP links to and from peer nodes.
    ///
    /// - Documentation: [CLUSTER LINKS](https:/redis.io/docs/latest/commands/cluster-links)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): an array of [Map](https:/redis.io/docs/reference/protocol-spec#maps) where each map contains various attributes and their values of a cluster link.
    @inlinable
    public static func clusterLinks() -> RESPCommand {
        RESPCommand("CLUSTER", "LINKS")
    }

    /// Forces a node to handshake with another node.
    ///
    /// - Documentation: [CLUSTER MEET](https:/redis.io/docs/latest/commands/cluster-meet)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. If the address or port specified are invalid an error is returned.
    @inlinable
    public static func clusterMeet(ip: String, port: Int, clusterBusPort: Int? = nil) -> RESPCommand {
        RESPCommand("CLUSTER", "MEET", ip, port, clusterBusPort)
    }

    /// Returns the ID of a node.
    ///
    /// - Documentation: [CLUSTER MYID](https:/redis.io/docs/latest/commands/cluster-myid)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Response: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the node ID.
    @inlinable
    public static func clusterMyid() -> RESPCommand {
        RESPCommand("CLUSTER", "MYID")
    }

    /// Returns the shard ID of a node.
    ///
    /// - Documentation: [CLUSTER MYSHARDID](https:/redis.io/docs/latest/commands/cluster-myshardid)
    /// - Version: 7.2.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Response: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the node's shard ID.
    @inlinable
    public static func clusterMyshardid() -> RESPCommand {
        RESPCommand("CLUSTER", "MYSHARDID")
    }

    /// Returns the cluster configuration for a node.
    ///
    /// - Documentation: [CLUSTER NODES](https:/redis.io/docs/latest/commands/cluster-nodes)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Response: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the serialized cluster configuration.
    @inlinable
    public static func clusterNodes() -> RESPCommand {
        RESPCommand("CLUSTER", "NODES")
    }

    /// Lists the replica nodes of a master node.
    ///
    /// - Documentation: [CLUSTER REPLICAS](https:/redis.io/docs/latest/commands/cluster-replicas)
    /// - Version: 5.0.0
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of replica nodes replicating from the specified master node provided in the same format used by `CLUSTER NODES`.
    @inlinable
    public static func clusterReplicas(nodeId: String) -> RESPCommand {
        RESPCommand("CLUSTER", "REPLICAS", nodeId)
    }

    /// Configure a node as replica of a master node.
    ///
    /// - Documentation: [CLUSTER REPLICATE](https:/redis.io/docs/latest/commands/cluster-replicate)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterReplicate(nodeId: String) -> RESPCommand {
        RESPCommand("CLUSTER", "REPLICATE", nodeId)
    }

    public enum CLUSTERRESETResetType: RESPRenderable {
        case hard
        case soft

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .hard: "HARD".writeToRESPBuffer(&buffer)
            case .soft: "SOFT".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Resets a node.
    ///
    /// - Documentation: [CLUSTER RESET](https:/redis.io/docs/latest/commands/cluster-reset)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterReset(resetType: CLUSTERRESETResetType? = nil) -> RESPCommand {
        RESPCommand("CLUSTER", "RESET", resetType)
    }

    /// Forces a node to save the cluster configuration to disk.
    ///
    /// - Documentation: [CLUSTER SAVECONFIG](https:/redis.io/docs/latest/commands/cluster-saveconfig)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterSaveconfig() -> RESPCommand {
        RESPCommand("CLUSTER", "SAVECONFIG")
    }

    /// Sets the configuration epoch for a new node.
    ///
    /// - Documentation: [CLUSTER SET-CONFIG-EPOCH](https:/redis.io/docs/latest/commands/cluster-set-config-epoch)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterSetConfigEpoch(configEpoch: Int) -> RESPCommand {
        RESPCommand("CLUSTER", "SET-CONFIG-EPOCH", configEpoch)
    }

    public enum CLUSTERSETSLOTSubcommand: RESPRenderable {
        case importing(String)
        case migrating(String)
        case node(String)
        case stable

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .importing(let importing): RESPWithToken("IMPORTING", importing).writeToRESPBuffer(&buffer)
            case .migrating(let migrating): RESPWithToken("MIGRATING", migrating).writeToRESPBuffer(&buffer)
            case .node(let node): RESPWithToken("NODE", node).writeToRESPBuffer(&buffer)
            case .stable: "STABLE".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Binds a hash slot to a node.
    ///
    /// - Documentation: [CLUSTER SETSLOT](https:/redis.io/docs/latest/commands/cluster-setslot)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): all the sub-commands return `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public static func clusterSetslot(slot: Int, subcommand: CLUSTERSETSLOTSubcommand) -> RESPCommand {
        RESPCommand("CLUSTER", "SETSLOT", slot, subcommand)
    }

    /// Returns the mapping of cluster slots to shards.
    ///
    /// - Documentation: [CLUSTER SHARDS](https:/redis.io/docs/latest/commands/cluster-shards)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of cluster nodes
    /// - Categories: @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a nested list of [Map](https:/redis.io/docs/reference/protocol-spec#maps) of hash ranges and shard nodes describing individual shards.
    @inlinable
    public static func clusterShards() -> RESPCommand {
        RESPCommand("CLUSTER", "SHARDS")
    }

    /// Lists the replica nodes of a master node.
    ///
    /// - Documentation: [CLUSTER SLAVES](https:/redis.io/docs/latest/commands/cluster-slaves)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Categories: @admin, @slow, @dangerous
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of replica nodes replicating from the specified master node provided in the same format used by `CLUSTER NODES`.
    @inlinable
    public static func clusterSlaves(nodeId: String) -> RESPCommand {
        RESPCommand("CLUSTER", "SLAVES", nodeId)
    }

    /// Returns the mapping of cluster slots to nodes.
    ///
    /// - Documentation: [CLUSTER SLOTS](https:/redis.io/docs/latest/commands/cluster-slots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): nested list of slot ranges with networking information.
    @inlinable
    public static func clusterSlots() -> RESPCommand {
        RESPCommand("CLUSTER", "SLOTS")
    }

    /// Enables read-only queries for a connection to a Redis Cluster replica node.
    ///
    /// - Documentation: [READONLY](https:/redis.io/docs/latest/commands/readonly)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func readonly() -> RESPCommand {
        RESPCommand("READONLY")
    }

    /// Enables read-write queries for a connection to a Reids Cluster replica node.
    ///
    /// - Documentation: [READWRITE](https:/redis.io/docs/latest/commands/readwrite)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Response: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public static func readwrite() -> RESPCommand {
        RESPCommand("READWRITE")
    }

}

extension RedisConnection {
    /// Signals that a cluster client is following an -ASK redirect.
    ///
    /// - Documentation: [ASKING](https:/redis.io/docs/latest/commands/asking)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func asking() async throws {
        try await send("ASKING")
    }

    /// Assigns new hash slots to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTS](https:/redis.io/docs/latest/commands/cluster-addslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterAddslots(slot: Int) async throws {
        try await send("CLUSTER", "ADDSLOTS", slot)
    }

    /// Assigns new hash slots to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTS](https:/redis.io/docs/latest/commands/cluster-addslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterAddslots(slots: [Int]) async throws {
        try await send("CLUSTER", "ADDSLOTS", slots)
    }

    /// Assigns new hash slot ranges to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTSRANGE](https:/redis.io/docs/latest/commands/cluster-addslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterAddslotsrange(range: RESPCommand.CLUSTERADDSLOTSRANGERange) async throws {
        try await send("CLUSTER", "ADDSLOTSRANGE", range)
    }

    /// Assigns new hash slot ranges to a node.
    ///
    /// - Documentation: [CLUSTER ADDSLOTSRANGE](https:/redis.io/docs/latest/commands/cluster-addslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterAddslotsrange(ranges: [RESPCommand.CLUSTERADDSLOTSRANGERange]) async throws {
        try await send("CLUSTER", "ADDSLOTSRANGE", ranges)
    }

    /// Advances the cluster config epoch.
    ///
    /// - Documentation: [CLUSTER BUMPEPOCH](https:/redis.io/docs/latest/commands/cluster-bumpepoch)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: One of the following:
    ///     * [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): `BUMPED` if the epoch was incremented.
    ///     * [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): `STILL` if the node already has the greatest configured epoch in the cluster.
    @inlinable
    public func clusterBumpepoch() async throws -> String {
        try await send("CLUSTER", "BUMPEPOCH").converting()
    }

    /// Returns the number of active failure reports active for a node.
    ///
    /// - Documentation: [CLUSTER COUNT-FAILURE-REPORTS](https:/redis.io/docs/latest/commands/cluster-count-failure-reports)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of failure reports
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of active failure reports for the node.
    @inlinable
    public func clusterCountFailureReports(nodeId: String) async throws -> Int {
        try await send("CLUSTER", "COUNT-FAILURE-REPORTS", nodeId).converting()
    }

    /// Returns the number of keys in a hash slot.
    ///
    /// - Documentation: [CLUSTER COUNTKEYSINSLOT](https:/redis.io/docs/latest/commands/cluster-countkeysinslot)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): The number of keys in the specified hash slot, or an error if the hash slot is invalid.
    @inlinable
    public func clusterCountkeysinslot(slot: Int) async throws -> Int {
        try await send("CLUSTER", "COUNTKEYSINSLOT", slot).converting()
    }

    /// Sets hash slots as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTS](https:/redis.io/docs/latest/commands/cluster-delslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterDelslots(slot: Int) async throws {
        try await send("CLUSTER", "DELSLOTS", slot)
    }

    /// Sets hash slots as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTS](https:/redis.io/docs/latest/commands/cluster-delslots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of hash slot arguments
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterDelslots(slots: [Int]) async throws {
        try await send("CLUSTER", "DELSLOTS", slots)
    }

    /// Sets hash slot ranges as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTSRANGE](https:/redis.io/docs/latest/commands/cluster-delslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterDelslotsrange(range: RESPCommand.CLUSTERDELSLOTSRANGERange) async throws {
        try await send("CLUSTER", "DELSLOTSRANGE", range)
    }

    /// Sets hash slot ranges as unbound for a node.
    ///
    /// - Documentation: [CLUSTER DELSLOTSRANGE](https:/redis.io/docs/latest/commands/cluster-delslotsrange)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of the slots between the start slot and end slot arguments.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterDelslotsrange(ranges: [RESPCommand.CLUSTERDELSLOTSRANGERange]) async throws {
        try await send("CLUSTER", "DELSLOTSRANGE", ranges)
    }

    /// Forces a replica to perform a manual failover of its master.
    ///
    /// - Documentation: [CLUSTER FAILOVER](https:/redis.io/docs/latest/commands/cluster-failover)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was accepted and a manual failover is going to be attempted. An error if the operation cannot be executed, for example if the client is connected to a node that is already a master.
    @inlinable
    public func clusterFailover(options: RESPCommand.CLUSTERFAILOVEROptions? = nil) async throws {
        try await send("CLUSTER", "FAILOVER", options)
    }

    /// Deletes all slots information from a node.
    ///
    /// - Documentation: [CLUSTER FLUSHSLOTS](https:/redis.io/docs/latest/commands/cluster-flushslots)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func clusterFlushslots() async throws {
        try await send("CLUSTER", "FLUSHSLOTS")
    }

    /// Removes a node from the nodes table.
    ///
    /// - Documentation: [CLUSTER FORGET](https:/redis.io/docs/latest/commands/cluster-forget)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was executed successfully. Otherwise an error is returned.
    @inlinable
    public func clusterForget(nodeId: String) async throws {
        try await send("CLUSTER", "FORGET", nodeId)
    }

    /// Returns the key names in a hash slot.
    ///
    /// - Documentation: [CLUSTER GETKEYSINSLOT](https:/redis.io/docs/latest/commands/cluster-getkeysinslot)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of requested keys
    /// - Categories: @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): an array with up to count elements.
    @inlinable
    public func clusterGetkeysinslot(slot: Int, count: Int) async throws -> [RESPToken] {
        try await send("CLUSTER", "GETKEYSINSLOT", slot, count).converting()
    }

    /// Returns helpful text about the different subcommands.
    ///
    /// - Documentation: [CLUSTER HELP](https:/redis.io/docs/latest/commands/cluster-help)
    /// - Version: 5.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of subcommands and their descriptions.
    @inlinable
    public func clusterHelp() async throws -> [RESPToken] {
        try await send("CLUSTER", "HELP").converting()
    }

    /// Returns information about the state of a node.
    ///
    /// - Documentation: [CLUSTER INFO](https:/redis.io/docs/latest/commands/cluster-info)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): A map between named fields and values in the form of <field>:<value> lines separated by newlines composed by the two bytes CRLF
    @inlinable
    public func clusterInfo() async throws -> String {
        try await send("CLUSTER", "INFO").converting()
    }

    /// Returns the hash slot for a key.
    ///
    /// - Documentation: [CLUSTER KEYSLOT](https:/redis.io/docs/latest/commands/cluster-keyslot)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of bytes in the key
    /// - Categories: @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): The hash slot number for the specified key
    @inlinable
    public func clusterKeyslot(key: String) async throws -> Int {
        try await send("CLUSTER", "KEYSLOT", key).converting()
    }

    /// Returns a list of all TCP links to and from peer nodes.
    ///
    /// - Documentation: [CLUSTER LINKS](https:/redis.io/docs/latest/commands/cluster-links)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): an array of [Map](https:/redis.io/docs/reference/protocol-spec#maps) where each map contains various attributes and their values of a cluster link.
    @inlinable
    public func clusterLinks() async throws -> [RESPToken] {
        try await send("CLUSTER", "LINKS").converting()
    }

    /// Forces a node to handshake with another node.
    ///
    /// - Documentation: [CLUSTER MEET](https:/redis.io/docs/latest/commands/cluster-meet)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. If the address or port specified are invalid an error is returned.
    @inlinable
    public func clusterMeet(ip: String, port: Int, clusterBusPort: Int? = nil) async throws {
        try await send("CLUSTER", "MEET", ip, port, clusterBusPort)
    }

    /// Returns the ID of a node.
    ///
    /// - Documentation: [CLUSTER MYID](https:/redis.io/docs/latest/commands/cluster-myid)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the node ID.
    @inlinable
    public func clusterMyid() async throws -> String {
        try await send("CLUSTER", "MYID").converting()
    }

    /// Returns the shard ID of a node.
    ///
    /// - Documentation: [CLUSTER MYSHARDID](https:/redis.io/docs/latest/commands/cluster-myshardid)
    /// - Version: 7.2.0
    /// - Complexity: O(1)
    /// - Categories: @slow
    /// - Returns: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the node's shard ID.
    @inlinable
    public func clusterMyshardid() async throws -> String {
        try await send("CLUSTER", "MYSHARDID").converting()
    }

    /// Returns the cluster configuration for a node.
    ///
    /// - Documentation: [CLUSTER NODES](https:/redis.io/docs/latest/commands/cluster-nodes)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Returns: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): the serialized cluster configuration.
    @inlinable
    public func clusterNodes() async throws -> String {
        try await send("CLUSTER", "NODES").converting()
    }

    /// Lists the replica nodes of a master node.
    ///
    /// - Documentation: [CLUSTER REPLICAS](https:/redis.io/docs/latest/commands/cluster-replicas)
    /// - Version: 5.0.0
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of replica nodes replicating from the specified master node provided in the same format used by `CLUSTER NODES`.
    @inlinable
    public func clusterReplicas(nodeId: String) async throws -> [RESPToken] {
        try await send("CLUSTER", "REPLICAS", nodeId).converting()
    }

    /// Configure a node as replica of a master node.
    ///
    /// - Documentation: [CLUSTER REPLICATE](https:/redis.io/docs/latest/commands/cluster-replicate)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterReplicate(nodeId: String) async throws {
        try await send("CLUSTER", "REPLICATE", nodeId)
    }

    /// Resets a node.
    ///
    /// - Documentation: [CLUSTER RESET](https:/redis.io/docs/latest/commands/cluster-reset)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterReset(resetType: RESPCommand.CLUSTERRESETResetType? = nil) async throws {
        try await send("CLUSTER", "RESET", resetType)
    }

    /// Forces a node to save the cluster configuration to disk.
    ///
    /// - Documentation: [CLUSTER SAVECONFIG](https:/redis.io/docs/latest/commands/cluster-saveconfig)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterSaveconfig() async throws {
        try await send("CLUSTER", "SAVECONFIG")
    }

    /// Sets the configuration epoch for a new node.
    ///
    /// - Documentation: [CLUSTER SET-CONFIG-EPOCH](https:/redis.io/docs/latest/commands/cluster-set-config-epoch)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterSetConfigEpoch(configEpoch: Int) async throws {
        try await send("CLUSTER", "SET-CONFIG-EPOCH", configEpoch)
    }

    /// Binds a hash slot to a node.
    ///
    /// - Documentation: [CLUSTER SETSLOT](https:/redis.io/docs/latest/commands/cluster-setslot)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): all the sub-commands return `OK` if the command was successful. Otherwise an error is returned.
    @inlinable
    public func clusterSetslot(slot: Int, subcommand: RESPCommand.CLUSTERSETSLOTSubcommand) async throws {
        try await send("CLUSTER", "SETSLOT", slot, subcommand)
    }

    /// Returns the mapping of cluster slots to shards.
    ///
    /// - Documentation: [CLUSTER SHARDS](https:/redis.io/docs/latest/commands/cluster-shards)
    /// - Version: 7.0.0
    /// - Complexity: O(N) where N is the total number of cluster nodes
    /// - Categories: @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a nested list of [Map](https:/redis.io/docs/reference/protocol-spec#maps) of hash ranges and shard nodes describing individual shards.
    @inlinable
    public func clusterShards() async throws -> [RESPToken] {
        try await send("CLUSTER", "SHARDS").converting()
    }

    /// Lists the replica nodes of a master node.
    ///
    /// - Documentation: [CLUSTER SLAVES](https:/redis.io/docs/latest/commands/cluster-slaves)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the number of replicas.
    /// - Categories: @admin, @slow, @dangerous
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of replica nodes replicating from the specified master node provided in the same format used by `CLUSTER NODES`.
    @inlinable
    public func clusterSlaves(nodeId: String) async throws -> [RESPToken] {
        try await send("CLUSTER", "SLAVES", nodeId).converting()
    }

    /// Returns the mapping of cluster slots to nodes.
    ///
    /// - Documentation: [CLUSTER SLOTS](https:/redis.io/docs/latest/commands/cluster-slots)
    /// - Version: 3.0.0
    /// - Complexity: O(N) where N is the total number of Cluster nodes
    /// - Categories: @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): nested list of slot ranges with networking information.
    @inlinable
    public func clusterSlots() async throws -> [RESPToken] {
        try await send("CLUSTER", "SLOTS").converting()
    }

    /// Enables read-only queries for a connection to a Redis Cluster replica node.
    ///
    /// - Documentation: [READONLY](https:/redis.io/docs/latest/commands/readonly)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func readonly() async throws {
        try await send("READONLY")
    }

    /// Enables read-write queries for a connection to a Reids Cluster replica node.
    ///
    /// - Documentation: [READWRITE](https:/redis.io/docs/latest/commands/readwrite)
    /// - Version: 3.0.0
    /// - Complexity: O(1)
    /// - Categories: @fast, @connection
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func readwrite() async throws {
        try await send("READWRITE")
    }

}
