//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-redis open source project
//
// Copyright (c) 2025 Apple Inc. and the swift-redis project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-redis project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by RedisCommandsBuilder

import NIOCore
import Redis

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

/// Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.
public struct PFADD: RedisCommand {
    public typealias Response = Int

    public var key: RedisKey
    public var element: [String] = []

    @inlinable public init(key: RedisKey, element: [String] = []) {
        self.key = key
        self.element = element
    }

    @inlinable public func encode(into commandEncoder: inout RedisCommandEncoder) {
        commandEncoder.encodeArray("PFADD", key, element)
    }
}

/// Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).
public struct PFCOUNT: RedisCommand {
    public typealias Response = Int

    public var key: [RedisKey]

    @inlinable public init(key: [RedisKey]) {
        self.key = key
    }

    @inlinable public func encode(into commandEncoder: inout RedisCommandEncoder) {
        commandEncoder.encodeArray("PFCOUNT", key)
    }
}

/// Merges one or more HyperLogLog values into a single key.
public struct PFMERGE: RedisCommand {
    public typealias Response = RESPToken

    public var destkey: RedisKey
    public var sourcekey: [RedisKey] = []

    @inlinable public init(destkey: RedisKey, sourcekey: [RedisKey] = []) {
        self.destkey = destkey
        self.sourcekey = sourcekey
    }

    @inlinable public func encode(into commandEncoder: inout RedisCommandEncoder) {
        commandEncoder.encodeArray("PFMERGE", destkey, sourcekey)
    }
}

/// An internal command for testing HyperLogLog values.
public struct PFSELFTEST: RedisCommand {
    public typealias Response = RESPToken


    @inlinable public init() {
    }

    @inlinable public func encode(into commandEncoder: inout RedisCommandEncoder) {
        commandEncoder.encodeArray("PFSELFTEST")
    }
}


extension RedisConnection {
    /// Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [PFADD](https:/redis.io/docs/latest/commands/pfadd)
    /// - Version: 2.8.9
    /// - Complexity: O(1) to add every element.
    /// - Categories: @write, @hyperloglog, @fast
    /// - Returns: One of the following:
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): `1` if at least one HyperLogLog internal register was altered.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): `0` if no HyperLogLog internal registers were altered.
    @inlinable
    public func pfadd(key: RedisKey, element: [String] = []) async throws -> Int {
        try await send(command: PFADD(key: key, element: element))
    }

    /// Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).
    ///
    /// - Documentation: [PFCOUNT](https:/redis.io/docs/latest/commands/pfcount)
    /// - Version: 2.8.9
    /// - Complexity: O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.
    /// - Categories: @read, @hyperloglog, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the approximated number of unique elements observed via `PFADD`
    @inlinable
    public func pfcount(key: [RedisKey]) async throws -> Int {
        try await send(command: PFCOUNT(key: key))
    }

    /// Merges one or more HyperLogLog values into a single key.
    ///
    /// - Documentation: [PFMERGE](https:/redis.io/docs/latest/commands/pfmerge)
    /// - Version: 2.8.9
    /// - Complexity: O(N) to merge N HyperLogLogs, but with high constant times.
    /// - Categories: @write, @hyperloglog, @slow
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func pfmerge(destkey: RedisKey, sourcekey: [RedisKey] = []) async throws -> RESPToken {
        try await send(command: PFMERGE(destkey: destkey, sourcekey: sourcekey))
    }

    /// An internal command for testing HyperLogLog values.
    ///
    /// - Documentation: [PFSELFTEST](https:/redis.io/docs/latest/commands/pfselftest)
    /// - Version: 2.8.9
    /// - Complexity: N/A
    /// - Categories: @hyperloglog, @admin, @slow, @dangerous
    /// - Returns: [Simple string](https:/redis.io/docs/reference/protocol-spec#simple-strings): `OK`.
    @inlinable
    public func pfselftest() async throws -> RESPToken {
        try await send(command: PFSELFTEST())
    }

}
