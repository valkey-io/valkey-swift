//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-redis open source project
//
// Copyright (c) 2023 Apple Inc. and the swift-redis project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of swift-redis project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by RedisCommandsBuilder

import NIOCore
import RESP
import Redis

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

extension RESPCommand {
    public enum BZMPOPWhere: RESPRenderable {
        case min
        case max

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .min: "MIN".writeToRESPBuffer(&buffer)
            case .max: "MAX".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZMPOP](https:/redis.io/docs/latest/commands/bzmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @slow, @blocking
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.
    @inlinable
    public static func bzmpop(timeout: Double, key: RedisKey, `where`: BZMPOPWhere, count: Int? = nil) -> RESPCommand {
        RESPCommand("BZMPOP", timeout, 1, key, `where`, RESPWithToken("COUNT", count))
    }

    /// Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZMPOP](https:/redis.io/docs/latest/commands/bzmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @slow, @blocking
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.
    @inlinable
    public static func bzmpop(timeout: Double, keys: [RedisKey], `where`: BZMPOPWhere, count: Int? = nil) -> RESPCommand {
        RESPCommand("BZMPOP", timeout, RESPArrayWithCount(keys), `where`, RESPWithToken("COUNT", count))
    }

    /// Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMAX](https:/redis.io/docs/latest/commands/bzpopmax)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast, @blocking
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped and the _timeout_ expired.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the keyname, popped member, and its score.
    @inlinable
    public static func bzpopmax(key: RedisKey, timeout: Double) -> RESPCommand {
        RESPCommand("BZPOPMAX", key, timeout)
    }

    /// Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMAX](https:/redis.io/docs/latest/commands/bzpopmax)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast, @blocking
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped and the _timeout_ expired.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the keyname, popped member, and its score.
    @inlinable
    public static func bzpopmax(keys: [RedisKey], timeout: Double) -> RESPCommand {
        RESPCommand("BZPOPMAX", keys, timeout)
    }

    /// Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMIN](https:/redis.io/docs/latest/commands/bzpopmin)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast, @blocking
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped and the _timeout_ expired.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the keyname, popped member, and its score.
    @inlinable
    public static func bzpopmin(key: RedisKey, timeout: Double) -> RESPCommand {
        RESPCommand("BZPOPMIN", key, timeout)
    }

    /// Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMIN](https:/redis.io/docs/latest/commands/bzpopmin)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast, @blocking
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped and the _timeout_ expired.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the keyname, popped member, and its score.
    @inlinable
    public static func bzpopmin(keys: [RedisKey], timeout: Double) -> RESPCommand {
        RESPCommand("BZPOPMIN", keys, timeout)
    }

    public enum ZADDCondition: RESPRenderable {
        case nx
        case xx

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .nx: "NX".writeToRESPBuffer(&buffer)
            case .xx: "XX".writeToRESPBuffer(&buffer)
            }
        }
    }
    public enum ZADDComparison: RESPRenderable {
        case gt
        case lt

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .gt: "GT".writeToRESPBuffer(&buffer)
            case .lt: "LT".writeToRESPBuffer(&buffer)
            }
        }
    }
    public struct ZADDData: RESPRenderable {
        @usableFromInline let score: Double
        @usableFromInline let member: String

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += score.writeToRESPBuffer(&buffer)
            count += member.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [ZADD](https:/redis.io/docs/latest/commands/zadd)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast
    /// - Response: Any of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the operation was aborted because of a conflict with one of the _XX/NX/LT/GT_ options.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of new members when the _CH_ option is not used.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of new or updated members when the _CH_ option is used.
    ///     * [Double](https:/redis.io/docs/reference/protocol-spec#doubles): the updated score of the member when the _INCR_ option is used.
    @inlinable
    public static func zadd(key: RedisKey, condition: ZADDCondition? = nil, comparison: ZADDComparison? = nil, change: Bool = false, increment: Bool = false, data: ZADDData) -> RESPCommand {
        RESPCommand("ZADD", key, condition, comparison, RedisPureToken("CH", change), RedisPureToken("INCR", increment), data)
    }

    /// Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [ZADD](https:/redis.io/docs/latest/commands/zadd)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast
    /// - Response: Any of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the operation was aborted because of a conflict with one of the _XX/NX/LT/GT_ options.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of new members when the _CH_ option is not used.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of new or updated members when the _CH_ option is used.
    ///     * [Double](https:/redis.io/docs/reference/protocol-spec#doubles): the updated score of the member when the _INCR_ option is used.
    @inlinable
    public static func zadd(key: RedisKey, condition: ZADDCondition? = nil, comparison: ZADDComparison? = nil, change: Bool = false, increment: Bool = false, datas: [ZADDData]) -> RESPCommand {
        RESPCommand("ZADD", key, condition, comparison, RedisPureToken("CH", change), RedisPureToken("INCR", increment), datas)
    }

    /// Returns the number of members in a sorted set.
    ///
    /// - Documentation: [ZCARD](https:/redis.io/docs/latest/commands/zcard)
    /// - Version: 1.2.0
    /// - Complexity: O(1)
    /// - Categories: @read, @sortedset, @fast
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the cardinality (number of members) of the sorted set, or 0 if the key doesn't exist.
    @inlinable
    public static func zcard(key: RedisKey) -> RESPCommand {
        RESPCommand("ZCARD", key)
    }

    /// Returns the count of members in a sorted set that have scores within a range.
    ///
    /// - Documentation: [ZCOUNT](https:/redis.io/docs/latest/commands/zcount)
    /// - Version: 2.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @read, @sortedset, @fast
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the specified score range.
    @inlinable
    public static func zcount(key: RedisKey, min: Double, max: Double) -> RESPCommand {
        RESPCommand("ZCOUNT", key, min, max)
    }

    /// Returns the difference between multiple sorted sets.
    ///
    /// - Documentation: [ZDIFF](https:/redis.io/docs/latest/commands/zdiff)
    /// - Version: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the difference including, optionally, scores when the _WITHSCORES_ option is used.
    @inlinable
    public static func zdiff(key: RedisKey, withscores: Bool = false) -> RESPCommand {
        RESPCommand("ZDIFF", 1, key, RedisPureToken("WITHSCORES", withscores))
    }

    /// Returns the difference between multiple sorted sets.
    ///
    /// - Documentation: [ZDIFF](https:/redis.io/docs/latest/commands/zdiff)
    /// - Version: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the difference including, optionally, scores when the _WITHSCORES_ option is used.
    @inlinable
    public static func zdiff(keys: [RedisKey], withscores: Bool = false) -> RESPCommand {
        RESPCommand("ZDIFF", RESPArrayWithCount(keys), RedisPureToken("WITHSCORES", withscores))
    }

    /// Stores the difference of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZDIFFSTORE](https:/redis.io/docs/latest/commands/zdiffstore)
    /// - Version: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting sorted set at _destination_.
    @inlinable
    public static func zdiffstore(destination: RedisKey, key: RedisKey) -> RESPCommand {
        RESPCommand("ZDIFFSTORE", destination, 1, key)
    }

    /// Stores the difference of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZDIFFSTORE](https:/redis.io/docs/latest/commands/zdiffstore)
    /// - Version: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting sorted set at _destination_.
    @inlinable
    public static func zdiffstore(destination: RedisKey, keys: [RedisKey]) -> RESPCommand {
        RESPCommand("ZDIFFSTORE", destination, RESPArrayWithCount(keys))
    }

    /// Increments the score of a member in a sorted set.
    ///
    /// - Documentation: [ZINCRBY](https:/redis.io/docs/latest/commands/zincrby)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)) where N is the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast
    /// - Response: [Double](https:/redis.io/docs/reference/protocol-spec#doubles): the new score of _member_.
    @inlinable
    public static func zincrby(key: RedisKey, increment: Int, member: String) -> RESPCommand {
        RESPCommand("ZINCRBY", key, increment, member)
    }

    public enum ZINTERAggregate: RESPRenderable {
        case sum
        case min
        case max

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .sum: "SUM".writeToRESPBuffer(&buffer)
            case .min: "MIN".writeToRESPBuffer(&buffer)
            case .max: "MAX".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Returns the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTER](https:/redis.io/docs/latest/commands/zinter)
    /// - Version: 6.2.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the intersection including, optionally, scores when the _WITHSCORES_ option is used.
    @inlinable
    public static func zinter(key: RedisKey, weight: Int? = nil, aggregate: ZINTERAggregate? = nil, withscores: Bool = false) -> RESPCommand {
        RESPCommand("ZINTER", 1, key, RESPWithToken("WEIGHTS", weight), RESPWithToken("AGGREGATE", aggregate), RedisPureToken("WITHSCORES", withscores))
    }

    /// Returns the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTER](https:/redis.io/docs/latest/commands/zinter)
    /// - Version: 6.2.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the intersection including, optionally, scores when the _WITHSCORES_ option is used.
    @inlinable
    public static func zinter(keys: [RedisKey], weights: [Int], aggregate: ZINTERAggregate? = nil, withscores: Bool = false) -> RESPCommand {
        RESPCommand("ZINTER", RESPArrayWithCount(keys), RESPWithToken("WEIGHTS", weights), RESPWithToken("AGGREGATE", aggregate), RedisPureToken("WITHSCORES", withscores))
    }

    /// Returns the number of members of the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTERCARD](https:/redis.io/docs/latest/commands/zintercard)
    /// - Version: 7.0.0
    /// - Complexity: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting intersection.
    @inlinable
    public static func zintercard(key: RedisKey, limit: Int? = nil) -> RESPCommand {
        RESPCommand("ZINTERCARD", 1, key, RESPWithToken("LIMIT", limit))
    }

    /// Returns the number of members of the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTERCARD](https:/redis.io/docs/latest/commands/zintercard)
    /// - Version: 7.0.0
    /// - Complexity: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting intersection.
    @inlinable
    public static func zintercard(keys: [RedisKey], limit: Int? = nil) -> RESPCommand {
        RESPCommand("ZINTERCARD", RESPArrayWithCount(keys), RESPWithToken("LIMIT", limit))
    }

    public enum ZINTERSTOREAggregate: RESPRenderable {
        case sum
        case min
        case max

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .sum: "SUM".writeToRESPBuffer(&buffer)
            case .min: "MIN".writeToRESPBuffer(&buffer)
            case .max: "MAX".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Stores the intersect of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZINTERSTORE](https:/redis.io/docs/latest/commands/zinterstore)
    /// - Version: 2.0.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting sorted set at the _destination_.
    @inlinable
    public static func zinterstore(destination: RedisKey, key: RedisKey, weight: Int? = nil, aggregate: ZINTERSTOREAggregate? = nil) -> RESPCommand {
        RESPCommand("ZINTERSTORE", destination, 1, key, RESPWithToken("WEIGHTS", weight), RESPWithToken("AGGREGATE", aggregate))
    }

    /// Stores the intersect of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZINTERSTORE](https:/redis.io/docs/latest/commands/zinterstore)
    /// - Version: 2.0.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting sorted set at the _destination_.
    @inlinable
    public static func zinterstore(destination: RedisKey, keys: [RedisKey], weights: [Int], aggregate: ZINTERSTOREAggregate? = nil) -> RESPCommand {
        RESPCommand("ZINTERSTORE", destination, RESPArrayWithCount(keys), RESPWithToken("WEIGHTS", weights), RESPWithToken("AGGREGATE", aggregate))
    }

    /// Returns the number of members in a sorted set within a lexicographical range.
    ///
    /// - Documentation: [ZLEXCOUNT](https:/redis.io/docs/latest/commands/zlexcount)
    /// - Version: 2.8.9
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @read, @sortedset, @fast
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the specified score range.
    @inlinable
    public static func zlexcount(key: RedisKey, min: String, max: String) -> RESPCommand {
        RESPCommand("ZLEXCOUNT", key, min, max)
    }

    public enum ZMPOPWhere: RESPRenderable {
        case min
        case max

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .min: "MIN".writeToRESPBuffer(&buffer)
            case .max: "MAX".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZMPOP](https:/redis.io/docs/latest/commands/zmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.
    @inlinable
    public static func zmpop(key: RedisKey, `where`: ZMPOPWhere, count: Int? = nil) -> RESPCommand {
        RESPCommand("ZMPOP", 1, key, `where`, RESPWithToken("COUNT", count))
    }

    /// Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZMPOP](https:/redis.io/docs/latest/commands/zmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.
    @inlinable
    public static func zmpop(keys: [RedisKey], `where`: ZMPOPWhere, count: Int? = nil) -> RESPCommand {
        RESPCommand("ZMPOP", RESPArrayWithCount(keys), `where`, RESPWithToken("COUNT", count))
    }

    /// Returns the score of one or more members in a sorted set.
    ///
    /// - Documentation: [ZMSCORE](https:/redis.io/docs/latest/commands/zmscore)
    /// - Version: 6.2.0
    /// - Complexity: O(N) where N is the number of members being requested.
    /// - Categories: @read, @sortedset, @fast
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the member does not exist in the sorted set.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of [Double](https:/redis.io/docs/reference/protocol-spec#doubles) _member_ scores as double-precision floating point numbers.
    @inlinable
    public static func zmscore(key: RedisKey, member: String) -> RESPCommand {
        RESPCommand("ZMSCORE", key, member)
    }

    /// Returns the score of one or more members in a sorted set.
    ///
    /// - Documentation: [ZMSCORE](https:/redis.io/docs/latest/commands/zmscore)
    /// - Version: 6.2.0
    /// - Complexity: O(N) where N is the number of members being requested.
    /// - Categories: @read, @sortedset, @fast
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the member does not exist in the sorted set.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of [Double](https:/redis.io/docs/reference/protocol-spec#doubles) _member_ scores as double-precision floating point numbers.
    @inlinable
    public static func zmscore(key: RedisKey, members: [String]) -> RESPCommand {
        RESPCommand("ZMSCORE", key, members)
    }

    /// Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZPOPMAX](https:/redis.io/docs/latest/commands/zpopmax)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @fast
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of popped elements and scores.
    @inlinable
    public static func zpopmax(key: RedisKey, count: Int? = nil) -> RESPCommand {
        RESPCommand("ZPOPMAX", key, count)
    }

    /// Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZPOPMIN](https:/redis.io/docs/latest/commands/zpopmin)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @fast
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of popped elements and scores.
    @inlinable
    public static func zpopmin(key: RedisKey, count: Int? = nil) -> RESPCommand {
        RESPCommand("ZPOPMIN", key, count)
    }

    public struct ZRANDMEMBEROptions: RESPRenderable {
        @usableFromInline let count: Int
        @usableFromInline let withscores: Bool

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += count.writeToRESPBuffer(&buffer)
            if self.withscores { count += "WITHSCORES".writeToRESPBuffer(&buffer) }
            return count
        }
    }
    /// Returns one or more random members from a sorted set.
    ///
    /// - Documentation: [ZRANDMEMBER](https:/redis.io/docs/latest/commands/zrandmember)
    /// - Version: 6.2.0
    /// - Complexity: O(N) where N is the number of members returned
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): without the additional _count_ argument, the command returns a randomly selected member, or [Null](https:/redis.io/docs/reference/protocol-spec#nulls) when _key_ doesn't exist.
    ///     [Array](https:/redis.io/docs/reference/protocol-spec#arrays): when the additional _count_ argument is passed, the command returns an array of members, or an empty array when _key_ doesn't exist. If the _WITHSCORES_ modifier is used, the reply is a list of members and their scores from the sorted set.
    @inlinable
    public static func zrandmember(key: RedisKey, options: ZRANDMEMBEROptions? = nil) -> RESPCommand {
        RESPCommand("ZRANDMEMBER", key, options)
    }

    public enum ZRANGESortby: RESPRenderable {
        case byscore
        case bylex

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .byscore: "BYSCORE".writeToRESPBuffer(&buffer)
            case .bylex: "BYLEX".writeToRESPBuffer(&buffer)
            }
        }
    }
    public struct ZRANGELimit: RESPRenderable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += offset.writeToRESPBuffer(&buffer)
            count += count.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Returns members in a sorted set within a range of indexes.
    ///
    /// - Documentation: [ZRANGE](https:/redis.io/docs/latest/commands/zrange)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of members in the specified range with, optionally, their scores when the _WITHSCORES_ option is given.
    @inlinable
    public static func zrange(key: RedisKey, start: String, stop: String, sortby: ZRANGESortby? = nil, rev: Bool = false, limit: ZRANGELimit? = nil, withscores: Bool = false) -> RESPCommand {
        RESPCommand("ZRANGE", key, start, stop, sortby, RedisPureToken("REV", rev), RESPWithToken("LIMIT", limit), RedisPureToken("WITHSCORES", withscores))
    }

    public struct ZRANGEBYLEXLimit: RESPRenderable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += offset.writeToRESPBuffer(&buffer)
            count += count.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Returns members in a sorted set within a lexicographical range.
    ///
    /// - Documentation: [ZRANGEBYLEX](https:/redis.io/docs/latest/commands/zrangebylex)
    /// - Version: 2.8.9
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of elements in the specified score range.
    @inlinable
    public static func zrangebylex(key: RedisKey, min: String, max: String, limit: ZRANGEBYLEXLimit? = nil) -> RESPCommand {
        RESPCommand("ZRANGEBYLEX", key, min, max, RESPWithToken("LIMIT", limit))
    }

    public struct ZRANGEBYSCORELimit: RESPRenderable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += offset.writeToRESPBuffer(&buffer)
            count += count.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Returns members in a sorted set within a range of scores.
    ///
    /// - Documentation: [ZRANGEBYSCORE](https:/redis.io/docs/latest/commands/zrangebyscore)
    /// - Version: 1.0.5
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Categories: @read, @sortedset, @slow
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of the members with, optionally, their scores in the specified score range.
    @inlinable
    public static func zrangebyscore(key: RedisKey, min: Double, max: Double, withscores: Bool = false, limit: ZRANGEBYSCORELimit? = nil) -> RESPCommand {
        RESPCommand("ZRANGEBYSCORE", key, min, max, RedisPureToken("WITHSCORES", withscores), RESPWithToken("LIMIT", limit))
    }

    public enum ZRANGESTORESortby: RESPRenderable {
        case byscore
        case bylex

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .byscore: "BYSCORE".writeToRESPBuffer(&buffer)
            case .bylex: "BYLEX".writeToRESPBuffer(&buffer)
            }
        }
    }
    public struct ZRANGESTORELimit: RESPRenderable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += offset.writeToRESPBuffer(&buffer)
            count += count.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Stores a range of members from sorted set in a key.
    ///
    /// - Documentation: [ZRANGESTORE](https:/redis.io/docs/latest/commands/zrangestore)
    /// - Version: 6.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of elements in the resulting sorted set.
    @inlinable
    public static func zrangestore(dst: RedisKey, src: RedisKey, min: String, max: String, sortby: ZRANGESTORESortby? = nil, rev: Bool = false, limit: ZRANGESTORELimit? = nil) -> RESPCommand {
        RESPCommand("ZRANGESTORE", dst, src, min, max, sortby, RedisPureToken("REV", rev), RESPWithToken("LIMIT", limit))
    }

    /// Returns the index of a member in a sorted set ordered by ascending scores.
    ///
    /// - Documentation: [ZRANK](https:/redis.io/docs/latest/commands/zrank)
    /// - Version: 2.0.0
    /// - Complexity: O(log(N))
    /// - Categories: @read, @sortedset, @fast
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the key does not exist or the member does not exist in the sorted set.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the rank of the member when _WITHSCORE_ is not used.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the rank and score of the member when _WITHSCORE_ is used.
    @inlinable
    public static func zrank(key: RedisKey, member: String, withscore: Bool = false) -> RESPCommand {
        RESPCommand("ZRANK", key, member, RedisPureToken("WITHSCORE", withscore))
    }

    /// Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREM](https:/redis.io/docs/latest/commands/zrem)
    /// - Version: 1.2.0
    /// - Complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.
    /// - Categories: @write, @sortedset, @fast
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members removed from the sorted set, not including non-existing members.
    @inlinable
    public static func zrem(key: RedisKey, member: String) -> RESPCommand {
        RESPCommand("ZREM", key, member)
    }

    /// Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREM](https:/redis.io/docs/latest/commands/zrem)
    /// - Version: 1.2.0
    /// - Complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.
    /// - Categories: @write, @sortedset, @fast
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members removed from the sorted set, not including non-existing members.
    @inlinable
    public static func zrem(key: RedisKey, members: [String]) -> RESPCommand {
        RESPCommand("ZREM", key, members)
    }

    /// Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYLEX](https:/redis.io/docs/latest/commands/zremrangebylex)
    /// - Version: 2.8.9
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): Number of members removed.
    @inlinable
    public static func zremrangebylex(key: RedisKey, min: String, max: String) -> RESPCommand {
        RESPCommand("ZREMRANGEBYLEX", key, min, max)
    }

    /// Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYRANK](https:/redis.io/docs/latest/commands/zremrangebyrank)
    /// - Version: 2.0.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): Number of members removed.
    @inlinable
    public static func zremrangebyrank(key: RedisKey, start: Int, stop: Int) -> RESPCommand {
        RESPCommand("ZREMRANGEBYRANK", key, start, stop)
    }

    /// Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYSCORE](https:/redis.io/docs/latest/commands/zremrangebyscore)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): Number of members removed.
    @inlinable
    public static func zremrangebyscore(key: RedisKey, min: Double, max: Double) -> RESPCommand {
        RESPCommand("ZREMRANGEBYSCORE", key, min, max)
    }

    /// Returns members in a sorted set within a range of indexes in reverse order.
    ///
    /// - Documentation: [ZREVRANGE](https:/redis.io/docs/latest/commands/zrevrange)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of members in the specified range, optionally with their scores if _WITHSCORE_ was used.
    @inlinable
    public static func zrevrange(key: RedisKey, start: Int, stop: Int, withscores: Bool = false) -> RESPCommand {
        RESPCommand("ZREVRANGE", key, start, stop, RedisPureToken("WITHSCORES", withscores))
    }

    public struct ZREVRANGEBYLEXLimit: RESPRenderable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += offset.writeToRESPBuffer(&buffer)
            count += count.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Returns members in a sorted set within a lexicographical range in reverse order.
    ///
    /// - Documentation: [ZREVRANGEBYLEX](https:/redis.io/docs/latest/commands/zrevrangebylex)
    /// - Version: 2.8.9
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): List of the elements in the specified score range.
    @inlinable
    public static func zrevrangebylex(key: RedisKey, max: String, min: String, limit: ZREVRANGEBYLEXLimit? = nil) -> RESPCommand {
        RESPCommand("ZREVRANGEBYLEX", key, max, min, RESPWithToken("LIMIT", limit))
    }

    public struct ZREVRANGEBYSCORELimit: RESPRenderable {
        @usableFromInline let offset: Int
        @usableFromInline let count: Int

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            var count = 0
            count += offset.writeToRESPBuffer(&buffer)
            count += count.writeToRESPBuffer(&buffer)
            return count
        }
    }
    /// Returns members in a sorted set within a range of scores in reverse order.
    ///
    /// - Documentation: [ZREVRANGEBYSCORE](https:/redis.io/docs/latest/commands/zrevrangebyscore)
    /// - Version: 2.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Categories: @read, @sortedset, @slow
    /// - Response: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of the members and, optionally, their scores in the specified score range.
    @inlinable
    public static func zrevrangebyscore(key: RedisKey, max: Double, min: Double, withscores: Bool = false, limit: ZREVRANGEBYSCORELimit? = nil) -> RESPCommand {
        RESPCommand("ZREVRANGEBYSCORE", key, max, min, RedisPureToken("WITHSCORES", withscores), RESPWithToken("LIMIT", limit))
    }

    /// Returns the index of a member in a sorted set ordered by descending scores.
    ///
    /// - Documentation: [ZREVRANK](https:/redis.io/docs/latest/commands/zrevrank)
    /// - Version: 2.0.0
    /// - Complexity: O(log(N))
    /// - Categories: @read, @sortedset, @fast
    /// - Response: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the key does not exist or the member does not exist in the sorted set.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): The rank of the member when _WITHSCORE_ is not used.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): The rank and score of the member when _WITHSCORE_ is used.
    @inlinable
    public static func zrevrank(key: RedisKey, member: String, withscore: Bool = false) -> RESPCommand {
        RESPCommand("ZREVRANK", key, member, RedisPureToken("WITHSCORE", withscore))
    }

    /// Iterates over members and scores of a sorted set.
    ///
    /// - Documentation: [ZSCAN](https:/redis.io/docs/latest/commands/zscan)
    /// - Version: 2.8.0
    /// - Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): cursor and scan response in array form.
    @inlinable
    public static func zscan(key: RedisKey, cursor: Int, pattern: String? = nil, count: Int? = nil) -> RESPCommand {
        RESPCommand("ZSCAN", key, cursor, RESPWithToken("MATCH", pattern), RESPWithToken("COUNT", count))
    }

    /// Returns the score of a member in a sorted set.
    ///
    /// - Documentation: [ZSCORE](https:/redis.io/docs/latest/commands/zscore)
    /// - Version: 1.2.0
    /// - Complexity: O(1)
    /// - Categories: @read, @sortedset, @fast
    /// - Response: One of the following:
    ///     * [Double](https:/redis.io/docs/reference/protocol-spec#doubles): the score of the member (a double-precision floating point number).
    ///     * [Nil](https:/redis.io/docs/reference/protocol-spec#bulk-strings): if _member_ does not exist in the sorted set, or the key does not exist.
    @inlinable
    public static func zscore(key: RedisKey, member: String) -> RESPCommand {
        RESPCommand("ZSCORE", key, member)
    }

    public enum ZUNIONAggregate: RESPRenderable {
        case sum
        case min
        case max

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .sum: "SUM".writeToRESPBuffer(&buffer)
            case .min: "MIN".writeToRESPBuffer(&buffer)
            case .max: "MAX".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Returns the union of multiple sorted sets.
    ///
    /// - Documentation: [ZUNION](https:/redis.io/docs/latest/commands/zunion)
    /// - Version: 6.2.0
    /// - Complexity: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the union with, optionally, their scores when _WITHSCORES_ is used.
    @inlinable
    public static func zunion(key: RedisKey, weight: Int? = nil, aggregate: ZUNIONAggregate? = nil, withscores: Bool = false) -> RESPCommand {
        RESPCommand("ZUNION", 1, key, RESPWithToken("WEIGHTS", weight), RESPWithToken("AGGREGATE", aggregate), RedisPureToken("WITHSCORES", withscores))
    }

    /// Returns the union of multiple sorted sets.
    ///
    /// - Documentation: [ZUNION](https:/redis.io/docs/latest/commands/zunion)
    /// - Version: 6.2.0
    /// - Complexity: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Categories: @read, @sortedset, @slow
    /// - Response: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the union with, optionally, their scores when _WITHSCORES_ is used.
    @inlinable
    public static func zunion(keys: [RedisKey], weights: [Int], aggregate: ZUNIONAggregate? = nil, withscores: Bool = false) -> RESPCommand {
        RESPCommand("ZUNION", RESPArrayWithCount(keys), RESPWithToken("WEIGHTS", weights), RESPWithToken("AGGREGATE", aggregate), RedisPureToken("WITHSCORES", withscores))
    }

    public enum ZUNIONSTOREAggregate: RESPRenderable {
        case sum
        case min
        case max

        @inlinable
        public func writeToRESPBuffer(_ buffer: inout ByteBuffer) -> Int {
            switch self {
            case .sum: "SUM".writeToRESPBuffer(&buffer)
            case .min: "MIN".writeToRESPBuffer(&buffer)
            case .max: "MAX".writeToRESPBuffer(&buffer)
            }
        }
    }
    /// Stores the union of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZUNIONSTORE](https:/redis.io/docs/latest/commands/zunionstore)
    /// - Version: 2.0.0
    /// - Complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of elements in the resulting sorted set.
    @inlinable
    public static func zunionstore(destination: RedisKey, key: RedisKey, weight: Int? = nil, aggregate: ZUNIONSTOREAggregate? = nil) -> RESPCommand {
        RESPCommand("ZUNIONSTORE", destination, 1, key, RESPWithToken("WEIGHTS", weight), RESPWithToken("AGGREGATE", aggregate))
    }

    /// Stores the union of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZUNIONSTORE](https:/redis.io/docs/latest/commands/zunionstore)
    /// - Version: 2.0.0
    /// - Complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Categories: @write, @sortedset, @slow
    /// - Response: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of elements in the resulting sorted set.
    @inlinable
    public static func zunionstore(destination: RedisKey, keys: [RedisKey], weights: [Int], aggregate: ZUNIONSTOREAggregate? = nil) -> RESPCommand {
        RESPCommand("ZUNIONSTORE", destination, RESPArrayWithCount(keys), RESPWithToken("WEIGHTS", weights), RESPWithToken("AGGREGATE", aggregate))
    }

}

extension RedisConnection {
    /// Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZMPOP](https:/redis.io/docs/latest/commands/bzmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @slow, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.
    @inlinable
    public func bzmpop(timeout: Double, key: RedisKey, `where`: RESPCommand.BZMPOPWhere, count: Int? = nil) async throws -> [RESPToken]? {
        try await send("BZMPOP", timeout, 1, key, `where`, RESPWithToken("COUNT", count)).converting()
    }

    /// Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZMPOP](https:/redis.io/docs/latest/commands/bzmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @slow, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.
    @inlinable
    public func bzmpop(timeout: Double, keys: [RedisKey], `where`: RESPCommand.BZMPOPWhere, count: Int? = nil) async throws -> [RESPToken]? {
        try await send("BZMPOP", timeout, RESPArrayWithCount(keys), `where`, RESPWithToken("COUNT", count)).converting()
    }

    /// Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMAX](https:/redis.io/docs/latest/commands/bzpopmax)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped and the _timeout_ expired.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the keyname, popped member, and its score.
    @inlinable
    public func bzpopmax(key: RedisKey, timeout: Double) async throws -> [RESPToken]? {
        try await send("BZPOPMAX", key, timeout).converting()
    }

    /// Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMAX](https:/redis.io/docs/latest/commands/bzpopmax)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped and the _timeout_ expired.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the keyname, popped member, and its score.
    @inlinable
    public func bzpopmax(keys: [RedisKey], timeout: Double) async throws -> [RESPToken]? {
        try await send("BZPOPMAX", keys, timeout).converting()
    }

    /// Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMIN](https:/redis.io/docs/latest/commands/bzpopmin)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped and the _timeout_ expired.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the keyname, popped member, and its score.
    @inlinable
    public func bzpopmin(key: RedisKey, timeout: Double) async throws -> [RESPToken]? {
        try await send("BZPOPMIN", key, timeout).converting()
    }

    /// Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.
    ///
    /// - Documentation: [BZPOPMIN](https:/redis.io/docs/latest/commands/bzpopmin)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast, @blocking
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped and the _timeout_ expired.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the keyname, popped member, and its score.
    @inlinable
    public func bzpopmin(keys: [RedisKey], timeout: Double) async throws -> [RESPToken]? {
        try await send("BZPOPMIN", keys, timeout).converting()
    }

    /// Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [ZADD](https:/redis.io/docs/latest/commands/zadd)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast
    /// - Returns: Any of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the operation was aborted because of a conflict with one of the _XX/NX/LT/GT_ options.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of new members when the _CH_ option is not used.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of new or updated members when the _CH_ option is used.
    ///     * [Double](https:/redis.io/docs/reference/protocol-spec#doubles): the updated score of the member when the _INCR_ option is used.
    @inlinable
    public func zadd(key: RedisKey, condition: RESPCommand.ZADDCondition? = nil, comparison: RESPCommand.ZADDComparison? = nil, change: Bool = false, increment: Bool = false, data: RESPCommand.ZADDData) async throws -> RESPToken {
        try await send("ZADD", key, condition, comparison, RedisPureToken("CH", change), RedisPureToken("INCR", increment), data)
    }

    /// Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.
    ///
    /// - Documentation: [ZADD](https:/redis.io/docs/latest/commands/zadd)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)) for each item added, where N is the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast
    /// - Returns: Any of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the operation was aborted because of a conflict with one of the _XX/NX/LT/GT_ options.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of new members when the _CH_ option is not used.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of new or updated members when the _CH_ option is used.
    ///     * [Double](https:/redis.io/docs/reference/protocol-spec#doubles): the updated score of the member when the _INCR_ option is used.
    @inlinable
    public func zadd(key: RedisKey, condition: RESPCommand.ZADDCondition? = nil, comparison: RESPCommand.ZADDComparison? = nil, change: Bool = false, increment: Bool = false, datas: [RESPCommand.ZADDData]) async throws -> RESPToken {
        try await send("ZADD", key, condition, comparison, RedisPureToken("CH", change), RedisPureToken("INCR", increment), datas)
    }

    /// Returns the number of members in a sorted set.
    ///
    /// - Documentation: [ZCARD](https:/redis.io/docs/latest/commands/zcard)
    /// - Version: 1.2.0
    /// - Complexity: O(1)
    /// - Categories: @read, @sortedset, @fast
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the cardinality (number of members) of the sorted set, or 0 if the key doesn't exist.
    @inlinable
    public func zcard(key: RedisKey) async throws -> Int {
        try await send("ZCARD", key).converting()
    }

    /// Returns the count of members in a sorted set that have scores within a range.
    ///
    /// - Documentation: [ZCOUNT](https:/redis.io/docs/latest/commands/zcount)
    /// - Version: 2.0.0
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @read, @sortedset, @fast
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the specified score range.
    @inlinable
    public func zcount(key: RedisKey, min: Double, max: Double) async throws -> Int {
        try await send("ZCOUNT", key, min, max).converting()
    }

    /// Returns the difference between multiple sorted sets.
    ///
    /// - Documentation: [ZDIFF](https:/redis.io/docs/latest/commands/zdiff)
    /// - Version: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the difference including, optionally, scores when the _WITHSCORES_ option is used.
    @inlinable
    public func zdiff(key: RedisKey, withscores: Bool = false) async throws -> RESPToken {
        try await send("ZDIFF", 1, key, RedisPureToken("WITHSCORES", withscores))
    }

    /// Returns the difference between multiple sorted sets.
    ///
    /// - Documentation: [ZDIFF](https:/redis.io/docs/latest/commands/zdiff)
    /// - Version: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the difference including, optionally, scores when the _WITHSCORES_ option is used.
    @inlinable
    public func zdiff(keys: [RedisKey], withscores: Bool = false) async throws -> RESPToken {
        try await send("ZDIFF", RESPArrayWithCount(keys), RedisPureToken("WITHSCORES", withscores))
    }

    /// Stores the difference of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZDIFFSTORE](https:/redis.io/docs/latest/commands/zdiffstore)
    /// - Version: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting sorted set at _destination_.
    @inlinable
    public func zdiffstore(destination: RedisKey, key: RedisKey) async throws -> Int {
        try await send("ZDIFFSTORE", destination, 1, key).converting()
    }

    /// Stores the difference of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZDIFFSTORE](https:/redis.io/docs/latest/commands/zdiffstore)
    /// - Version: 6.2.0
    /// - Complexity: O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting sorted set at _destination_.
    @inlinable
    public func zdiffstore(destination: RedisKey, keys: [RedisKey]) async throws -> Int {
        try await send("ZDIFFSTORE", destination, RESPArrayWithCount(keys)).converting()
    }

    /// Increments the score of a member in a sorted set.
    ///
    /// - Documentation: [ZINCRBY](https:/redis.io/docs/latest/commands/zincrby)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)) where N is the number of elements in the sorted set.
    /// - Categories: @write, @sortedset, @fast
    /// - Returns: [Double](https:/redis.io/docs/reference/protocol-spec#doubles): the new score of _member_.
    @inlinable
    public func zincrby(key: RedisKey, increment: Int, member: String) async throws -> Double {
        try await send("ZINCRBY", key, increment, member).converting()
    }

    /// Returns the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTER](https:/redis.io/docs/latest/commands/zinter)
    /// - Version: 6.2.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the intersection including, optionally, scores when the _WITHSCORES_ option is used.
    @inlinable
    public func zinter(key: RedisKey, weight: Int? = nil, aggregate: RESPCommand.ZINTERAggregate? = nil, withscores: Bool = false) async throws -> RESPToken {
        try await send("ZINTER", 1, key, RESPWithToken("WEIGHTS", weight), RESPWithToken("AGGREGATE", aggregate), RedisPureToken("WITHSCORES", withscores))
    }

    /// Returns the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTER](https:/redis.io/docs/latest/commands/zinter)
    /// - Version: 6.2.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the intersection including, optionally, scores when the _WITHSCORES_ option is used.
    @inlinable
    public func zinter(keys: [RedisKey], weights: [Int], aggregate: RESPCommand.ZINTERAggregate? = nil, withscores: Bool = false) async throws -> RESPToken {
        try await send("ZINTER", RESPArrayWithCount(keys), RESPWithToken("WEIGHTS", weights), RESPWithToken("AGGREGATE", aggregate), RedisPureToken("WITHSCORES", withscores))
    }

    /// Returns the number of members of the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTERCARD](https:/redis.io/docs/latest/commands/zintercard)
    /// - Version: 7.0.0
    /// - Complexity: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting intersection.
    @inlinable
    public func zintercard(key: RedisKey, limit: Int? = nil) async throws -> Int {
        try await send("ZINTERCARD", 1, key, RESPWithToken("LIMIT", limit)).converting()
    }

    /// Returns the number of members of the intersect of multiple sorted sets.
    ///
    /// - Documentation: [ZINTERCARD](https:/redis.io/docs/latest/commands/zintercard)
    /// - Version: 7.0.0
    /// - Complexity: O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting intersection.
    @inlinable
    public func zintercard(keys: [RedisKey], limit: Int? = nil) async throws -> Int {
        try await send("ZINTERCARD", RESPArrayWithCount(keys), RESPWithToken("LIMIT", limit)).converting()
    }

    /// Stores the intersect of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZINTERSTORE](https:/redis.io/docs/latest/commands/zinterstore)
    /// - Version: 2.0.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting sorted set at the _destination_.
    @inlinable
    public func zinterstore(destination: RedisKey, key: RedisKey, weight: Int? = nil, aggregate: RESPCommand.ZINTERSTOREAggregate? = nil) async throws -> Int {
        try await send("ZINTERSTORE", destination, 1, key, RESPWithToken("WEIGHTS", weight), RESPWithToken("AGGREGATE", aggregate)).converting()
    }

    /// Stores the intersect of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZINTERSTORE](https:/redis.io/docs/latest/commands/zinterstore)
    /// - Version: 2.0.0
    /// - Complexity: O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the resulting sorted set at the _destination_.
    @inlinable
    public func zinterstore(destination: RedisKey, keys: [RedisKey], weights: [Int], aggregate: RESPCommand.ZINTERSTOREAggregate? = nil) async throws -> Int {
        try await send("ZINTERSTORE", destination, RESPArrayWithCount(keys), RESPWithToken("WEIGHTS", weights), RESPWithToken("AGGREGATE", aggregate)).converting()
    }

    /// Returns the number of members in a sorted set within a lexicographical range.
    ///
    /// - Documentation: [ZLEXCOUNT](https:/redis.io/docs/latest/commands/zlexcount)
    /// - Version: 2.8.9
    /// - Complexity: O(log(N)) with N being the number of elements in the sorted set.
    /// - Categories: @read, @sortedset, @fast
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members in the specified score range.
    @inlinable
    public func zlexcount(key: RedisKey, min: String, max: String) async throws -> Int {
        try await send("ZLEXCOUNT", key, min, max).converting()
    }

    /// Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZMPOP](https:/redis.io/docs/latest/commands/zmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.
    @inlinable
    public func zmpop(key: RedisKey, `where`: RESPCommand.ZMPOPWhere, count: Int? = nil) async throws -> [RESPToken]? {
        try await send("ZMPOP", 1, key, `where`, RESPWithToken("COUNT", count)).converting()
    }

    /// Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZMPOP](https:/redis.io/docs/latest/commands/zmpop)
    /// - Version: 7.0.0
    /// - Complexity: O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): when no element could be popped.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): A two-element array with the first element being the name of the key from which elements were popped, and the second element is an array of the popped elements. Every entry in the elements array is also an array that contains the member and its score.
    @inlinable
    public func zmpop(keys: [RedisKey], `where`: RESPCommand.ZMPOPWhere, count: Int? = nil) async throws -> [RESPToken]? {
        try await send("ZMPOP", RESPArrayWithCount(keys), `where`, RESPWithToken("COUNT", count)).converting()
    }

    /// Returns the score of one or more members in a sorted set.
    ///
    /// - Documentation: [ZMSCORE](https:/redis.io/docs/latest/commands/zmscore)
    /// - Version: 6.2.0
    /// - Complexity: O(N) where N is the number of members being requested.
    /// - Categories: @read, @sortedset, @fast
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the member does not exist in the sorted set.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of [Double](https:/redis.io/docs/reference/protocol-spec#doubles) _member_ scores as double-precision floating point numbers.
    @inlinable
    public func zmscore(key: RedisKey, member: String) async throws -> [RESPToken]? {
        try await send("ZMSCORE", key, member).converting()
    }

    /// Returns the score of one or more members in a sorted set.
    ///
    /// - Documentation: [ZMSCORE](https:/redis.io/docs/latest/commands/zmscore)
    /// - Version: 6.2.0
    /// - Complexity: O(N) where N is the number of members being requested.
    /// - Categories: @read, @sortedset, @fast
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the member does not exist in the sorted set.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of [Double](https:/redis.io/docs/reference/protocol-spec#doubles) _member_ scores as double-precision floating point numbers.
    @inlinable
    public func zmscore(key: RedisKey, members: [String]) async throws -> [RESPToken]? {
        try await send("ZMSCORE", key, members).converting()
    }

    /// Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZPOPMAX](https:/redis.io/docs/latest/commands/zpopmax)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @fast
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of popped elements and scores.
    @inlinable
    public func zpopmax(key: RedisKey, count: Int? = nil) async throws -> RESPToken {
        try await send("ZPOPMAX", key, count)
    }

    /// Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.
    ///
    /// - Documentation: [ZPOPMIN](https:/redis.io/docs/latest/commands/zpopmin)
    /// - Version: 5.0.0
    /// - Complexity: O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.
    /// - Categories: @write, @sortedset, @fast
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of popped elements and scores.
    @inlinable
    public func zpopmin(key: RedisKey, count: Int? = nil) async throws -> RESPToken {
        try await send("ZPOPMIN", key, count)
    }

    /// Returns one or more random members from a sorted set.
    ///
    /// - Documentation: [ZRANDMEMBER](https:/redis.io/docs/latest/commands/zrandmember)
    /// - Version: 6.2.0
    /// - Complexity: O(N) where N is the number of members returned
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Bulk string](https:/redis.io/docs/reference/protocol-spec#bulk-strings): without the additional _count_ argument, the command returns a randomly selected member, or [Null](https:/redis.io/docs/reference/protocol-spec#nulls) when _key_ doesn't exist.
    ///     [Array](https:/redis.io/docs/reference/protocol-spec#arrays): when the additional _count_ argument is passed, the command returns an array of members, or an empty array when _key_ doesn't exist. If the _WITHSCORES_ modifier is used, the reply is a list of members and their scores from the sorted set.
    @inlinable
    public func zrandmember(key: RedisKey, options: RESPCommand.ZRANDMEMBEROptions? = nil) async throws -> RESPToken {
        try await send("ZRANDMEMBER", key, options)
    }

    /// Returns members in a sorted set within a range of indexes.
    ///
    /// - Documentation: [ZRANGE](https:/redis.io/docs/latest/commands/zrange)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of members in the specified range with, optionally, their scores when the _WITHSCORES_ option is given.
    @inlinable
    public func zrange(key: RedisKey, start: String, stop: String, sortby: RESPCommand.ZRANGESortby? = nil, rev: Bool = false, limit: RESPCommand.ZRANGELimit? = nil, withscores: Bool = false) async throws -> [RESPToken] {
        try await send("ZRANGE", key, start, stop, sortby, RedisPureToken("REV", rev), RESPWithToken("LIMIT", limit), RedisPureToken("WITHSCORES", withscores)).converting()
    }

    /// Returns members in a sorted set within a lexicographical range.
    ///
    /// - Documentation: [ZRANGEBYLEX](https:/redis.io/docs/latest/commands/zrangebylex)
    /// - Version: 2.8.9
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of elements in the specified score range.
    @inlinable
    public func zrangebylex(key: RedisKey, min: String, max: String, limit: RESPCommand.ZRANGEBYLEXLimit? = nil) async throws -> [RESPToken] {
        try await send("ZRANGEBYLEX", key, min, max, RESPWithToken("LIMIT", limit)).converting()
    }

    /// Returns members in a sorted set within a range of scores.
    ///
    /// - Documentation: [ZRANGEBYSCORE](https:/redis.io/docs/latest/commands/zrangebyscore)
    /// - Version: 1.0.5
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of the members with, optionally, their scores in the specified score range.
    @inlinable
    public func zrangebyscore(key: RedisKey, min: Double, max: Double, withscores: Bool = false, limit: RESPCommand.ZRANGEBYSCORELimit? = nil) async throws -> RESPToken {
        try await send("ZRANGEBYSCORE", key, min, max, RedisPureToken("WITHSCORES", withscores), RESPWithToken("LIMIT", limit))
    }

    /// Stores a range of members from sorted set in a key.
    ///
    /// - Documentation: [ZRANGESTORE](https:/redis.io/docs/latest/commands/zrangestore)
    /// - Version: 6.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of elements in the resulting sorted set.
    @inlinable
    public func zrangestore(dst: RedisKey, src: RedisKey, min: String, max: String, sortby: RESPCommand.ZRANGESTORESortby? = nil, rev: Bool = false, limit: RESPCommand.ZRANGESTORELimit? = nil) async throws -> Int {
        try await send("ZRANGESTORE", dst, src, min, max, sortby, RedisPureToken("REV", rev), RESPWithToken("LIMIT", limit)).converting()
    }

    /// Returns the index of a member in a sorted set ordered by ascending scores.
    ///
    /// - Documentation: [ZRANK](https:/redis.io/docs/latest/commands/zrank)
    /// - Version: 2.0.0
    /// - Complexity: O(log(N))
    /// - Categories: @read, @sortedset, @fast
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the key does not exist or the member does not exist in the sorted set.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the rank of the member when _WITHSCORE_ is not used.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the rank and score of the member when _WITHSCORE_ is used.
    @inlinable
    public func zrank(key: RedisKey, member: String, withscore: Bool = false) async throws -> RESPToken {
        try await send("ZRANK", key, member, RedisPureToken("WITHSCORE", withscore))
    }

    /// Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREM](https:/redis.io/docs/latest/commands/zrem)
    /// - Version: 1.2.0
    /// - Complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.
    /// - Categories: @write, @sortedset, @fast
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members removed from the sorted set, not including non-existing members.
    @inlinable
    public func zrem(key: RedisKey, member: String) async throws -> Int {
        try await send("ZREM", key, member).converting()
    }

    /// Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREM](https:/redis.io/docs/latest/commands/zrem)
    /// - Version: 1.2.0
    /// - Complexity: O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.
    /// - Categories: @write, @sortedset, @fast
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of members removed from the sorted set, not including non-existing members.
    @inlinable
    public func zrem(key: RedisKey, members: [String]) async throws -> Int {
        try await send("ZREM", key, members).converting()
    }

    /// Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYLEX](https:/redis.io/docs/latest/commands/zremrangebylex)
    /// - Version: 2.8.9
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): Number of members removed.
    @inlinable
    public func zremrangebylex(key: RedisKey, min: String, max: String) async throws -> Int {
        try await send("ZREMRANGEBYLEX", key, min, max).converting()
    }

    /// Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYRANK](https:/redis.io/docs/latest/commands/zremrangebyrank)
    /// - Version: 2.0.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): Number of members removed.
    @inlinable
    public func zremrangebyrank(key: RedisKey, start: Int, stop: Int) async throws -> Int {
        try await send("ZREMRANGEBYRANK", key, start, stop).converting()
    }

    /// Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.
    ///
    /// - Documentation: [ZREMRANGEBYSCORE](https:/redis.io/docs/latest/commands/zremrangebyscore)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): Number of members removed.
    @inlinable
    public func zremrangebyscore(key: RedisKey, min: Double, max: Double) async throws -> Int {
        try await send("ZREMRANGEBYSCORE", key, min, max).converting()
    }

    /// Returns members in a sorted set within a range of indexes in reverse order.
    ///
    /// - Documentation: [ZREVRANGE](https:/redis.io/docs/latest/commands/zrevrange)
    /// - Version: 1.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of members in the specified range, optionally with their scores if _WITHSCORE_ was used.
    @inlinable
    public func zrevrange(key: RedisKey, start: Int, stop: Int, withscores: Bool = false) async throws -> RESPToken {
        try await send("ZREVRANGE", key, start, stop, RedisPureToken("WITHSCORES", withscores))
    }

    /// Returns members in a sorted set within a lexicographical range in reverse order.
    ///
    /// - Documentation: [ZREVRANGEBYLEX](https:/redis.io/docs/latest/commands/zrevrangebylex)
    /// - Version: 2.8.9
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): List of the elements in the specified score range.
    @inlinable
    public func zrevrangebylex(key: RedisKey, max: String, min: String, limit: RESPCommand.ZREVRANGEBYLEXLimit? = nil) async throws -> [RESPToken] {
        try await send("ZREVRANGEBYLEX", key, max, min, RESPWithToken("LIMIT", limit)).converting()
    }

    /// Returns members in a sorted set within a range of scores in reverse order.
    ///
    /// - Documentation: [ZREVRANGEBYSCORE](https:/redis.io/docs/latest/commands/zrevrangebyscore)
    /// - Version: 2.2.0
    /// - Complexity: O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): a list of the members and, optionally, their scores in the specified score range.
    @inlinable
    public func zrevrangebyscore(key: RedisKey, max: Double, min: Double, withscores: Bool = false, limit: RESPCommand.ZREVRANGEBYSCORELimit? = nil) async throws -> RESPToken {
        try await send("ZREVRANGEBYSCORE", key, max, min, RedisPureToken("WITHSCORES", withscores), RESPWithToken("LIMIT", limit))
    }

    /// Returns the index of a member in a sorted set ordered by descending scores.
    ///
    /// - Documentation: [ZREVRANK](https:/redis.io/docs/latest/commands/zrevrank)
    /// - Version: 2.0.0
    /// - Complexity: O(log(N))
    /// - Categories: @read, @sortedset, @fast
    /// - Returns: One of the following:
    ///     * [Null](https:/redis.io/docs/reference/protocol-spec#nulls): if the key does not exist or the member does not exist in the sorted set.
    ///     * [Integer](https:/redis.io/docs/reference/protocol-spec#integers): The rank of the member when _WITHSCORE_ is not used.
    ///     * [Array](https:/redis.io/docs/reference/protocol-spec#arrays): The rank and score of the member when _WITHSCORE_ is used.
    @inlinable
    public func zrevrank(key: RedisKey, member: String, withscore: Bool = false) async throws -> RESPToken {
        try await send("ZREVRANK", key, member, RedisPureToken("WITHSCORE", withscore))
    }

    /// Iterates over members and scores of a sorted set.
    ///
    /// - Documentation: [ZSCAN](https:/redis.io/docs/latest/commands/zscan)
    /// - Version: 2.8.0
    /// - Complexity: O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): cursor and scan response in array form.
    @inlinable
    public func zscan(key: RedisKey, cursor: Int, pattern: String? = nil, count: Int? = nil) async throws -> [RESPToken] {
        try await send("ZSCAN", key, cursor, RESPWithToken("MATCH", pattern), RESPWithToken("COUNT", count)).converting()
    }

    /// Returns the score of a member in a sorted set.
    ///
    /// - Documentation: [ZSCORE](https:/redis.io/docs/latest/commands/zscore)
    /// - Version: 1.2.0
    /// - Complexity: O(1)
    /// - Categories: @read, @sortedset, @fast
    /// - Returns: One of the following:
    ///     * [Double](https:/redis.io/docs/reference/protocol-spec#doubles): the score of the member (a double-precision floating point number).
    ///     * [Nil](https:/redis.io/docs/reference/protocol-spec#bulk-strings): if _member_ does not exist in the sorted set, or the key does not exist.
    @inlinable
    public func zscore(key: RedisKey, member: String) async throws -> Double? {
        try await send("ZSCORE", key, member).converting()
    }

    /// Returns the union of multiple sorted sets.
    ///
    /// - Documentation: [ZUNION](https:/redis.io/docs/latest/commands/zunion)
    /// - Version: 6.2.0
    /// - Complexity: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the union with, optionally, their scores when _WITHSCORES_ is used.
    @inlinable
    public func zunion(key: RedisKey, weight: Int? = nil, aggregate: RESPCommand.ZUNIONAggregate? = nil, withscores: Bool = false) async throws -> [RESPToken] {
        try await send("ZUNION", 1, key, RESPWithToken("WEIGHTS", weight), RESPWithToken("AGGREGATE", aggregate), RedisPureToken("WITHSCORES", withscores)).converting()
    }

    /// Returns the union of multiple sorted sets.
    ///
    /// - Documentation: [ZUNION](https:/redis.io/docs/latest/commands/zunion)
    /// - Version: 6.2.0
    /// - Complexity: O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Categories: @read, @sortedset, @slow
    /// - Returns: [Array](https:/redis.io/docs/reference/protocol-spec#arrays): the result of the union with, optionally, their scores when _WITHSCORES_ is used.
    @inlinable
    public func zunion(keys: [RedisKey], weights: [Int], aggregate: RESPCommand.ZUNIONAggregate? = nil, withscores: Bool = false) async throws -> [RESPToken] {
        try await send("ZUNION", RESPArrayWithCount(keys), RESPWithToken("WEIGHTS", weights), RESPWithToken("AGGREGATE", aggregate), RedisPureToken("WITHSCORES", withscores)).converting()
    }

    /// Stores the union of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZUNIONSTORE](https:/redis.io/docs/latest/commands/zunionstore)
    /// - Version: 2.0.0
    /// - Complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of elements in the resulting sorted set.
    @inlinable
    public func zunionstore(destination: RedisKey, key: RedisKey, weight: Int? = nil, aggregate: RESPCommand.ZUNIONSTOREAggregate? = nil) async throws -> Int {
        try await send("ZUNIONSTORE", destination, 1, key, RESPWithToken("WEIGHTS", weight), RESPWithToken("AGGREGATE", aggregate)).converting()
    }

    /// Stores the union of multiple sorted sets in a key.
    ///
    /// - Documentation: [ZUNIONSTORE](https:/redis.io/docs/latest/commands/zunionstore)
    /// - Version: 2.0.0
    /// - Complexity: O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.
    /// - Categories: @write, @sortedset, @slow
    /// - Returns: [Integer](https:/redis.io/docs/reference/protocol-spec#integers): the number of elements in the resulting sorted set.
    @inlinable
    public func zunionstore(destination: RedisKey, keys: [RedisKey], weights: [Int], aggregate: RESPCommand.ZUNIONSTOREAggregate? = nil) async throws -> Int {
        try await send("ZUNIONSTORE", destination, RESPArrayWithCount(keys), RESPWithToken("WEIGHTS", weights), RESPWithToken("AGGREGATE", aggregate)).converting()
    }

}
