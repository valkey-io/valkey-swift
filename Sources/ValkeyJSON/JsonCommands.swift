//===----------------------------------------------------------------------===//
//
// This source file is part of the valkey-swift open source project
//
// Copyright (c) 2025 Apple Inc. and the valkey-swift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of valkey-swift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// This file is autogenerated by ValkeyCommandsBuilder

import NIOCore
import Valkey

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif

@_documentation(visibility: internal)
public enum JSON {
    /// Append one or more values to the array values at the path.
    @_documentation(visibility: internal)
    public struct ARRAPPEND<Path: RESPStringRenderable, Json: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var path: Path
        public var json: [Json]

        @inlinable public init(key: ValkeyKey, path: Path, json: [Json]) {
            self.key = key
            self.path = path
            self.json = json
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.ARRAPPEND", key, RESPBulkString(path), json.map { RESPBulkString($0) })
        }
    }

    /// Search for the first occurrence of a scalar JSON value in arrays located at the specified path. Indices out of range are adjusted.
    @_documentation(visibility: internal)
    public struct ARRINDEX<Path: RESPStringRenderable, JsonScalar: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var path: Path
        public var jsonScalar: JsonScalar
        public var start: Int?
        public var end: Int?

        @inlinable public init(key: ValkeyKey, path: Path, jsonScalar: JsonScalar, start: Int? = nil, end: Int? = nil) {
            self.key = key
            self.path = path
            self.jsonScalar = jsonScalar
            self.start = start
            self.end = end
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.ARRINDEX", key, RESPBulkString(path), RESPBulkString(jsonScalar), start, end)
        }
    }

    /// Insert one or more values into an array at the given path before the specified index.
    @_documentation(visibility: internal)
    public struct ARRINSERT<Path: RESPStringRenderable, Json: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var path: Path
        public var index: Int
        public var json: [Json]

        @inlinable public init(key: ValkeyKey, path: Path, index: Int, json: [Json]) {
            self.key = key
            self.path = path
            self.index = index
            self.json = json
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.ARRINSERT", key, RESPBulkString(path), index, json.map { RESPBulkString($0) })
        }
    }

    /// Get length of the array at the path.
    @_documentation(visibility: internal)
    public struct ARRLEN: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.ARRLEN", key, path)
        }
    }

    /// Remove and returns the element at the given index. Popping an empty array returns null.
    @_documentation(visibility: internal)
    public struct ARRPOP: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?
        public var index: Int?

        @inlinable public init(key: ValkeyKey, path: String? = nil, index: Int? = nil) {
            self.key = key
            self.path = path
            self.index = index
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.ARRPOP", key, path, index)
        }
    }

    /// Trim the array at the path so that it becomes subarray [start, end], both inclusive.
    @_documentation(visibility: internal)
    public struct ARRTRIM<Path: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var path: Path
        public var start: Int
        public var end: Int

        @inlinable public init(key: ValkeyKey, path: Path, start: Int, end: Int) {
            self.key = key
            self.path = path
            self.start = start
            self.end = end
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.ARRTRIM", key, RESPBulkString(path), start, end)
        }
    }

    /// Clear the arrays or an object at the specified path.
    @_documentation(visibility: internal)
    public struct CLEAR: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.CLEAR", key, path)
        }
    }

    /// Reports information. Supported subcommands are: MEMORY, DEPTH, FIELDS, HELP
    @_documentation(visibility: internal)
    public struct DEBUG<SubcommandArguments: RESPStringRenderable>: ValkeyCommand {
        public var subcommandArguments: SubcommandArguments

        @inlinable public init(subcommandArguments: SubcommandArguments) {
            self.subcommandArguments = subcommandArguments
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.DEBUG", RESPBulkString(subcommandArguments))
        }
    }

    /// Delete the JSON values at the specified path in a document key.
    @_documentation(visibility: internal)
    public struct DEL: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.DEL", key, path)
        }
    }

    /// An alias of JSON.DEL.
    @_documentation(visibility: internal)
    public struct FORGET: ValkeyCommand {
        @inlinable public init() {
        }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.FORGET")
        }
    }

    /// Get the serialized JSON at one or multiple paths.
    @_documentation(visibility: internal)
    public struct GET: ValkeyCommand {
        public var key: ValkeyKey
        public var indentNewlineSpace: String?
        public var noescape: String?
        public var path: [String]

        @inlinable public init(key: ValkeyKey, indentNewlineSpace: String? = nil, noescape: String? = nil, path: [String] = []) {
            self.key = key
            self.indentNewlineSpace = indentNewlineSpace
            self.noescape = noescape
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.GET", key, indentNewlineSpace, noescape, path)
        }
    }

    /// Get serialized JSONs at the path from multiple document keys. Return null for non-existent key or JSON path.
    @_documentation(visibility: internal)
    public struct MGET<Path: RESPStringRenderable>: ValkeyCommand {
        public var key: [ValkeyKey]
        public var path: Path

        @inlinable public init(key: [ValkeyKey], path: Path) {
            self.key = key
            self.path = path
        }

        public var keysAffected: [ValkeyKey] { key }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.MGET", key, RESPBulkString(path))
        }
    }

    /// Set multiple JSON values at the path to multiple keys.
    @_documentation(visibility: internal)
    public struct MSET<Path: RESPStringRenderable, Json: RESPStringRenderable>: ValkeyCommand {
        public struct Data: RESPRenderable, Sendable, Hashable {
            @usableFromInline let key: ValkeyKey
            @usableFromInline let path: Path
            @usableFromInline let json: Json

            @inlinable public init(key: ValkeyKey, path: Path, json: Json) {
                self.key = key
                self.path = path
                self.json = json
            }

            @inlinable
            public var respEntries: Int {
                key.respEntries + RESPBulkString(path).respEntries + RESPBulkString(json).respEntries
            }

            @inlinable
            public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
                key.encode(into: &commandEncoder)
                RESPBulkString(path).encode(into: &commandEncoder)
                RESPBulkString(json).encode(into: &commandEncoder)
            }
        }
        public var data: [Data]

        @inlinable public init(data: [Data]) {
            self.data = data
        }

        public var keysAffected: [ValkeyKey] { data.map { $0.key } }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.MSET", data)
        }
    }

    /// Increment the number values at the path by a given number.
    @_documentation(visibility: internal)
    public struct NUMINCRBY<Path: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var path: Path
        public var number: Int

        @inlinable public init(key: ValkeyKey, path: Path, number: Int) {
            self.key = key
            self.path = path
            self.number = number
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.NUMINCRBY", key, RESPBulkString(path), number)
        }
    }

    /// Multiply the numeric values at the path by a given number.
    @_documentation(visibility: internal)
    public struct NUMMULTBY<Path: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var path: Path
        public var number: Int

        @inlinable public init(key: ValkeyKey, path: Path, number: Int) {
            self.key = key
            self.path = path
            self.number = number
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.NUMMULTBY", key, RESPBulkString(path), number)
        }
    }

    /// Retrieve the key names from the objects at the specified path.
    @_documentation(visibility: internal)
    public struct OBJKEYS: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.OBJKEYS", key, path)
        }
    }

    /// Get the number of keys in the object at the specified path.
    @_documentation(visibility: internal)
    public struct OBJLEN: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.OBJLEN", key, path)
        }
    }

    /// Return the JSON value at the given path in Redis Serialization Protocol (RESP).
    @_documentation(visibility: internal)
    public struct RESP: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.RESP", key, path)
        }
    }

    /// Set JSON values at the specified path.
    @_documentation(visibility: internal)
    public struct SET<Path: RESPStringRenderable, Json: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var path: Path
        public var json: Json
        public var options: String?

        @inlinable public init(key: ValkeyKey, path: Path, json: Json, options: String? = nil) {
            self.key = key
            self.path = path
            self.json = json
            self.options = options
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.SET", key, RESPBulkString(path), RESPBulkString(json), options)
        }
    }

    /// Append a string to the JSON strings at the specified path.
    @_documentation(visibility: internal)
    public struct STRAPPEND<JsonString: RESPStringRenderable>: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?
        public var jsonString: JsonString

        @inlinable public init(key: ValkeyKey, path: String? = nil, jsonString: JsonString) {
            self.key = key
            self.path = path
            self.jsonString = jsonString
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.STRAPPEND", key, path, RESPBulkString(jsonString))
        }
    }

    /// Get the length of the JSON string values at the specified path.
    @_documentation(visibility: internal)
    public struct STRLEN: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.STRLEN", key, path)
        }
    }

    /// Toggle boolean values between true and false at the specified path.
    @_documentation(visibility: internal)
    public struct TOGGLE: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.TOGGLE", key, path)
        }
    }

    /// Report the type of the values at the given path.
    @_documentation(visibility: internal)
    public struct TYPE: ValkeyCommand {
        public var key: ValkeyKey
        public var path: String?

        @inlinable public init(key: ValkeyKey, path: String? = nil) {
            self.key = key
            self.path = path
        }

        public var keysAffected: CollectionOfOne<ValkeyKey> { .init(key) }

        @inlinable public func encode(into commandEncoder: inout ValkeyCommandEncoder) {
            commandEncoder.encodeArray("JSON.TYPE", key, path)
        }
    }

}

extension ValkeyConnectionProtocol {
    /// Append one or more values to the array values at the path.
    ///
    /// - Documentation: [JSON.ARRAPPEND](https:/valkey.io/commands/json.arrappend)
    /// - Complexity: O(N) where N is the number of vaules
    @inlinable
    public func jsonArrappend<Path: RESPStringRenderable, Json: RESPStringRenderable>(key: ValkeyKey, path: Path, json: [Json]) async throws -> RESPToken {
        try await send(command: JSON.ARRAPPEND(key: key, path: path, json: json))
    }

    /// Search for the first occurrence of a scalar JSON value in arrays located at the specified path. Indices out of range are adjusted.
    ///
    /// - Documentation: [JSON.ARRINDEX](https:/valkey.io/commands/json.arrindex)
    /// - Complexity: O(N), where N is the length of the array.
    @inlinable
    public func jsonArrindex<Path: RESPStringRenderable, JsonScalar: RESPStringRenderable>(key: ValkeyKey, path: Path, jsonScalar: JsonScalar, start: Int? = nil, end: Int? = nil) async throws -> RESPToken {
        try await send(command: JSON.ARRINDEX(key: key, path: path, jsonScalar: jsonScalar, start: start, end: end))
    }

    /// Insert one or more values into an array at the given path before the specified index.
    ///
    /// - Documentation: [JSON.ARRINSERT](https:/valkey.io/commands/json.arrinsert)
    /// - Complexity: O(N) where N is the length of the array.
    @inlinable
    public func jsonArrinsert<Path: RESPStringRenderable, Json: RESPStringRenderable>(key: ValkeyKey, path: Path, index: Int, json: [Json]) async throws -> RESPToken {
        try await send(command: JSON.ARRINSERT(key: key, path: path, index: index, json: json))
    }

    /// Get length of the array at the path.
    ///
    /// - Documentation: [JSON.ARRLEN](https:/valkey.io/commands/json.arrlen)
    /// - Complexity: O(N) where N is the number of json arrays matched at the path.
    @inlinable
    public func jsonArrlen(key: ValkeyKey, path: String? = nil) async throws -> JSON.ARRLEN.Response {
        try await send(command: JSON.ARRLEN(key: key, path: path))
    }

    /// Remove and returns the element at the given index. Popping an empty array returns null.
    ///
    /// - Documentation: [JSON.ARRPOP](https:/valkey.io/commands/json.arrpop)
    /// - Complexity: O(N) where N is the number of jsons arrays matched by the path.
    @inlinable
    public func jsonArrpop(key: ValkeyKey, path: String? = nil, index: Int? = nil) async throws -> JSON.ARRPOP.Response {
        try await send(command: JSON.ARRPOP(key: key, path: path, index: index))
    }

    /// Trim the array at the path so that it becomes subarray [start, end], both inclusive.
    ///
    /// - Documentation: [JSON.ARRTRIM](https:/valkey.io/commands/json.arrtrim)
    /// - Complexity: O(N) where N is the number of json arrays matched by the path.
    @inlinable
    public func jsonArrtrim<Path: RESPStringRenderable>(key: ValkeyKey, path: Path, start: Int, end: Int) async throws -> RESPToken {
        try await send(command: JSON.ARRTRIM(key: key, path: path, start: start, end: end))
    }

    /// Clear the arrays or an object at the specified path.
    ///
    /// - Documentation: [JSON.CLEAR](https:/valkey.io/commands/json.clear)
    /// - Complexity: O(N) where N is the number of json arrays/objects matched by the path.
    @inlinable
    public func jsonClear(key: ValkeyKey, path: String? = nil) async throws -> JSON.CLEAR.Response {
        try await send(command: JSON.CLEAR(key: key, path: path))
    }

    /// Reports information. Supported subcommands are: MEMORY, DEPTH, FIELDS, HELP
    ///
    /// - Documentation: [JSON.DEBUG](https:/valkey.io/commands/json.debug)
    /// - Complexity: O(1)
    @inlinable
    public func jsonDebug<SubcommandArguments: RESPStringRenderable>(subcommandArguments: SubcommandArguments) async throws -> RESPToken {
        try await send(command: JSON.DEBUG(subcommandArguments: subcommandArguments))
    }

    /// Delete the JSON values at the specified path in a document key.
    ///
    /// - Documentation: [JSON.DEL](https:/valkey.io/commands/json.del)
    /// - Complexity: O(N) where N is the number of json values matched by the path.
    @inlinable
    public func jsonDel(key: ValkeyKey, path: String? = nil) async throws -> JSON.DEL.Response {
        try await send(command: JSON.DEL(key: key, path: path))
    }

    /// An alias of JSON.DEL.
    ///
    /// - Documentation: [JSON.FORGET](https:/valkey.io/commands/json.forget)
    @inlinable
    public func jsonForget() async throws -> JSON.FORGET.Response {
        try await send(command: JSON.FORGET())
    }

    /// Get the serialized JSON at one or multiple paths.
    ///
    /// - Documentation: [JSON.GET](https:/valkey.io/commands/json.get)
    /// - Complexity: O(N) where N is the number of paths
    @inlinable
    public func jsonGet(key: ValkeyKey, indentNewlineSpace: String? = nil, noescape: String? = nil, path: [String] = []) async throws -> JSON.GET.Response {
        try await send(command: JSON.GET(key: key, indentNewlineSpace: indentNewlineSpace, noescape: noescape, path: path))
    }

    /// Get serialized JSONs at the path from multiple document keys. Return null for non-existent key or JSON path.
    ///
    /// - Documentation: [JSON.MGET](https:/valkey.io/commands/json.mget)
    /// - Complexity: O(N) where N is the number of keys
    @inlinable
    public func jsonMget<Path: RESPStringRenderable>(key: [ValkeyKey], path: Path) async throws -> RESPToken {
        try await send(command: JSON.MGET(key: key, path: path))
    }

    /// Set multiple JSON values at the path to multiple keys.
    ///
    /// - Documentation: [JSON.MSET](https:/valkey.io/commands/json.mset)
    /// - Complexity: O(N) where N is the number of keys
    @inlinable
    public func jsonMset<Path: RESPStringRenderable, Json: RESPStringRenderable>(data: [JSON.MSET<Path, Json>.Data]) async throws -> RESPToken {
        try await send(command: JSON.MSET(data: data))
    }

    /// Increment the number values at the path by a given number.
    ///
    /// - Documentation: [JSON.NUMINCRBY](https:/valkey.io/commands/json.numincrby)
    /// - Complexity: O(N) where N is the number of json values matched by the path.
    @inlinable
    public func jsonNumincrby<Path: RESPStringRenderable>(key: ValkeyKey, path: Path, number: Int) async throws -> RESPToken {
        try await send(command: JSON.NUMINCRBY(key: key, path: path, number: number))
    }

    /// Multiply the numeric values at the path by a given number.
    ///
    /// - Documentation: [JSON.NUMMULTBY](https:/valkey.io/commands/json.nummultby)
    /// - Complexity: O(N) where N is the number of json values matched by the path.
    @inlinable
    public func jsonNummultby<Path: RESPStringRenderable>(key: ValkeyKey, path: Path, number: Int) async throws -> RESPToken {
        try await send(command: JSON.NUMMULTBY(key: key, path: path, number: number))
    }

    /// Retrieve the key names from the objects at the specified path.
    ///
    /// - Documentation: [JSON.OBJKEYS](https:/valkey.io/commands/json.objkeys)
    /// - Complexity: O(N) where N is the number of json objects matched by the path.
    @inlinable
    public func jsonObjkeys(key: ValkeyKey, path: String? = nil) async throws -> JSON.OBJKEYS.Response {
        try await send(command: JSON.OBJKEYS(key: key, path: path))
    }

    /// Get the number of keys in the object at the specified path.
    ///
    /// - Documentation: [JSON.OBJLEN](https:/valkey.io/commands/json.objlen)
    /// - Complexity: O(N) where N is the number of json objects matched by the path.
    @inlinable
    public func jsonObjlen(key: ValkeyKey, path: String? = nil) async throws -> JSON.OBJLEN.Response {
        try await send(command: JSON.OBJLEN(key: key, path: path))
    }

    /// Return the JSON value at the given path in Redis Serialization Protocol (RESP).
    ///
    /// - Documentation: [JSON.RESP](https:/valkey.io/commands/json.resp)
    /// - Complexity: O(N) where N is the number of json values matched by the path.
    @inlinable
    public func jsonResp(key: ValkeyKey, path: String? = nil) async throws -> JSON.RESP.Response {
        try await send(command: JSON.RESP(key: key, path: path))
    }

    /// Set JSON values at the specified path.
    ///
    /// - Documentation: [JSON.SET](https:/valkey.io/commands/json.set)
    /// - Complexity: O(N) where N is the number of json values matched by the path.
    @inlinable
    public func jsonSet<Path: RESPStringRenderable, Json: RESPStringRenderable>(key: ValkeyKey, path: Path, json: Json, options: String? = nil) async throws -> RESPToken {
        try await send(command: JSON.SET(key: key, path: path, json: json, options: options))
    }

    /// Append a string to the JSON strings at the specified path.
    ///
    /// - Documentation: [JSON.STRAPPEND](https:/valkey.io/commands/json.strappend)
    /// - Complexity: O(N) where N is the number of string values matched by the path.
    @inlinable
    public func jsonStrappend<JsonString: RESPStringRenderable>(key: ValkeyKey, path: String? = nil, jsonString: JsonString) async throws -> RESPToken {
        try await send(command: JSON.STRAPPEND(key: key, path: path, jsonString: jsonString))
    }

    /// Get the length of the JSON string values at the specified path.
    ///
    /// - Documentation: [JSON.STRLEN](https:/valkey.io/commands/json.strlen)
    /// - Complexity: O(N) where N is the number of string values matched by the path.
    @inlinable
    public func jsonStrlen(key: ValkeyKey, path: String? = nil) async throws -> JSON.STRLEN.Response {
        try await send(command: JSON.STRLEN(key: key, path: path))
    }

    /// Toggle boolean values between true and false at the specified path.
    ///
    /// - Documentation: [JSON.TOGGLE](https:/valkey.io/commands/json.toggle)
    /// - Complexity: O(N) where N is the number of json boolean values matched by the path.
    @inlinable
    public func jsonToggle(key: ValkeyKey, path: String? = nil) async throws -> JSON.TOGGLE.Response {
        try await send(command: JSON.TOGGLE(key: key, path: path))
    }

    /// Report the type of the values at the given path.
    ///
    /// - Documentation: [JSON.TYPE](https:/valkey.io/commands/json.type)
    /// - Complexity: O(N) where N is the number of json values matched by the path.
    @inlinable
    public func jsonType(key: ValkeyKey, path: String? = nil) async throws -> JSON.TYPE.Response {
        try await send(command: JSON.TYPE(key: key, path: path))
    }

}
